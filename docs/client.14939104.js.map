{"version":3,"sources":["webpack:///client.14939104.js","webpack:///webpack/bootstrap c6d11d4d263669a0a586","webpack:///./~/ramda/src/internal/_curry2.js","webpack:///./~/ramda/src/internal/_curry1.js","webpack:///./~/ramda/src/internal/_curry3.js","webpack:///./~/ramda/src/internal/_dispatchable.js","webpack:///./~/ramda/src/internal/_xfBase.js","webpack:///./~/ramda/src/curryN.js","webpack:///./~/ramda/src/internal/_has.js","webpack:///./~/ramda/src/map.js","webpack:///./~/ramda/src/equals.js","webpack:///./~/ramda/src/internal/_reduce.js","webpack:///./~/ramda/src/internal/_concat.js","webpack:////Users/frizi/.config/yarn/global/~/vue-loader/lib/component-normalizer.js","webpack:///./~/ramda/src/internal/_arity.js","webpack:///./~/ramda/src/keys.js","webpack:///./~/ramda/src/reduce.js","webpack:///./~/ramda/src/internal/_isArray.js","webpack:///./~/ramda/src/internal/_reduced.js","webpack:///./~/vuex/dist/vuex.esm.js","webpack:///./~/ramda/index.js","webpack:///./~/ramda/src/internal/_contains.js","webpack:///./~/ramda/src/slice.js","webpack:///./~/ramda/src/always.js","webpack:///./~/ramda/src/max.js","webpack:////Users/frizi/.config/yarn/global/~/vue/dist/vue.runtime.esm.js","webpack:///./~/ramda/src/internal/_checkForMethod.js","webpack:///./~/ramda/src/internal/_isString.js","webpack:///./~/ramda/src/invoker.js","webpack:///./~/ramda/src/nth.js","webpack:///./~/ramda/src/path.js","webpack:///./~/ramda/src/pluck.js","webpack:///./~/ramda/src/toString.js","webpack:///./src/store/index.js","webpack:///./~/ramda/src/add.js","webpack:///./~/ramda/src/assoc.js","webpack:///./~/ramda/src/curry.js","webpack:///./~/ramda/src/flip.js","webpack:///./~/ramda/src/internal/_containsWith.js","webpack:///./~/ramda/src/internal/_curryN.js","webpack:///./~/ramda/src/internal/_isArrayLike.js","webpack:///./~/ramda/src/internal/_isFunction.js","webpack:///./~/ramda/src/internal/_isPlaceholder.js","webpack:///./~/ramda/src/internal/_map.js","webpack:///./~/ramda/src/lens.js","webpack:///./~/ramda/src/lift.js","webpack:///./~/ramda/src/mergeDeepWithKey.js","webpack:///./~/ramda/src/nAry.js","webpack:///./~/ramda/src/reduceBy.js","webpack:///./~/ramda/src/reject.js","webpack:///./~/ramda/src/reverse.js","webpack:///./~/ramda/src/ap.js","webpack:///./~/ramda/src/chain.js","webpack:///./~/ramda/src/compose.js","webpack:///./~/ramda/src/concat.js","webpack:///./~/ramda/src/filter.js","webpack:///./~/ramda/src/identity.js","webpack:///./~/ramda/src/internal/_assign.js","webpack:///./~/ramda/src/internal/_filter.js","webpack:///./~/ramda/src/internal/_identity.js","webpack:///./~/ramda/src/internal/_isInteger.js","webpack:///./~/ramda/src/internal/_isObject.js","webpack:///./~/ramda/src/internal/_isTransformer.js","webpack:///./~/ramda/src/mergeWithKey.js","webpack:///./~/ramda/src/prop.js","webpack:///./~/ramda/src/tail.js","webpack:///./~/ramda/src/take.js","webpack:///./~/ramda/src/type.js","webpack:///./~/ramda/src/uniq.js","webpack:///./~/ramda/src/uniqWith.js","webpack:///./~/ramda/src/update.js","webpack:///./src/notes.js","webpack:///./src/store/mutations.js","webpack:///./src/components/Tape.vue?bbe0","webpack:///./~/ramda/src/adjust.js","webpack:///./~/ramda/src/and.js","webpack:///./~/ramda/src/any.js","webpack:///./~/ramda/src/apply.js","webpack:///./~/ramda/src/assocPath.js","webpack:///./~/ramda/src/bind.js","webpack:///./~/ramda/src/composeK.js","webpack:///./~/ramda/src/constructN.js","webpack:///./~/ramda/src/converge.js","webpack:///./~/ramda/src/defaultTo.js","webpack:///./~/ramda/src/difference.js","webpack:///./~/ramda/src/differenceWith.js","webpack:///./~/ramda/src/dissoc.js","webpack:///./~/ramda/src/drop.js","webpack:///./~/ramda/src/dropRepeatsWith.js","webpack:///./~/ramda/src/empty.js","webpack:///./~/ramda/src/identical.js","webpack:///./~/ramda/src/internal/_clone.js","webpack:///./~/ramda/src/internal/_cloneRegExp.js","webpack:///./~/ramda/src/internal/_complement.js","webpack:///./~/ramda/src/internal/_createPartialApplicator.js","webpack:///./~/ramda/src/internal/_indexOf.js","webpack:///./~/ramda/src/internal/_isArguments.js","webpack:///./~/ramda/src/internal/_isNumber.js","webpack:///./~/ramda/src/internal/_makeFlat.js","webpack:///./~/ramda/src/internal/_xany.js","webpack:///./~/ramda/src/internal/_xdropRepeatsWith.js","webpack:///./~/ramda/src/internal/_xwrap.js","webpack:///./~/ramda/src/is.js","webpack:///./~/ramda/src/isNil.js","webpack:///./~/ramda/src/juxt.js","webpack:///./~/ramda/src/last.js","webpack:///./~/ramda/src/length.js","webpack:///./~/ramda/src/liftN.js","webpack:///./~/ramda/src/mean.js","webpack:///./~/ramda/src/memoizeWith.js","webpack:///./~/ramda/src/multiply.js","webpack:///./~/ramda/src/not.js","webpack:///./~/ramda/src/objOf.js","webpack:///./~/ramda/src/or.js","webpack:///./~/ramda/src/over.js","webpack:///./~/ramda/src/pickAll.js","webpack:///./~/ramda/src/pipe.js","webpack:///./~/ramda/src/pipeP.js","webpack:///./~/ramda/src/prepend.js","webpack:///./~/ramda/src/reduceRight.js","webpack:///./~/ramda/src/remove.js","webpack:///./~/ramda/src/sequence.js","webpack:///./~/ramda/src/sum.js","webpack:///./~/ramda/src/takeLast.js","webpack:///./~/ramda/src/times.js","webpack:///./~/ramda/src/uniqBy.js","webpack:///./~/ramda/src/useWith.js","webpack:///./~/ramda/src/values.js","webpack:///./~/ramda/src/where.js","webpack:///./src/index.js","webpack:///App.vue","webpack:///ArrangementPanel.vue","webpack:///BarMarks.vue","webpack:///Clip.vue","webpack:///KeyboardController.vue","webpack:///NumberSlider.vue","webpack:///SettingsPanel.vue","webpack:///Tape.vue","webpack:///Tapes.vue","webpack:///ViewSlider.vue","webpack:///./src/audio/MidiCtx.js","webpack:///./src/audio/audioCtx.js","webpack:///./src/drivers/LaunchpadOutput.js","webpack:///./src/drivers/index.js","webpack:///./src/measures.js","webpack:///./src/mixins/docEvents.js","webpack:///./src/mixins/focus.js","webpack:///./src/mixins/index.js","webpack:///./src/store/actions.js","webpack:///./src/store/getters.js","webpack:///./src/store/state.js","webpack:///./src/util.js","webpack:///./src/App.vue?acd6","webpack:///./src/components/ArrangementPanel.vue","webpack:///./src/components/BarMarks.vue?1757","webpack:///./src/components/Clip.vue?f824","webpack:///./src/components/KeyboardController.vue","webpack:///./src/components/NumberSlider.vue?30fb","webpack:///./src/components/SettingsPanel.vue?f23b","webpack:///./src/components/Tapes.vue","webpack:///./src/components/ViewSlider.vue?2c5d","webpack:///./src/components/Tapes.vue?cbe7","webpack:///./src/components/Tape.vue?2bb9","webpack:///./src/components/Clip.vue?6ec1","webpack:///./src/components/ArrangementPanel.vue?5f09","webpack:///./src/components/NumberSlider.vue?3919","webpack:///./src/components/BarMarks.vue?017b","webpack:///./src/components/SettingsPanel.vue?c271","webpack:///./src/components/ViewSlider.vue?76d7","webpack:///./src/App.vue?2c3d","webpack:///(webpack)/buildin/global.js","webpack:///./~/ramda/src/F.js","webpack:///./~/ramda/src/T.js","webpack:///./~/ramda/src/__.js","webpack:///./~/ramda/src/addIndex.js","webpack:///./~/ramda/src/all.js","webpack:///./~/ramda/src/allPass.js","webpack:///./~/ramda/src/anyPass.js","webpack:///./~/ramda/src/aperture.js","webpack:///./~/ramda/src/append.js","webpack:///./~/ramda/src/applySpec.js","webpack:///./~/ramda/src/ascend.js","webpack:///./~/ramda/src/binary.js","webpack:///./~/ramda/src/both.js","webpack:///./~/ramda/src/call.js","webpack:///./~/ramda/src/clamp.js","webpack:///./~/ramda/src/clone.js","webpack:///./~/ramda/src/comparator.js","webpack:///./~/ramda/src/complement.js","webpack:///./~/ramda/src/composeP.js","webpack:///./~/ramda/src/cond.js","webpack:///./~/ramda/src/construct.js","webpack:///./~/ramda/src/contains.js","webpack:///./~/ramda/src/countBy.js","webpack:///./~/ramda/src/dec.js","webpack:///./~/ramda/src/descend.js","webpack:///./~/ramda/src/dissocPath.js","webpack:///./~/ramda/src/divide.js","webpack:///./~/ramda/src/dropLast.js","webpack:///./~/ramda/src/dropLastWhile.js","webpack:///./~/ramda/src/dropRepeats.js","webpack:///./~/ramda/src/dropWhile.js","webpack:///./~/ramda/src/either.js","webpack:///./~/ramda/src/endsWith.js","webpack:///./~/ramda/src/eqBy.js","webpack:///./~/ramda/src/eqProps.js","webpack:///./~/ramda/src/evolve.js","webpack:///./~/ramda/src/find.js","webpack:///./~/ramda/src/findIndex.js","webpack:///./~/ramda/src/findLast.js","webpack:///./~/ramda/src/findLastIndex.js","webpack:///./~/ramda/src/flatten.js","webpack:///./~/ramda/src/forEach.js","webpack:///./~/ramda/src/forEachObjIndexed.js","webpack:///./~/ramda/src/fromPairs.js","webpack:///./~/ramda/src/groupBy.js","webpack:///./~/ramda/src/groupWith.js","webpack:///./~/ramda/src/gt.js","webpack:///./~/ramda/src/gte.js","webpack:///./~/ramda/src/has.js","webpack:///./~/ramda/src/hasIn.js","webpack:///./~/ramda/src/head.js","webpack:///./~/ramda/src/ifElse.js","webpack:///./~/ramda/src/inc.js","webpack:///./~/ramda/src/indexBy.js","webpack:///./~/ramda/src/indexOf.js","webpack:///./~/ramda/src/init.js","webpack:///./~/ramda/src/innerJoin.js","webpack:///./~/ramda/src/insert.js","webpack:///./~/ramda/src/insertAll.js","webpack:///./~/ramda/src/internal/_Set.js","webpack:///./~/ramda/src/internal/_aperture.js","webpack:///./~/ramda/src/internal/_arrayFromIterator.js","webpack:///./~/ramda/src/internal/_dropLast.js","webpack:///./~/ramda/src/internal/_dropLastWhile.js","webpack:///./~/ramda/src/internal/_equals.js","webpack:///./~/ramda/src/internal/_flatCat.js","webpack:///./~/ramda/src/internal/_forceReduced.js","webpack:///./~/ramda/src/internal/_functionName.js","webpack:///./~/ramda/src/internal/_isRegExp.js","webpack:///./~/ramda/src/internal/_objectAssign.js","webpack:///./~/ramda/src/internal/_of.js","webpack:///./~/ramda/src/internal/_pipe.js","webpack:///./~/ramda/src/internal/_pipeP.js","webpack:///./~/ramda/src/internal/_quote.js","webpack:///./~/ramda/src/internal/_stepCat.js","webpack:///./~/ramda/src/internal/_toISOString.js","webpack:///./~/ramda/src/internal/_toString.js","webpack:///./~/ramda/src/internal/_xall.js","webpack:///./~/ramda/src/internal/_xaperture.js","webpack:///./~/ramda/src/internal/_xchain.js","webpack:///./~/ramda/src/internal/_xdrop.js","webpack:///./~/ramda/src/internal/_xdropLast.js","webpack:///./~/ramda/src/internal/_xdropLastWhile.js","webpack:///./~/ramda/src/internal/_xdropWhile.js","webpack:///./~/ramda/src/internal/_xfilter.js","webpack:///./~/ramda/src/internal/_xfind.js","webpack:///./~/ramda/src/internal/_xfindIndex.js","webpack:///./~/ramda/src/internal/_xfindLast.js","webpack:///./~/ramda/src/internal/_xfindLastIndex.js","webpack:///./~/ramda/src/internal/_xmap.js","webpack:///./~/ramda/src/internal/_xreduceBy.js","webpack:///./~/ramda/src/internal/_xtake.js","webpack:///./~/ramda/src/internal/_xtakeWhile.js","webpack:///./~/ramda/src/intersection.js","webpack:///./~/ramda/src/intersectionWith.js","webpack:///./~/ramda/src/intersperse.js","webpack:///./~/ramda/src/into.js","webpack:///./~/ramda/src/invert.js","webpack:///./~/ramda/src/invertObj.js","webpack:///./~/ramda/src/isEmpty.js","webpack:///./~/ramda/src/join.js","webpack:///./~/ramda/src/keysIn.js","webpack:///./~/ramda/src/lastIndexOf.js","webpack:///./~/ramda/src/lensIndex.js","webpack:///./~/ramda/src/lensPath.js","webpack:///./~/ramda/src/lensProp.js","webpack:///./~/ramda/src/lt.js","webpack:///./~/ramda/src/lte.js","webpack:///./~/ramda/src/mapAccum.js","webpack:///./~/ramda/src/mapAccumRight.js","webpack:///./~/ramda/src/mapObjIndexed.js","webpack:///./~/ramda/src/match.js","webpack:///./~/ramda/src/mathMod.js","webpack:///./~/ramda/src/maxBy.js","webpack:///./~/ramda/src/median.js","webpack:///./~/ramda/src/memoize.js","webpack:///./~/ramda/src/merge.js","webpack:///./~/ramda/src/mergeAll.js","webpack:///./~/ramda/src/mergeDeepLeft.js","webpack:///./~/ramda/src/mergeDeepRight.js","webpack:///./~/ramda/src/mergeDeepWith.js","webpack:///./~/ramda/src/mergeWith.js","webpack:///./~/ramda/src/min.js","webpack:///./~/ramda/src/minBy.js","webpack:///./~/ramda/src/modulo.js","webpack:///./~/ramda/src/negate.js","webpack:///./~/ramda/src/none.js","webpack:///./~/ramda/src/nthArg.js","webpack:///./~/ramda/src/o.js","webpack:///./~/ramda/src/of.js","webpack:///./~/ramda/src/omit.js","webpack:///./~/ramda/src/once.js","webpack:///./~/ramda/src/pair.js","webpack:///./~/ramda/src/partial.js","webpack:///./~/ramda/src/partialRight.js","webpack:///./~/ramda/src/partition.js","webpack:///./~/ramda/src/pathEq.js","webpack:///./~/ramda/src/pathOr.js","webpack:///./~/ramda/src/pathSatisfies.js","webpack:///./~/ramda/src/pick.js","webpack:///./~/ramda/src/pickBy.js","webpack:///./~/ramda/src/pipeK.js","webpack:///./~/ramda/src/product.js","webpack:///./~/ramda/src/project.js","webpack:///./~/ramda/src/propEq.js","webpack:///./~/ramda/src/propIs.js","webpack:///./~/ramda/src/propOr.js","webpack:///./~/ramda/src/propSatisfies.js","webpack:///./~/ramda/src/props.js","webpack:///./~/ramda/src/range.js","webpack:///./~/ramda/src/reduceWhile.js","webpack:///./~/ramda/src/reduced.js","webpack:///./~/ramda/src/repeat.js","webpack:///./~/ramda/src/replace.js","webpack:///./~/ramda/src/scan.js","webpack:///./~/ramda/src/set.js","webpack:///./~/ramda/src/sort.js","webpack:///./~/ramda/src/sortBy.js","webpack:///./~/ramda/src/sortWith.js","webpack:///./~/ramda/src/split.js","webpack:///./~/ramda/src/splitAt.js","webpack:///./~/ramda/src/splitEvery.js","webpack:///./~/ramda/src/splitWhen.js","webpack:///./~/ramda/src/startsWith.js","webpack:///./~/ramda/src/subtract.js","webpack:///./~/ramda/src/symmetricDifference.js","webpack:///./~/ramda/src/symmetricDifferenceWith.js","webpack:///./~/ramda/src/takeLastWhile.js","webpack:///./~/ramda/src/takeWhile.js","webpack:///./~/ramda/src/tap.js","webpack:///./~/ramda/src/test.js","webpack:///./~/ramda/src/toLower.js","webpack:///./~/ramda/src/toPairs.js","webpack:///./~/ramda/src/toPairsIn.js","webpack:///./~/ramda/src/toUpper.js","webpack:///./~/ramda/src/transduce.js","webpack:///./~/ramda/src/transpose.js","webpack:///./~/ramda/src/traverse.js","webpack:///./~/ramda/src/trim.js","webpack:///./~/ramda/src/tryCatch.js","webpack:///./~/ramda/src/unapply.js","webpack:///./~/ramda/src/unary.js","webpack:///./~/ramda/src/uncurryN.js","webpack:///./~/ramda/src/unfold.js","webpack:///./~/ramda/src/union.js","webpack:///./~/ramda/src/unionWith.js","webpack:///./~/ramda/src/unless.js","webpack:///./~/ramda/src/unnest.js","webpack:///./~/ramda/src/until.js","webpack:///./~/ramda/src/valuesIn.js","webpack:///./~/ramda/src/view.js","webpack:///./~/ramda/src/when.js","webpack:///./~/ramda/src/whereEq.js","webpack:///./~/ramda/src/without.js","webpack:///./~/ramda/src/xprod.js","webpack:///./~/ramda/src/zip.js","webpack:///./~/ramda/src/zipObj.js","webpack:///./~/ramda/src/zipWith.js","webpack:///./~/tone/build/Tone.js","webpack:///./~/webmidi/webmidi.min.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_curry1","_isPlaceholder","fn","f2","a","b","arguments","length","_b","_a","f1","apply","this","_curry2","f3","_c","_isArray","_isTransformer","methodNames","xf","args","Array","slice","obj","pop","idx","init","result","_arity","_curryN","prop","_dispatchable","_map","_reduce","_xmap","curryN","keys","functor","toString","acc","key","_equals","_isArrayLike","_xwrap","bind","_arrayReduce","list","len","_iterableReduce","iter","step","next","done","_methodReduce","methodName","symIterator","Symbol","iterator","reduce","TypeError","set1","set2","len1","len2","rawScriptExports","compiledTemplate","scopeId","cssModules","esModule","scriptExports","type","default","options","render","staticRenderFns","_scopeId","computed","forEach","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_has","_isArguments","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","nIdx","ks","checkArgsLength","_curry3","isArray","val","x","@@transducer/value","@@transducer/reduced","__webpack_exports__","devtoolPlugin","store","devtoolHook","_devtoolHook","emit","on","targetState","replaceState","subscribe","mutation","state","forEachValue","isObject","isPromise","then","assert","condition","msg","update","targetModule","newModule","getChild","console","warn","resetStore","hot","_actions","create","_mutations","_wrappedGetters","_modulesNamespaceMap","installModule","_modules","root","resetStoreVM","oldVm","_vm","getters","wrappedGetters","silent","Vue","config","data","$$state","strict","enableStrictMode","_withCommit","_data","nextTick","$destroy","rootState","path","isRoot","namespace","getNamespace","namespaced","parentState","getNestedState","moduleName","set","local","context","makeLocalContext","forEachMutation","registerMutation","forEachAction","action","registerAction","forEachGetter","registerGetter","forEachChild","child","concat","noNamespace","dispatch","_type","_payload","_options","unifyObjectStyle","payload","error","commit","defineProperties","makeLocalGetters","gettersProxy","splitPos","localType","handler","push","cb","res","rootGetters","Promise","resolve","catch","err","rawGetter","$watch","_committing","deep","sync","install","_Vue","applyMixin","normalizeMap","map","normalizeNamespace","charAt","getModuleByNamespace","helper","Store","mapState","mapMutations","mapGetters","mapActions","vuexInit","$options","$store","parent","Number","version","split","usesInit","_lifecycleHooks","indexOf","mixin","beforeCreate","_init","window","__VUE_DEVTOOLS_GLOBAL_HOOK__","Module","rawModule","runtime","_children","_rawModule","rawState","prototypeAccessors$1","addChild","removeChild","actions","mutations","ModuleCollection","rawRootModule","this$1","register","rawChildModule","unregister","plugins","_subscribers","_watcherVM","ref","plugin","prototypeAccessors","v","entry","sub","all","subs","splice","watch","registerModule","unregisterModule","delete","hotUpdate","newOptions","committing","states","vuex","index_esm","F","T","__","add","addIndex","adjust","allPass","always","and","any","anyPass","ap","aperture","append","applySpec","ascend","assoc","assocPath","binary","both","chain","clamp","clone","comparator","complement","compose","composeK","composeP","cond","construct","constructN","converge","countBy","curry","dec","defaultTo","descend","difference","differenceWith","dissoc","dissocPath","divide","drop","dropLast","dropLastWhile","dropRepeats","dropRepeatsWith","dropWhile","either","empty","endsWith","eqBy","eqProps","equals","evolve","filter","find","findIndex","findLast","findLastIndex","flatten","flip","forEachObjIndexed","fromPairs","groupBy","groupWith","gt","gte","has","hasIn","head","identical","identity","ifElse","inc","indexBy","innerJoin","insert","insertAll","intersection","intersectionWith","intersperse","into","invert","invertObj","invoker","is","isEmpty","isNil","join","juxt","keysIn","last","lastIndexOf","lens","lensIndex","lensPath","lensProp","lift","liftN","lt","lte","mapAccum","mapAccumRight","mapObjIndexed","match","mathMod","max","maxBy","mean","median","memoize","memoizeWith","merge","mergeAll","mergeDeepLeft","mergeDeepRight","mergeDeepWith","mergeDeepWithKey","mergeWith","mergeWithKey","min","minBy","modulo","multiply","nAry","negate","none","not","nth","nthArg","objOf","of","omit","once","or","over","pair","partial","partialRight","partition","pathEq","pathOr","pathSatisfies","pick","pickAll","pickBy","pipe","pipeK","pipeP","pluck","prepend","product","project","propEq","propIs","propOr","propSatisfies","props","range","reduceBy","reduceRight","reduceWhile","reduced","reject","remove","repeat","replace","reverse","scan","sequence","sort","sortBy","sortWith","splitAt","splitEvery","splitWhen","startsWith","subtract","sum","symmetricDifference","symmetricDifferenceWith","tail","take","takeLast","takeLastWhile","takeWhile","tap","test","times","toLower","toPairs","toPairsIn","toUpper","transduce","transpose","traverse","trim","tryCatch","unapply","unary","uncurryN","unfold","union","unionWith","uniq","uniqBy","uniqWith","unless","unnest","until","useWith","values","valuesIn","view","when","where","whereEq","without","xprod","zip","zipObj","zipWith","_indexOf","_checkForMethod","fromIndex","toIndex","global","isUndef","undefined","isDef","isTrue","isFalse","isPrimitive","isPlainObject","_toString","isRegExp","JSON","stringify","String","toNumber","parseFloat","isNaN","makeMap","str","expectsLowerCase","toLowerCase","arr","index","hasOwn","cached","cache","ctx","boundFn","_length","toArray","start","ret","extend","to","_from","toObject","noop","looseEqual","isObjectA","isObjectB","e","looseIndexOf","called","isReserved","charCodeAt","def","writable","parsePath","bailRE","segments","handleError","vm","info","errorHandler","inBrowser","isNative","Ctor","pushTarget","_target","Dep","target","targetStack","popTarget","protoAugment","src","__proto__","copyAugment","observe","asRootData","ob","__ob__","Observer","observerState","shouldConvert","isServerRendering","isExtensible","_isVue","vmCount","defineReactive$$1","customSetter","dep","getOwnPropertyDescriptor","setter","childOb","depend","dependArray","newVal","notify","Math","del","mergeData","from","toVal","fromVal","mergeHook","parentVal","childVal","mergeAssets","normalizeProps","camelize","normalizeDirectives","dirs","directives","mergeOptions","mergeField","strat","strats","defaultStrat","extendsFrom","extends","mixins","resolveAsset","id","warnMissing","assets","camelizedId","PascalCaseId","capitalize","validateProp","propOptions","propsData","absent","isType","Boolean","hyphenate","getPropDefaultValue","prevShouldConvert","_props","getType","createTextVNode","VNode","cloneVNode","vnode","cloned","tag","children","text","elm","componentOptions","ns","isStatic","isComment","isCloned","cloneVNodes","vnodes","createFnInvoker","fns","arguments$1","updateListeners","oldOn","remove$$1","cur","old","event","normalizeEvent","capture","passive","mergeVNodeHook","hookKey","hook","wrappedHook","oldHook","merged","extractPropsFromVNodeData","attrs","altKey","checkProp","hash","preserve","simpleNormalizeChildren","normalizeChildren","normalizeArrayChildren","isTextNode","node","nestedIndex","_isVList","ensureCtor","comp","base","resolveAsyncComponent","factory","baseCtor","errorComp","resolved","loading","loadingComp","contexts","forceRender","$forceUpdate","reason","component","delay","setTimeout","timeout","getFirstComponentChild","initEvents","_events","_hasHookEvent","listeners","_parentListeners","updateComponentListeners","once$$1","$once","$on","remove$1","$off","oldListeners","resolveSlots","slots","defaultSlot","functionalContext","slot","every","isWhitespace","resolveScopedSlots","initLifecycle","abstract","$parent","$children","$root","$refs","_watcher","_inactive","_directInactive","_isMounted","_isDestroyed","_isBeingDestroyed","mountComponent","el","hydrating","$el","createEmptyVNode","callHook","updateComponent","_update","_render","Watcher","$vnode","updateChildComponent","parentVnode","renderChildren","hasChildren","_renderChildren","scopedSlots","$scopedSlots","emptyObject","_parentVnode","_vnode","propKeys","_propKeys","$slots","isInInactiveTree","activateChildComponent","direct","deactivateChildComponent","handlers","j","$emit","resetSchedulerState","queue","activatedChildren","waiting","flushing","flushSchedulerQueue","watcher","run","activatedQueue","updatedQueue","callActivatedHooks","callUpdateHooks","devtools","queueActivatedComponent","queueWatcher","seenObjects","clear","_traverse","seen","isA","depId","proxy","sourceKey","sharedPropertyDefinition","initState","_watchers","opts","initProps","methods","initMethods","initData","initComputed","initWatch","propsOptions","getData","watchers","_computedWatchers","userDef","computedWatcherOptions","defineComputed","createComputedGetter","dirty","evaluate","createWatcher","initProvide","provide","_provided","initInjections","resolveInject","inject","hasSymbol","Reflect","ownKeys","provideKey","source","createFunctionalComponent","mergeProps","_context","h","createElement","injections","functionalOptions","createComponent","_base","cid","resolveConstructorOptions","model","transformModel","functional","nativeOn","mergeHooks","createComponentInstanceForVnode","parentElm","refElm","vnodeComponentOptions","_isComponent","_componentTag","_parentElm","_refElm","inlineTemplate","hooksToMerge","fromParent","ours","componentVNodeHooks","mergeHook$1","one","two","callback","normalizationType","alwaysNormalize","ALWAYS_NORMALIZE","_createElement","SIMPLE_NORMALIZE","getTagNamespace","isReservedTag","parsePlatformTagName","applyNS","renderList","renderSlot","fallback","bindObject","scopedSlotFn","slotNodes","resolveFilter","checkKeyCodes","eventKeyCode","builtInAlias","keyCodes","bindObjectProps","asProp","mustUseProp","domProps","renderStatic","isInFor","tree","_staticTrees","_renderProxy","markStatic","markOnce","isOnce","markStaticNode","initRender","renderContext","$createElement","initInternalComponent","constructor","super","superOptions","modifiedOptions","resolveModifiedOptions","extendOptions","components","modified","latest","extended","sealed","sealedOptions","dedupe","Vue$3","initUse","use","installed","unshift","initMixin$1","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","initProps$1","initComputed$1","ASSET_TYPES","Comp","initAssetRegisters","definition","getComponentName","matches","pattern","pruneCache","current","cachedNode","pruneCacheEntry","componentInstance","genClassForVnode","parentNode","childNode","mergeClassData","genClassFromData","staticClass","class","dynamicClass","stringifyClass","stringified","isSVG","isUnknownElement","unknownElementCache","document","HTMLUnknownElement","HTMLElement","query","selected","querySelector","createElement$1","tagName","multiple","setAttribute","createElementNS","namespaceMap","createTextNode","createComment","insertBefore","newNode","referenceNode","appendChild","nextSibling","setTextContent","textContent","registerRef","isRemoval","refs","refInFor","sameVnode","sameInputType","createKeyToOldIdx","beginIdx","endIdx","updateDirectives","oldVnode","oldDir","dir","isCreate","emptyNode","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","oldValue","callHook$1","componentUpdated","inserted","callInsert","modifiers","emptyModifiers","getRawDirName","rawName","updateAttrs","oldAttrs","setAttr","isIE9","isXlink","removeAttributeNS","xlinkNS","getXlinkProp","isEnumeratedAttr","removeAttribute","isBooleanAttr","isFalsyAttrValue","setAttributeNS","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","normalizeEvents","RANGE_TOKEN","isIE","CHECKBOX_RADIO_TOKEN","isChrome","add$1","oldHandler","target$1","ev","remove$2","addEventListener","supportsPassive","removeEventListener","updateDOMListeners","updateDOMProps","oldProps","_value","strCur","shouldUpdateValue","checkVal","composing","isDirty","isInputChanged","activeElement","_vModifiers","number","normalizeStyleData","style","normalizeStyleBinding","staticStyle","bindingStyle","parseStyleText","getStyle","checkChild","styleData","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","setProp","addClass","classList","getAttribute","removeClass","tar","resolveTransition","def$$1","css","autoCssTransition","nextFrame","raf","addTransitionClass","removeTransitionClass","whenTransitionEnds","expectedType","getTransitionInfo","propCount","TRANSITION","transitionEndEvent","animationEndEvent","ended","end","onEnd","styles","getComputedStyle","transitionDelays","transitionProp","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationProp","animationDurations","animationTimeout","ANIMATION","hasTransform","transformRE","delays","durations","toMs","enter","toggleDisplay","_leaveCb","cancelled","transition","_enterCb","nodeType","enterClass","enterToClass","enterActiveClass","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","activeInstance","transitionNode","isAppear","isRootInsert","startClass","activeClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","rm","performLeave","beforeLeave","leaveClass","leaveActiveClass","leaveToClass","explicitLeaveDuration","afterLeave","leaveCancelled","delayLeave","invokerFns","_enter","_","setSelected","binding","isMultiple","option","getValue","selectedIndex","hasNoMatchingOption","onCompositionStart","onCompositionEnd","trigger","createEvent","initEvent","dispatchEvent","locateNode","getRealChild","compOptions","extractTransitionData","key$1","placeholder","rawChild","hasParentTransition","isSameChild","oldChild","callPendingCbs","_moveCb","recordPosition","newPos","getBoundingClientRect","applyTranslation","oldPos","pos","dx","left","dy","top","moved","transform","WebkitTransform","transitionDuration","camelizeRE","toUpperCase","hyphenateRE","no","SSR_ATTR","LIFECYCLE_HOOKS","optionMergeStrategies","productionTip","performance","ignoredElements","isReservedAttr","freeze","hasProto","UA","navigator","userAgent","isEdge","isAndroid","isIOS","_isServer","_Set","env","VUE_ENV","nextTickHandler","pending","copies","callbacks","timerFunc","logError","MutationObserver","counter","observer","textNode","characterData","_resolve","Set","uid$1","addSub","removeSub","addDep","arrayProto","arrayMethods","method","original","observeArray","arrayKeys","getOwnPropertyNames","isSettingProps","walk","items","instanceData","defaultData","raw","uid$2","expOrFn","user","lazy","active","deps","newDeps","depIds","newDepIds","expression","cleanupDeps","tmp","teardown","$mount","keepAlive","mountedNode","prepatch","destroy","uid","_uid","_self","dataDef","propsDef","$set","$delete","immediate","hookRE","i$1","cbs","prevEl","prevVnode","prevActiveInstance","__patch__","__vue__","$nextTick","_o","_n","_s","_l","_t","_q","_i","_m","_f","_k","_v","_e","_u","patternTypes","RegExp","KeepAlive","include","exclude","created","destroyed","builtInComponents","configDef","util","defineReactive","ssrContext","testEl","acceptValue","attr","svg","math","isHTMLTag","nodeOps","hooks","baseModules","klass","events","cssText","listDelimiter","propertyDelimiter","cssVarRE","importantRE","setProperty","normalizedName","normalize","prefixes","upper","prefixed","hasTransition","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","requestAnimationFrame","activate","platformModules","patch","backend","emptyNodeAt","createRmCb","childElm","removeNode","createElm","insertedVnodeQueue","nested","setScope","createChildren","invokeCreateHooks","isReactivated","initComponent","reactivateComponent","pendingInsert","isPatchable","innerNode","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","updateChildren","oldCh","newCh","removeOnly","oldKeyToIdx","idxInOld","elmToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","patchVnode","postpatch","invokeInsertHook","initial","hydrate","hasChildNodes","childrenMatch","firstChild","isRenderedModule","isInitialPatch","isRealElement","hasAttribute","oldElm","parentElm$1","vmodel","model$1","some","originalDisplay","__vOriginalDisplay","display","unbind","platformDirectives","transitionProps","mode","Transition","_leaving","oldRawChild","delayedLeave","moveClass","TransitionGroup","prevChildren","rawChildren","transitionData","kept","removed","c$1","beforeUpdate","updated","hasMove","body","offsetHeight","propertyName","_hasMove","cloneNode","platformComponents","methodname","_isFunction","arity","_isString","offset","paths","_interopRequireWildcard","newObj","_interopRequireDefault","_vue","_vue2","_vuex","_vuex2","_state","_state2","_getters","pred","received","combined","argsIdx","combinedIdx","toFunctorFn","focus","_isObject","lObj","rObj","k","lVal","rVal","_xreduceBy","valueFn","valueAcc","keyFn","elt","_complement","filterable","_concat","applyF","applyX","f","_makeFlat","_xchain","monad","_filter","_xfilter","_identity","_objectAssign","assign","isInteger","r","Infinity","_xtake","xs","_containsWith","noteFrequency","note","pow","noteName","noteStrings","floor","keyToNote","w","t","g","y","u","UPDATE_METRE","UPDATE_TEMPO","UPDATE_UI_MEASURES","MIDI_NOTE_END","MIDI_NOTE_SET","MIDI_DISCONNECT_OUTPUT","MIDI_DISCONNECT_INPUT","MIDI_CONNECT_OUTPUT","MIDI_CONNECT_INPUT","types","_ref","virtual","midi","inputs","notes","_ref2","outputs","_ref3","_ref4","_ref5","inputId","noteNumber","velocity","input","existingNote","_ref6","channel","_ref7","pixelsPerBeat","panBeats","ui","tempo","metre","Component","_idx","_list","_xany","_isInteger","nextObj","thisObj","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","after","_contains","first","second","out","firstLen","_xdrop","_xdropRepeatsWith","_cloneRegExp","_clone","refFrom","refTo","copy","copiedValue","Date","valueOf","ignoreCase","multiline","sticky","unicode","inf","recursive","flatt","jlen","ilen","_reduced","_xfBase","XAny","XDropRepeatsWith","lastValue","seenFirstValue","sameAsLast","XWrap","_isNumber","NaN","lifted","mFn","Identity","names","_pipe","_pipeP","count","traversable","RangeError","appliedItem","transformers","vals","spec","testObj","_App","_App2","_store","_store2","_SettingsPanel","_SettingsPanel2","_ArrangementPanel","_ArrangementPanel2","_KeyboardController","_KeyboardController2","SettingsPanel","ArrangementPanel","KeyboardController","_extends","_ramda","_ramda2","_Tapes","_Tapes2","_ViewSlider","_ViewSlider2","_BarMarks","_BarMarks2","Tapes","ViewSlider","BarMarks","elWidth","caret","showBeats","region","_uiMeasures","uiMeasures","maxClipRange","secondsToBeats","tapes","clip","beat","minBeatsToShow","ceil","gatherMeasures","rect","right","updateRegion","newRegion","_uiMeasures2","newPan","totalBeats","newPixelsPerBeat","updateUiMeasures","docEvents","resize","mounted","required","bars","barsInView","beatsPerBar","_slicedToArray","sliceIterator","_arr","_d","_region","startBeat","endBeat","regionLength","width","_notes","_util","octave","keyboardState","playingNotes","_this","oct","keydown","shiftKey","metaKey","keyup","newNotes","oldNotes","_this2","addedNotes","removedNotes","midiNoteon","midiNoteoff","midiConnectVirtualInput","midiDisconnectVirtualInput","sensitivity","editing","internalValue","accumulator","numDecimals","formattedValue","toFixed","handleWheel","deltaY","scaledValue","valueChange","round","boundVal","applyEdit","startEdit","cancelEdit","_NumberSlider","_NumberSlider2","NumberSlider","_Clip","_Clip2","Clip","clipsInRegion","clipInRegion","tape","clips","_Tape","_Tape2","Tape","bounds","regionStart","regionEnd","regionLen","moveX","deltaX","newStart","windowStyle","_dragLast","mouseup","preventDefault","handleUp","mousemove","handleDrag","handleDown","pageX","delta","adjDeltaY","zoomY","newLen","lenShift","clipStyle","total","_webmidi","_webmidi2","_drivers","_drivers2","webmidi","handleInput","driver","addListener","handleOutput","updateStore","enable","output","getOutput","getInput","_tone","_tone2","synth","PolySynth","Synth","toMaster","allActiveNotes","release","oldNote","triggerRelease","triggerAttack","sendControlChange","_LaunchpadOutput","_LaunchpadOutput2","barsPerMinute","secondsPerBar","secondsPerBeat","seconds","evs","_boundDocEvents","eventName","bound","desroyed","directive","updateMetre","updateTempo","midiUpdateDevices","getName","oldIns","oldOuts","addedIns","removedIns","addedOuts","removedOuts","newMeasures","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_measures","_state$ui","cursorPosition","playback","recording","playTimestamp","playOffset","_h","layout","wheel","$event","stopPropagation","submit","blur","click","bar","mousedown","Function","eval","@@functional/placeholder","origFn","_xall","preds","_aperture","_xaperture","aa","bb","pairs","elem","_dropLast","_xdropLast","_dropLastWhile","_xdropLastWhile","_xdropWhile","suffix","obj1","obj2","transformations","transformation","_xfind","_xfindIndex","_xfindLast","_xfindLastIndex","keyList","nextidx","onTrue","onFalse","ys","elts","_nativeSet","_items","hasOrAdd","shouldAdd","prevSize","size","bIdx","limit","_arrayFromIterator","_functionName","stackA","stackB","message","entries","keysA","_forceReduced","preservingReduced","@@transducer/init","@@transducer/result","@@transducer/step","rxf","nextKey","_assign","_stepCatArray","_stepCatString","_stepCatObject","pad","toISOString","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","_quote","_toISOString","recur","mapPairs","repr","XAll","XAperture","full","getCopy","_flatCat","XDrop","XDropLast","XDropLastWhile","retained","retain","flush","XDropWhile","XFilter","XFind","found","XFindIndex","XFindLast","XFindLastIndex","lastIdx","XMap","XReduceBy","XTake","XTakeWhile","list1","list2","lookupList","filteredList","results","separator","_stepCat","tuple","rx","_r","_of","fst","snd","_createPartialApplicator","_path","propPath","ps","regex","replacement","array","prefix","_xtakeWhile","_isRegExp","outerlist","innerlist","ws","hasProtoTrim","beginRx","endRx","tryer","catcher","depth","currentDepth","seed","whenFalseFn","vs","Const","fantasy-land/map","whenTrueFn","rv","__WEBPACK_AMD_DEFINE_RESULT__","func","Tone","createGain","params","rampTime","isString","tmpObj","paramLoop","attrSplit","innerParam","param","Signal","Param","rampTo","AudioParam","_collectDefaults","subRet","subAttr","isFunction","constr","defaults","_super","superDefs","className","isLetter","sameConstructor","dispose","AudioNode","disconnect","connect","unit","outputNum","inputNum","defaultArg","destination","isNumber","connectSeries","currentUnit","toUnit","fan","given","givenProp","fallbackProp","optionsObject","arg","isBoolean","noOp","_readOnly","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","PI","sin","dbToGain","db","gainToDb","gain","log","LN10","intervalToFrequencyRatio","interval","now","TempConstructor","audioContext","Context","setContext","sampleRate","hasAudioContext","hasPromises","hasWorkers","TONE_SILENCE_VERSION_LOGGING","SignalBase","outputNumber","inputNumber","TimelineSignal","_param","cancelScheduledValues","overridden","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","normalized","oversample","oversampling","TimeBase","units","_expr","_noOp","_defaultUnits","_primaryExpressions","_defaultExpr","exprString","_parseExprString","instance","time","regexp","parseInt","_beatsToUnits","_timeSignature","_ticksToUnits","hz","_frequencyToUnits","tr","q","_secondsToUnits","samples","_binaryExpressions","+","precedence","lh","rh","-","*","/","_unaryExpressions","neg","_syntaxGlue","(",")","_tokenize","expr","position","tokens","token","expressions","group","opName","op","reg","SyntaxError","substr","peek","_matchGroup","prec","_parseBinary","lexer","_parseUnary","_parsePrimary","matching","freq","beats","Transport","bpm","ticks","PPQ","timeSignature","_pushExpr","mult","div","Time","_plusNow","quantize","nextSubdivision","subdiv","subdivision","toSeconds","addNow","toNotation","testNotations","retNotation","_toNotationHelper","testTripletNotations","retTripletNotation","threshold","_notationToUnits","notationTime","notation","primaryExprs","notationExprs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","toTicks","toSamples","toFrequency","toMilliseconds","Frequency","midiToFrequency","pitch","noteToScaleIndex","harmonize","intervals","toMidi","frequencyToMidi","toNote","A4","LN2","scaleIndexToNote","cbb","c#","cx","dbb","d#","ebb","eb","e#","ex","fbb","fb","f#","fx","gbb","gb","g#","gx","abb","ab","a#","ax","bbb","b#","bx","frequency","TransportTime","_secondsToTicks","Emitter","off","eventList","functions","emitterFunc","AudioContext","webkitAudioContext","_defineProperty","_latencyHint","_lookAhead","_updateInterval","_computedUpdateInterval","_worker","_createWorker","_constants","currentTime","URL","webkitURL","blob","Blob","blobUrl","createObjectURL","worker","Worker","_lastUpdate","diff","getConstant","buffer","createBuffer","getChannelData","constant","createBufferSource","channelCount","channelCountMode","loop","lA","blockTime","postMessage","hint","lookAhead","latencyHint","updateInterval","supported","toneConnect","B","outNum","inNum","nativeConnect","toneDisconnect","nativeDisconnect","Type","Default","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","convert","_lfo","lfo","_toUnits","LFO","convertedVal","_fromUnits","_minOutput","setValueAtTime","setRampPoint","currentVal","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","exponentialRampToValue","startTime","linearRampToValue","setTargetAtTime","timeConstant","setValueCurveAtTime","GainNode","createGainNode","Gain","_gainNode","createInsOuts","_gain","Timeline","_timeline","_toRemove","_iterating","memory","_search","shift","getAfter","getBefore","cancel","cancelBefore","beginning","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachFrom","forEachAtTime","_initial","Linear","Exponential","Target","Curve","getValueAtTime","beforeEvent","_searchBefore","setValue","sampleTime","scaling","floats","segmentTime","before","_searchAfter","linearRampToValueBetween","finish","exponentialRampToValueBetween","previouVal","previous","_exponentialApproach","_curveInterpolate","_linearInterpolate","_exponentialInterpolate","t0","v0","v1","exp","t1","progress","lowerIndex","upperIndex","lowerVal","upperVal","Pow","_exp","_expScaler","_expFunc","abs","Envelope","attack","decay","sustain","_attackCurve","_releaseCurve","_sig","attackCurve","releaseCurve","In","curveDef","Out","originalAttack","currentValue","percentComplete","sliceIndex","triggerAttackRelease","invertCurve","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","cos","bounceCurve","linear","exponential","bounce","cosine","ripple","sine","AmplitudeEnvelope","AnalyserNode","getFloatTimeDomainData","uint8","Uint8Array","getByteTimeDomainData","Analyser","_analyser","createAnalyser","_returnType","returnType","_buffer","minDecibels","maxDecibels","smoothing","Waveform","FFT","ReturnType","Byte","Float","analyse","getByteFrequencyData","getFloatFrequencyData","frequencyBinCount","fftSize","smoothingTimeConstant","Compressor","_compressor","createDynamicsCompressor","knee","ratio","Add","_sum","Multiply","_mult","Negate","_multiply","Subtract","_neg","GreaterThanZero","_thresh","_scale","GreaterThan","_gtz","Abs","_abs","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","mod","AudioToGain","_norm","applyBinary","Constructor","self","_eval","applyUnary","getNumber","literalNumber","Expr","_replacements","inputCount","_parseInputs","_nodes","_parseTree","_disposeNodes","_Expressions","signal","glue",",","a2g","!","NOT","inputArray","inputMax","matchSyntax","syn","matchGroup","groupName","parseExpression","parseUnary","operator","parsePrimary","parseFunctionCall","parseArgumentList","EqualPowerGain","_eqPower","CrossFade","initialFade","fade","_equalPowerA","_equalPowerB","_invert","Filter","_filters","detune","Q","_rolloff","rolloff","possibilities","cascadingCount","createBiquadFilter","connectionChain","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Scale","outputMin","outputMax","_outputMin","_outputMax","_add","_setRange","ScaleExp","exponent","DelayNode","createDelay","createDelayNode","Delay","_delayNode","maxDelay","delayTime","FeedbackCombFilter","_delay","_feedback","resonance","Follower","_frequencyValues","_sub","_attack","_release","_setAttackRelease","minTime","ScaledEnvelope","FrequencyEnvelope","_octaves","octaves","baseFrequency","Gate","_follower","_gt","thresh","attackTime","releaseTime","TimelineState","setStateAtTime","Clock","_nextTick","_lastState","_boundLoop","_loop","stop","pause","lagCompensation","lag","loopInterval","currentState","tickTime","getStateAtTime","IntervalTimeline","_root","IntervalNode","updateHeight","updateMax","_rebalance","search","_removeNode","_setRoot","_replaceNodeInParent","isLeftChild","temp","balance","getBalance","_rotateLeft","pivotNode","_rotateRight","allNodes","searchAfter","_left","_right","height","point","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_scheduledEvents","_eventID","_repeatedEvents","_onceEvents","_syncedSignals","_swingTicks","_swingAmount","swing","swingSubdivision","loopStart","loopEnd","amount","schedule","timeline","scheduleRepeat","scheduleOnce","eventId","timeSig","startPosition","endPosition","setLoopPoints","ppq","transportPos","remainingTime","syncSignal","ratioSignal","unsyncSignal","syncedSignal","Volume","volume","_unmutedVolume","mute","Master","_volume","MasterConstructor","Source","_synced","_scheduled","_start","_stop","retrigger","sched","stateEvent","startOffset","unsync","OscillatorNode","noteOn","noteOff","setPeriodicWave","setWaveTable","createPeriodicWave","createWaveTable","Oscillator","_oscillator","_wave","_partials","partials","_phase","phase","Sine","Triangle","Sawtooth","Square","Custom","createOscillator","syncFrequency","unsyncFrequency","coefs","_getRealImaginary","periodicWave","periodicWaveSize","real","imag","partialCount","exec","_inverseFFT","_getInitialValue","maxValue","twoPi","Zero","amplitude","_stoppedSignal","_zeros","_stoppedValue","_a2g","_scaler","_units","currentMin","currentMax","Limiter","LowpassCombFilter","_lowpass","dampening","Merge","_merger","createChannelMerger","Meter","_lastValue","Level","rms","sqrt","Split","_splitter","createChannelSplitter","MidSideSplit","_split","side","SQRT1_2","MidSideMerge","_merge","MidSideCompressor","_midSideSplit","_midSideMerge","Mono","MultibandCompressor","Panner","initialPan","_hasStereoPanner","_panner","createStereoPanner","pan","_crossFade","_zero","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","z","setOrientation","_aliasProperty","PanVol","CtrlInterpolate","lowerPosition","lower","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","random","dist","chosen","needsNormalizing","probability","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","randVal","CtrlRandom","integer","AudioBuffer","copyToChannel","chanNum","copyFromChannel","dest","Buffer","_reversed","_xhr","url","onload","load","onerror","buff","_currentDownloads","abort","numberOfChannels","fromArray","isMultidimensional","channels","toMono","outputArray","numChannels","channelArray","sample","startSamples","endSamples","_reverse","loaded","rev","_downloadQueue","baseUrl","onError","onProgress","totalProgress","request","XMLHttpRequest","open","responseType","status","decodeAudioData","response","lengthComputable","send","cancelDownloads","supportsType","extension","canPlayType","removeEvents","success","fail","Buffers","urls","_buffers","_flattenUrls","_loadingCount","_bufferLoaded","isLoaded","buffName","toReturn","flatObject","Buses","channelName","sendKnob","receive","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","listener","OfflineAudioContext","webkitOfflineAudioContext","OfflineContext","offlineContext","_duration","_currentTime","oncomplete","renderedBuffer","startRendering","Offline","originalContext","rendered","Effect","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","AutoFilter","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","baseFreq","sensitivy","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","StereoEffect","effectSendL","effectSendR","effectReturnL","effectReturnR","FeedbackEffect","_feedbackGain","feedback","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","spread","deviation","Convolver","_convolver","createConvolver","Distortion","_distortion","distortion","deg","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","allpassL","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","MidSideEffect","midSend","sideSend","midReturn","sideReturn","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","PingPongDelay","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","factor","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","_midMult","_sideMult","_two","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Event","_playbackRate","_startOffset","humanize","playbackRate","_rescheduleEvents","startTick","_getLoopDuration","_tick","previousEvent","reschedulTime","variation","rate","lastEvent","loopDuration","Loop","_event","iterations","prob","iters","Part","_probability","_humanize","_forEach","_startNote","at","_restartEvent","removeAll","_setAll","_testLoopBoundries","Pattern","_pattern","Sequence","_subdivision","_indexTime","subSubdivision","PulseOscillator","_widthGate","_sawtooth","PWMOscillator","_pulse","modulationFrequency","_modulator","FMOscillator","_carrier","modulationIndex","modulationType","harmonicity","_modulationNode","AMOscillator","_modulationScale","FatOscillator","_oscillators","_spread","osc","OmniOscillator","_sourceType","OmniOscType","Pulse","PWM","Osc","FM","AM","Fat","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","mType","Instrument","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","currentNote","portTime","oscillator","envelope","AMSynth","modulation","modulationEnvelope","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","vel","octs","AudioBufferSourceNode","noteGrainOn","BufferSource","onended","_startTime","_stopTime","_source","fadeIn","fadeOut","_onendedTimeout","fadeInTime","fadeOutTime","playbackState","clearTimeout","_onended","createBuffers","_noiseArrays","_noiseBuffers","Noise","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","white","brown","lastOut","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","polyphony","MAX_POLYPHONY","voices","_triggers","voice","oldest","desc","releaseAll","Player","autostart","_onload","seek","Sampler","player","GainToAudio","Normalize","inputMin","_inputMin","_inputMax","_div","MultiPlayer","buffers","_activeSources","_makeSource","bufferName","startLoop","stopAll","sources","GrainPlayer","_player","_grainSize","grainSize","_overlap","overlap","drift","_offset","bufferDuration","originalFadeIn","endSegmentDuration","scrub","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","device","label","deviceId","constraints","audio","echoCancellation","mediaDevices","getUserMedia","stream","createMediaStreamSource","close","getAudioTracks","track","kind","groupId","__WEBPACK_AMD_DEFINE_ARRAY__","scope","WebMidi","_singleton","_inputs","_outputs","_userHandlers","_stateChangeQueue","_processingStateChange","_midiInterfaceEvents","_semitones","C","D","E","G","A","MIDI_SYSTEM_MESSAGES","sysex","timecode","songposition","songselect","tuningrequest","sysexend","clock","continue","activesensing","reset","unknownsystemmessage","MIDI_CHANNEL_MESSAGES","noteoff","noteon","keyaftertouch","controlchange","channelmode","programchange","channelaftertouch","pitchbend","MIDI_REGISTERED_PARAMETER","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","MIDI_CONTROL_CHANGE_MESSAGES","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","MIDI_CHANNEL_MODE_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","enabled","sysexEnabled","Input","midiInput","that","system","_midiInput","connection","manufacturer","_initializeUserHandlers","Output","midiOutput","_midiOutput","wm","requestMIDIAccess","midiAccess","_resetInterfaceUserHandlers","onstatechange","_onInterfaceStateChange","disable","hasListener","removeListener","getInputById","getOutputById","getInputByName","getOutputByName","guessNoteNumber","noteNameToNumber","semitones","_updateInputsAndOutputs","_updateInputs","_updateOutputs","nInput","_createInput","nOutput","_createOutput","onmidimessage","_onMidiMessage","_processStateChange","timestamp","timeStamp","port","chNum","prop1","prop2","_parseChannelEvent","_parseSystemEvent","data1","data2","command","rawVelocity","controller","getCcNameByNumber","getChannelModeByNumber","cc","cm","song","sendSysex","_parseTimeParameter","sendTimecodeQuarterFrame","sendSongPosition","msb","lsb","sendSongSelect","sendTuningRequest","sendClock","sendStart","sendContinue","sendStop","sendActiveSensing","sendReset","stopNote","sendChannelMode","nVelocity","_convertNoteToArray","_convertChannelToArray","playNote","nRelease","sendKeyAftertouch","pressure","nPressure","_selectRegisteredParameter","parameter","_selectNonRegisteredParameter","_setCurrentRegisteredParameter","_deselectRegisteredParameter","setRegisteredParameter","setNonRegisteredParameter","incrementRegisteredParameter","decrementRegisteredParameter","setPitchBendRange","cents","setModulationRange","setMasterTuning","coarse","fine","setTuningProgram","setTuningBank","sendProgramChange","program","sendChannelAftertouch","sendPitchBend","bend","nLevel","parsed","substring"],"mappings":"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","file":"client.14939104.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 377);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _isPlaceholder = __webpack_require__(40);\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _isPlaceholder = __webpack_require__(40);\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _curry2 = __webpack_require__(0);\nvar _isPlaceholder = __webpack_require__(40);\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _isArray = __webpack_require__(15);\nvar _isTransformer = __webpack_require__(60);\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodNames, xf, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _curry1 = __webpack_require__(1);\nvar _curry2 = __webpack_require__(0);\nvar _curryN = __webpack_require__(37);\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _map = __webpack_require__(41);\nvar _reduce = __webpack_require__(9);\nvar _xmap = __webpack_require__(266);\nvar curryN = __webpack_require__(5);\nvar keys = __webpack_require__(13);\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nmodule.exports = _curry2(_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _equals = __webpack_require__(241);\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _isArrayLike = __webpack_require__(38);\nvar _xwrap = __webpack_require__(99);\nvar bind = __webpack_require__(77);\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj, methodName) {\n    return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (_isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list['fantasy-land/reduce'] === 'function') {\n      return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list, 'reduce');\n    }\n\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nmodule.exports = function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n};\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _has = __webpack_require__(6);\nvar _isArguments = __webpack_require__(94);\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar _reduce = __webpack_require__(9);\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *                -               -10\n *               / \\              / \\\n *              -   4           -6   4\n *             / \\              / \\\n *            -   3   ==>     -3   3\n *           / \\              / \\\n *          -   2           -1   2\n *         / \\              / \\\n *        0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nmodule.exports = _curry3(_reduce);\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n};\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/**\n * vuex v2.3.0\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;\n    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: {} };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  var this$1 = this;\n\n  // register root module (Vuex.Store options)\n  this.root = new Module(rawRootModule, false);\n\n  // register all nested modules\n  if (rawRootModule.modules) {\n    forEachValue(rawRootModule.modules, function (rawModule, key) {\n      this$1.register([key], rawModule, false);\n    });\n  }\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update(this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  var parent = this.get(path.slice(0, -1));\n  var newModule = new Module(rawModule, runtime);\n  parent.addChild(path[path.length - 1], newModule);\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (targetModule, newModule) {\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        console.warn(\n          \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n          'manual reload is needed'\n        );\n        return\n      }\n      update(targetModule.getChild(key), newModule.modules[key]);\n    }\n  }\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n  assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.concat(devtoolPlugin).forEach(function (plugin) { return plugin(this$1); });\n};\n\nvar prototypeAccessors = { state: {} };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  assert(false, \"Use store.replaceState() to explicit replace store state.\");\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    console.error((\"[vuex] unknown mutation type: \" + type));\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (options && options.silent) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var entry = this._actions[type];\n  if (!entry) {\n    console.error((\"[vuex] unknown action type: \" + type));\n    return\n  }\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  var subs = this._subscribers;\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule) {\n  if (typeof path === 'string') { path = [path]; }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path));\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var namespacedType = namespace + key;\n    registerAction(store, namespacedType, action, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (!store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (!store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler(local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler({\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    console.error((\"[vuex] duplicate getter key: \" + type));\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue) {\n    console.error(\n      '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n    );\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\n// auto install in dist mode\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      if (namespace && !getModuleByNamespace(this.$store, 'mapMutations', namespace)) {\n        return\n      }\n      return this.$store.commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if (!(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      if (namespace && !getModuleByNamespace(this.$store, 'mapActions', namespace)) {\n        return\n      }\n      return this.$store.dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if (!module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '2.3.0',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = {\n  F: __webpack_require__(177),\n  T: __webpack_require__(178),\n  __: __webpack_require__(179),\n  add: __webpack_require__(32),\n  addIndex: __webpack_require__(180),\n  adjust: __webpack_require__(72),\n  all: __webpack_require__(181),\n  allPass: __webpack_require__(182),\n  always: __webpack_require__(21),\n  and: __webpack_require__(73),\n  any: __webpack_require__(74),\n  anyPass: __webpack_require__(183),\n  ap: __webpack_require__(49),\n  aperture: __webpack_require__(184),\n  append: __webpack_require__(185),\n  apply: __webpack_require__(75),\n  applySpec: __webpack_require__(186),\n  ascend: __webpack_require__(187),\n  assoc: __webpack_require__(33),\n  assocPath: __webpack_require__(76),\n  binary: __webpack_require__(188),\n  bind: __webpack_require__(77),\n  both: __webpack_require__(189),\n  call: __webpack_require__(190),\n  chain: __webpack_require__(50),\n  clamp: __webpack_require__(191),\n  clone: __webpack_require__(192),\n  comparator: __webpack_require__(193),\n  complement: __webpack_require__(194),\n  compose: __webpack_require__(51),\n  composeK: __webpack_require__(78),\n  composeP: __webpack_require__(195),\n  concat: __webpack_require__(52),\n  cond: __webpack_require__(196),\n  construct: __webpack_require__(197),\n  constructN: __webpack_require__(79),\n  contains: __webpack_require__(198),\n  converge: __webpack_require__(80),\n  countBy: __webpack_require__(199),\n  curry: __webpack_require__(34),\n  curryN: __webpack_require__(5),\n  dec: __webpack_require__(200),\n  defaultTo: __webpack_require__(81),\n  descend: __webpack_require__(201),\n  difference: __webpack_require__(82),\n  differenceWith: __webpack_require__(83),\n  dissoc: __webpack_require__(84),\n  dissocPath: __webpack_require__(202),\n  divide: __webpack_require__(203),\n  drop: __webpack_require__(85),\n  dropLast: __webpack_require__(204),\n  dropLastWhile: __webpack_require__(205),\n  dropRepeats: __webpack_require__(206),\n  dropRepeatsWith: __webpack_require__(86),\n  dropWhile: __webpack_require__(207),\n  either: __webpack_require__(208),\n  empty: __webpack_require__(87),\n  endsWith: __webpack_require__(209),\n  eqBy: __webpack_require__(210),\n  eqProps: __webpack_require__(211),\n  equals: __webpack_require__(8),\n  evolve: __webpack_require__(212),\n  filter: __webpack_require__(53),\n  find: __webpack_require__(213),\n  findIndex: __webpack_require__(214),\n  findLast: __webpack_require__(215),\n  findLastIndex: __webpack_require__(216),\n  flatten: __webpack_require__(217),\n  flip: __webpack_require__(35),\n  forEach: __webpack_require__(218),\n  forEachObjIndexed: __webpack_require__(219),\n  fromPairs: __webpack_require__(220),\n  groupBy: __webpack_require__(221),\n  groupWith: __webpack_require__(222),\n  gt: __webpack_require__(223),\n  gte: __webpack_require__(224),\n  has: __webpack_require__(225),\n  hasIn: __webpack_require__(226),\n  head: __webpack_require__(227),\n  identical: __webpack_require__(88),\n  identity: __webpack_require__(54),\n  ifElse: __webpack_require__(228),\n  inc: __webpack_require__(229),\n  indexBy: __webpack_require__(230),\n  indexOf: __webpack_require__(231),\n  init: __webpack_require__(232),\n  innerJoin: __webpack_require__(233),\n  insert: __webpack_require__(234),\n  insertAll: __webpack_require__(235),\n  intersection: __webpack_require__(270),\n  intersectionWith: __webpack_require__(271),\n  intersperse: __webpack_require__(272),\n  into: __webpack_require__(273),\n  invert: __webpack_require__(274),\n  invertObj: __webpack_require__(275),\n  invoker: __webpack_require__(26),\n  is: __webpack_require__(100),\n  isEmpty: __webpack_require__(276),\n  isNil: __webpack_require__(101),\n  join: __webpack_require__(277),\n  juxt: __webpack_require__(102),\n  keys: __webpack_require__(13),\n  keysIn: __webpack_require__(278),\n  last: __webpack_require__(103),\n  lastIndexOf: __webpack_require__(279),\n  length: __webpack_require__(104),\n  lens: __webpack_require__(42),\n  lensIndex: __webpack_require__(280),\n  lensPath: __webpack_require__(281),\n  lensProp: __webpack_require__(282),\n  lift: __webpack_require__(43),\n  liftN: __webpack_require__(105),\n  lt: __webpack_require__(283),\n  lte: __webpack_require__(284),\n  map: __webpack_require__(7),\n  mapAccum: __webpack_require__(285),\n  mapAccumRight: __webpack_require__(286),\n  mapObjIndexed: __webpack_require__(287),\n  match: __webpack_require__(288),\n  mathMod: __webpack_require__(289),\n  max: __webpack_require__(22),\n  maxBy: __webpack_require__(290),\n  mean: __webpack_require__(106),\n  median: __webpack_require__(291),\n  memoize: __webpack_require__(292),\n  memoizeWith: __webpack_require__(107),\n  merge: __webpack_require__(293),\n  mergeAll: __webpack_require__(294),\n  mergeDeepLeft: __webpack_require__(295),\n  mergeDeepRight: __webpack_require__(296),\n  mergeDeepWith: __webpack_require__(297),\n  mergeDeepWithKey: __webpack_require__(44),\n  mergeWith: __webpack_require__(298),\n  mergeWithKey: __webpack_require__(61),\n  min: __webpack_require__(299),\n  minBy: __webpack_require__(300),\n  modulo: __webpack_require__(301),\n  multiply: __webpack_require__(108),\n  nAry: __webpack_require__(45),\n  negate: __webpack_require__(302),\n  none: __webpack_require__(303),\n  not: __webpack_require__(109),\n  nth: __webpack_require__(27),\n  nthArg: __webpack_require__(304),\n  o: __webpack_require__(305),\n  objOf: __webpack_require__(110),\n  of: __webpack_require__(306),\n  omit: __webpack_require__(307),\n  once: __webpack_require__(308),\n  or: __webpack_require__(111),\n  over: __webpack_require__(112),\n  pair: __webpack_require__(309),\n  partial: __webpack_require__(310),\n  partialRight: __webpack_require__(311),\n  partition: __webpack_require__(312),\n  path: __webpack_require__(28),\n  pathEq: __webpack_require__(313),\n  pathOr: __webpack_require__(314),\n  pathSatisfies: __webpack_require__(315),\n  pick: __webpack_require__(316),\n  pickAll: __webpack_require__(113),\n  pickBy: __webpack_require__(317),\n  pipe: __webpack_require__(114),\n  pipeK: __webpack_require__(318),\n  pipeP: __webpack_require__(115),\n  pluck: __webpack_require__(29),\n  prepend: __webpack_require__(116),\n  product: __webpack_require__(319),\n  project: __webpack_require__(320),\n  prop: __webpack_require__(62),\n  propEq: __webpack_require__(321),\n  propIs: __webpack_require__(322),\n  propOr: __webpack_require__(323),\n  propSatisfies: __webpack_require__(324),\n  props: __webpack_require__(325),\n  range: __webpack_require__(326),\n  reduce: __webpack_require__(14),\n  reduceBy: __webpack_require__(46),\n  reduceRight: __webpack_require__(117),\n  reduceWhile: __webpack_require__(327),\n  reduced: __webpack_require__(328),\n  reject: __webpack_require__(47),\n  remove: __webpack_require__(118),\n  repeat: __webpack_require__(329),\n  replace: __webpack_require__(330),\n  reverse: __webpack_require__(48),\n  scan: __webpack_require__(331),\n  sequence: __webpack_require__(119),\n  set: __webpack_require__(332),\n  slice: __webpack_require__(20),\n  sort: __webpack_require__(333),\n  sortBy: __webpack_require__(334),\n  sortWith: __webpack_require__(335),\n  split: __webpack_require__(336),\n  splitAt: __webpack_require__(337),\n  splitEvery: __webpack_require__(338),\n  splitWhen: __webpack_require__(339),\n  startsWith: __webpack_require__(340),\n  subtract: __webpack_require__(341),\n  sum: __webpack_require__(120),\n  symmetricDifference: __webpack_require__(342),\n  symmetricDifferenceWith: __webpack_require__(343),\n  tail: __webpack_require__(63),\n  take: __webpack_require__(64),\n  takeLast: __webpack_require__(121),\n  takeLastWhile: __webpack_require__(344),\n  takeWhile: __webpack_require__(345),\n  tap: __webpack_require__(346),\n  test: __webpack_require__(347),\n  times: __webpack_require__(122),\n  toLower: __webpack_require__(348),\n  toPairs: __webpack_require__(349),\n  toPairsIn: __webpack_require__(350),\n  toString: __webpack_require__(30),\n  toUpper: __webpack_require__(351),\n  transduce: __webpack_require__(352),\n  transpose: __webpack_require__(353),\n  traverse: __webpack_require__(354),\n  trim: __webpack_require__(355),\n  tryCatch: __webpack_require__(356),\n  type: __webpack_require__(65),\n  unapply: __webpack_require__(357),\n  unary: __webpack_require__(358),\n  uncurryN: __webpack_require__(359),\n  unfold: __webpack_require__(360),\n  union: __webpack_require__(361),\n  unionWith: __webpack_require__(362),\n  uniq: __webpack_require__(66),\n  uniqBy: __webpack_require__(123),\n  uniqWith: __webpack_require__(67),\n  unless: __webpack_require__(363),\n  unnest: __webpack_require__(364),\n  until: __webpack_require__(365),\n  update: __webpack_require__(68),\n  useWith: __webpack_require__(124),\n  values: __webpack_require__(125),\n  valuesIn: __webpack_require__(366),\n  view: __webpack_require__(367),\n  when: __webpack_require__(368),\n  where: __webpack_require__(126),\n  whereEq: __webpack_require__(369),\n  without: __webpack_require__(370),\n  xprod: __webpack_require__(371),\n  zip: __webpack_require__(372),\n  zipObj: __webpack_require__(373),\n  zipWith: __webpack_require__(374)\n};\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _indexOf = __webpack_require__(93);\n\n\nmodule.exports = function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n};\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _checkForMethod = __webpack_require__(24);\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nmodule.exports = _curry1(function always(val) {\n  return function() {\n    return val;\n  };\n});\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nmodule.exports = _curry2(function max(a, b) { return b > a ? b : a; });\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.3.4\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\n\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (false) {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid$1++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (false) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (false) {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (false) {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && \"production\" !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.4';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\n\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (false) {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (false\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\n\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\n\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\n\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar str;\nvar index$1;\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (false) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (false\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(176)))\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _isArray = __webpack_require__(15);\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n};\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isFunction = __webpack_require__(39);\nvar curryN = __webpack_require__(5);\nvar toString = __webpack_require__(30);\n\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nmodule.exports = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isString = __webpack_require__(25);\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nmodule.exports = _curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nmodule.exports = _curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar map = __webpack_require__(7);\nvar prop = __webpack_require__(62);\n\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nmodule.exports = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _toString = __webpack_require__(253);\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nmodule.exports = _curry1(function toString(val) { return _toString(val, []); });\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _vue = __webpack_require__(23);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _vuex = __webpack_require__(17);\n\nvar _vuex2 = _interopRequireDefault(_vuex);\n\nvar _state = __webpack_require__(148);\n\nvar _state2 = _interopRequireDefault(_state);\n\nvar _getters = __webpack_require__(147);\n\nvar getters = _interopRequireWildcard(_getters);\n\nvar _actions = __webpack_require__(146);\n\nvar actions = _interopRequireWildcard(_actions);\n\nvar _mutations = __webpack_require__(70);\n\nvar mutations = _interopRequireWildcard(_mutations);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_vue2.default.use(_vuex2.default);\n\nvar store = new _vuex2.default.Store({\n    state: _state2.default,\n    getters: getters,\n    actions: actions,\n    mutations: mutations\n});\n\nexports.default = store;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdG9yZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJnZXR0ZXJzIiwiYWN0aW9ucyIsIm11dGF0aW9ucyIsInVzZSIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUlBOzs7O0FBQ0E7O0lBQVlBLE87O0FBQ1o7O0lBQVlDLE87O0FBQ1o7O0lBQVlDLFM7Ozs7OztBQUxaLGNBQUlDLEdBQUo7O0FBT0EsSUFBTUMsUUFBUSxJQUFJLGVBQUtDLEtBQVQsQ0FBZTtBQUN6QkMsMEJBRHlCO0FBRXpCTixvQkFGeUI7QUFHekJDLG9CQUh5QjtBQUl6QkM7QUFKeUIsQ0FBZixDQUFkOztrQkFPZUUsSyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgVnVleCBmcm9tICd2dWV4J1xuXG5WdWUudXNlKFZ1ZXgpXG5cbmltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlJ1xuaW1wb3J0ICogYXMgZ2V0dGVycyBmcm9tICcuL2dldHRlcnMnXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucydcbmltcG9ydCAqIGFzIG11dGF0aW9ucyBmcm9tICcuL211dGF0aW9ucydcblxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XG4gICAgc3RhdGUsXG4gICAgZ2V0dGVycyxcbiAgICBhY3Rpb25zLFxuICAgIG11dGF0aW9uc1xufSlcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmVcbiJdfQ==\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nmodule.exports = _curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar curryN = __webpack_require__(5);\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar curry = __webpack_require__(34);\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nmodule.exports = _curry1(function flip(fn) {\n  return curry(function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _isPlaceholder = __webpack_require__(40);\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _isArray = __webpack_require__(15);\nvar _isString = __webpack_require__(25);\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar map = __webpack_require__(7);\n\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry2(function lens(getter, setter) {\n  return function(toFunctorFn) {\n    return function(target) {\n      return map(\n        function(focus) {\n          return setter(focus, target);\n        },\n        toFunctorFn(getter(target))\n      );\n    };\n  };\n});\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar liftN = __webpack_require__(105);\n\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nmodule.exports = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar _isObject = __webpack_require__(59);\nvar mergeWithKey = __webpack_require__(61);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nmodule.exports = _curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function(k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      var takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nmodule.exports = _curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0: return function() {return fn.call(this);};\n    case 1: return function(a0) {return fn.call(this, a0);};\n    case 2: return function(a0, a1) {return fn.call(this, a0, a1);};\n    case 3: return function(a0, a1, a2) {return fn.call(this, a0, a1, a2);};\n    case 4: return function(a0, a1, a2, a3) {return fn.call(this, a0, a1, a2, a3);};\n    case 5: return function(a0, a1, a2, a3, a4) {return fn.call(this, a0, a1, a2, a3, a4);};\n    case 6: return function(a0, a1, a2, a3, a4, a5) {return fn.call(this, a0, a1, a2, a3, a4, a5);};\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6);};\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);};\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);};\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);};\n    default: throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curryN = __webpack_require__(37);\nvar _dispatchable = __webpack_require__(3);\nvar _has = __webpack_require__(6);\nvar _reduce = __webpack_require__(9);\nvar _xreduceBy = __webpack_require__(267);\n\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nmodule.exports = _curryN(4, [], _dispatchable([], _xreduceBy,\n  function reduceBy(valueFn, valueAcc, keyFn, list) {\n    return _reduce(function(acc, elt) {\n      var key = keyFn(elt);\n      acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n      return acc;\n    }, {}, list);\n  }));\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _complement = __webpack_require__(91);\nvar _curry2 = __webpack_require__(0);\nvar filter = __webpack_require__(53);\n\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _isString = __webpack_require__(25);\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry2 = __webpack_require__(0);\nvar _reduce = __webpack_require__(9);\nvar map = __webpack_require__(7);\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nmodule.exports = _curry2(function ap(applyF, applyX) {\n  return (\n    typeof applyX['fantasy-land/ap'] === 'function' ?\n      applyX['fantasy-land/ap'](applyF) :\n    typeof applyF.ap === 'function' ?\n      applyF.ap(applyX) :\n    typeof applyF === 'function' ?\n      function(x) { return applyF(x)(applyX(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, applyX)); }, [], applyF)\n  );\n});\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _makeFlat = __webpack_require__(96);\nvar _xchain = __webpack_require__(256);\nvar map = __webpack_require__(7);\n\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nmodule.exports = _curry2(_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function(x) { return fn(monad(x))(x); };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar pipe = __webpack_require__(114);\nvar reverse = __webpack_require__(48);\n\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nmodule.exports = function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n};\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isArray = __webpack_require__(15);\nvar _isFunction = __webpack_require__(39);\nvar _isString = __webpack_require__(25);\nvar toString = __webpack_require__(30);\n\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nmodule.exports = _curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _filter = __webpack_require__(56);\nvar _isObject = __webpack_require__(59);\nvar _reduce = __webpack_require__(9);\nvar _xfilter = __webpack_require__(261);\nvar keys = __webpack_require__(13);\n\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _identity = __webpack_require__(57);\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nmodule.exports = _curry1(_identity);\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _objectAssign = __webpack_require__(246);\n\nmodule.exports =\n  typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n};\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _identity(x) { return x; };\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports) {\n\n/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nmodule.exports = Number.isInteger || function _isInteger(n) {\n  return (n << 0) === n;\n};\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar _has = __webpack_require__(6);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _checkForMethod = __webpack_require__(24);\nvar _curry1 = __webpack_require__(1);\nvar slice = __webpack_require__(20);\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xtake = __webpack_require__(268);\nvar slice = __webpack_require__(20);\n\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      var personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      var takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nmodule.exports = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar identity = __webpack_require__(54);\nvar uniqBy = __webpack_require__(123);\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nmodule.exports = uniqBy(identity);\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _containsWith = __webpack_require__(36);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      var strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nmodule.exports = _curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_containsWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar adjust = __webpack_require__(72);\nvar always = __webpack_require__(21);\n\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nmodule.exports = _curry3(function update(idx, x, list) {\n  return adjust(always(x), idx, list);\n});\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.noteFrequency = noteFrequency;\nexports.noteName = noteName;\nvar noteStrings = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nfunction noteFrequency(note) {\n\treturn 440 * Math.pow(2, (note - 69) / 12);\n}\n\nfunction noteName(note) {\n\treturn noteStrings[note % 12] + (Math.floor(note / 12) - 2);\n}\n\nvar keyToNote = exports.keyToNote = {\n\ta: 0, // C\n\tw: 1,\n\ts: 2,\n\te: 3,\n\td: 4,\n\tf: 5,\n\tt: 6,\n\tg: 7,\n\ty: 8,\n\th: 9,\n\tu: 10,\n\tj: 11,\n\tk: 12,\n\to: 13,\n\tl: 14\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ub3Rlcy5qcyJdLCJuYW1lcyI6WyJub3RlRnJlcXVlbmN5Iiwibm90ZU5hbWUiLCJub3RlU3RyaW5ncyIsIm5vdGUiLCJNYXRoIiwicG93IiwiZmxvb3IiLCJrZXlUb05vdGUiLCJhIiwidyIsInMiLCJlIiwiZCIsImYiLCJ0IiwiZyIsInkiLCJoIiwidSIsImoiLCJrIiwibyIsImwiXSwibWFwcGluZ3MiOiI7Ozs7O1FBRWdCQSxhLEdBQUFBLGE7UUFJQUMsUSxHQUFBQSxRO0FBTmhCLElBQU1DLGNBQWMsQ0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLEdBQVosRUFBaUIsSUFBakIsRUFBdUIsR0FBdkIsRUFBNEIsR0FBNUIsRUFBaUMsSUFBakMsRUFBdUMsR0FBdkMsRUFBNEMsSUFBNUMsRUFBa0QsR0FBbEQsRUFBdUQsSUFBdkQsRUFBNkQsR0FBN0QsQ0FBcEI7O0FBRU8sU0FBU0YsYUFBVCxDQUF5QkcsSUFBekIsRUFBZ0M7QUFDdEMsUUFBTyxNQUFNQyxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFXLENBQUNGLE9BQUssRUFBTixJQUFVLEVBQXJCLENBQWI7QUFDQTs7QUFFTSxTQUFTRixRQUFULENBQW1CRSxJQUFuQixFQUF5QjtBQUMvQixRQUFPRCxZQUFZQyxPQUFPLEVBQW5CLEtBQTBCQyxLQUFLRSxLQUFMLENBQVdILE9BQU8sRUFBbEIsSUFBd0IsQ0FBbEQsQ0FBUDtBQUNBOztBQUVNLElBQU1JLGdDQUFZO0FBQ3JCQyxJQUFHLENBRGtCLEVBQ2Y7QUFDTkMsSUFBRyxDQUZrQjtBQUd4QkMsSUFBRyxDQUhxQjtBQUl4QkMsSUFBRyxDQUpxQjtBQUt4QkMsSUFBRyxDQUxxQjtBQU14QkMsSUFBRyxDQU5xQjtBQU94QkMsSUFBRyxDQVBxQjtBQVF4QkMsSUFBRyxDQVJxQjtBQVN4QkMsSUFBRyxDQVRxQjtBQVV4QkMsSUFBRyxDQVZxQjtBQVd4QkMsSUFBRyxFQVhxQjtBQVl4QkMsSUFBRyxFQVpxQjtBQWF4QkMsSUFBRyxFQWJxQjtBQWN4QkMsSUFBRyxFQWRxQjtBQWV4QkMsSUFBRztBQWZxQixDQUFsQiIsImZpbGUiOiJub3Rlcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm90ZVN0cmluZ3MgPSBbXCJDXCIsIFwiQyNcIiwgXCJEXCIsIFwiRCNcIiwgXCJFXCIsIFwiRlwiLCBcIkYjXCIsIFwiR1wiLCBcIkcjXCIsIFwiQVwiLCBcIkEjXCIsIFwiQlwiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGVGcmVxdWVuY3kgKCBub3RlICkge1xuXHRyZXR1cm4gNDQwICogTWF0aC5wb3coMiwobm90ZS02OSkvMTIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm90ZU5hbWUgKG5vdGUpIHtcblx0cmV0dXJuIG5vdGVTdHJpbmdzW25vdGUgJSAxMl0gKyAoTWF0aC5mbG9vcihub3RlIC8gMTIpIC0gMilcbn1cblxuZXhwb3J0IGNvbnN0IGtleVRvTm90ZSA9IHtcbiAgICBhOiAwLCAvLyBDXG4gICAgdzogMSxcblx0czogMixcblx0ZTogMyxcblx0ZDogNCxcblx0ZjogNSxcblx0dDogNixcblx0ZzogNyxcblx0eTogOCxcblx0aDogOSxcblx0dTogMTAsXG5cdGo6IDExLFxuXHRrOiAxMixcblx0bzogMTMsXG5cdGw6IDE0XG59XG4iXX0=\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.UPDATE_METRE = exports.UPDATE_TEMPO = exports.UPDATE_UI_MEASURES = exports.MIDI_NOTE_END = exports.MIDI_NOTE_SET = exports.MIDI_DISCONNECT_OUTPUT = exports.MIDI_DISCONNECT_INPUT = exports.MIDI_CONNECT_OUTPUT = exports.MIDI_CONNECT_INPUT = exports.types = undefined;\n\nvar _vue = __webpack_require__(23);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar types = exports.types = {\n    MIDI_CONNECT_INPUT: 'MIDI_CONNECT_INPUT',\n    MIDI_DISCONNECT_INPUT: 'MIDI_DISCONNECT_INPUT',\n    MIDI_CONNECT_OUTPUT: 'MIDI_CONNECT_OUTPUT',\n    MIDI_DISCONNECT_OUTPUT: 'MIDI_DISCONNECT_OUTPUT',\n    MIDI_NOTE_SET: 'MIDI_NOTE_SET',\n    MIDI_NOTE_END: 'MIDI_NOTE_END',\n    UPDATE_UI_MEASURES: 'UPDATE_UI_MEASURES',\n    UPDATE_TEMPO: 'UPDATE_TEMPO',\n    UPDATE_METRE: 'UPDATE_METRE'\n};\n\nvar MIDI_CONNECT_INPUT = exports.MIDI_CONNECT_INPUT = function MIDI_CONNECT_INPUT(state, _ref) {\n    var id = _ref.id,\n        name = _ref.name,\n        virtual = _ref.virtual;\n\n    state.midi.inputs.push({\n        id: id,\n        name: name,\n        virtual: virtual,\n        notes: []\n    });\n};\n\nvar MIDI_CONNECT_OUTPUT = exports.MIDI_CONNECT_OUTPUT = function MIDI_CONNECT_OUTPUT(state, _ref2) {\n    var id = _ref2.id,\n        name = _ref2.name,\n        virtual = _ref2.virtual;\n\n    state.midi.outputs.push({\n        id: id,\n        name: name,\n        virtual: virtual\n    });\n};\n\nvar MIDI_DISCONNECT_INPUT = exports.MIDI_DISCONNECT_INPUT = function MIDI_DISCONNECT_INPUT(state, _ref3) {\n    var id = _ref3.id;\n\n    var index = state.midi.inputs.findIndex(function (i) {\n        return i.id === id;\n    });\n    if (index >= 0) state.midi.inputs.splice(index, 1);\n};\n\nvar MIDI_DISCONNECT_OUTPUT = exports.MIDI_DISCONNECT_OUTPUT = function MIDI_DISCONNECT_OUTPUT(state, _ref4) {\n    var id = _ref4.id;\n\n    var index = state.midi.outputs.findIndex(function (o) {\n        return o.id === id;\n    });\n    if (index >= 0) state.midi.outputs.splice(index, 1);\n};\n\nvar MIDI_NOTE_SET = exports.MIDI_NOTE_SET = function MIDI_NOTE_SET(state, _ref5) {\n    var inputId = _ref5.inputId,\n        noteNumber = _ref5.noteNumber,\n        velocity = _ref5.velocity;\n\n    var input = state.midi.inputs.find(function (input) {\n        return input.id === inputId;\n    });\n    if (input) {\n        var existingNote = input.notes.find(function (note) {\n            return note.number === noteNumber;\n        });\n        if (existingNote) {\n            existingNote.velocity = velocity;\n        } else {\n            input.notes.push({\n                number: noteNumber,\n                velocity: velocity\n            });\n        }\n    }\n};\n\nvar MIDI_NOTE_END = exports.MIDI_NOTE_END = function MIDI_NOTE_END(state, _ref6) {\n    var inputId = _ref6.inputId,\n        channel = _ref6.channel,\n        noteNumber = _ref6.noteNumber;\n\n    var input = state.midi.inputs.find(function (input) {\n        return input.id === inputId;\n    });\n    if (input) {\n        var index = input.notes.findIndex(function (note) {\n            return note.number === noteNumber;\n        });\n        if (index >= 0) input.notes.splice(index, 1);\n    }\n};\n\nvar UPDATE_UI_MEASURES = exports.UPDATE_UI_MEASURES = function UPDATE_UI_MEASURES(state, _ref7) {\n    var pixelsPerBeat = _ref7.pixelsPerBeat,\n        panBeats = _ref7.panBeats;\n\n    state.ui.pixelsPerBeat = pixelsPerBeat;\n    state.ui.panBeats = panBeats;\n};\n\nvar UPDATE_TEMPO = exports.UPDATE_TEMPO = function UPDATE_TEMPO(state, tempo) {\n    state.tempo = tempo;\n};\n\nvar UPDATE_METRE = exports.UPDATE_METRE = function UPDATE_METRE(state, metre) {\n    _vue2.default.set(state.metre, 0, metre[0]);\n    _vue2.default.set(state.metre, 1, metre[1]);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdG9yZS9tdXRhdGlvbnMuanMiXSwibmFtZXMiOlsidHlwZXMiLCJNSURJX0NPTk5FQ1RfSU5QVVQiLCJNSURJX0RJU0NPTk5FQ1RfSU5QVVQiLCJNSURJX0NPTk5FQ1RfT1VUUFVUIiwiTUlESV9ESVNDT05ORUNUX09VVFBVVCIsIk1JRElfTk9URV9TRVQiLCJNSURJX05PVEVfRU5EIiwiVVBEQVRFX1VJX01FQVNVUkVTIiwiVVBEQVRFX1RFTVBPIiwiVVBEQVRFX01FVFJFIiwic3RhdGUiLCJpZCIsIm5hbWUiLCJ2aXJ0dWFsIiwibWlkaSIsImlucHV0cyIsInB1c2giLCJub3RlcyIsIm91dHB1dHMiLCJpbmRleCIsImZpbmRJbmRleCIsImkiLCJzcGxpY2UiLCJvIiwiaW5wdXRJZCIsIm5vdGVOdW1iZXIiLCJ2ZWxvY2l0eSIsImlucHV0IiwiZmluZCIsImV4aXN0aW5nTm90ZSIsIm5vdGUiLCJudW1iZXIiLCJjaGFubmVsIiwicGl4ZWxzUGVyQmVhdCIsInBhbkJlYXRzIiwidWkiLCJ0ZW1wbyIsIm1ldHJlIiwic2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztBQUVPLElBQU1BLHdCQUFRO0FBQ2pCQyx3QkFBb0Isb0JBREg7QUFFakJDLDJCQUF1Qix1QkFGTjtBQUdqQkMseUJBQXFCLHFCQUhKO0FBSWpCQyw0QkFBd0Isd0JBSlA7QUFLakJDLG1CQUFlLGVBTEU7QUFNakJDLG1CQUFlLGVBTkU7QUFPakJDLHdCQUFvQixvQkFQSDtBQVFqQkMsa0JBQWMsY0FSRztBQVNqQkMsa0JBQWM7QUFURyxDQUFkOztBQVlBLElBQU1SLGtEQUFxQixTQUFyQkEsa0JBQXFCLENBQUNTLEtBQUQsUUFBZ0M7QUFBQSxRQUF2QkMsRUFBdUIsUUFBdkJBLEVBQXVCO0FBQUEsUUFBbkJDLElBQW1CLFFBQW5CQSxJQUFtQjtBQUFBLFFBQWJDLE9BQWEsUUFBYkEsT0FBYTs7QUFDOURILFVBQU1JLElBQU4sQ0FBV0MsTUFBWCxDQUFrQkMsSUFBbEIs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WUFBSU4sU0FBUyxDQUFiLEVBQWdCUSxNQUFNVixLQUFOLENBQVlLLE1BQVosQ0FBbUJILEtBQW5CLEVBQTBCLENBQTFCO0FBQ25CO0FBQ0osQ0FOTTs7QUFRQSxJQUFNWixrREFBcUIsU0FBckJBLGtCQUFxQixDQUFDRyxLQUFELFNBQXNDO0FBQUEsUUFBN0J1QixhQUE2QixTQUE3QkEsYUFBNkI7QUFBQSxRQUFkQyxRQUFjLFNBQWRBLFFBQWM7O0FBQ3BFeEIsVUFBTXlCLEVBQU4sQ0FBU0YsYUFBVCxHQUF5QkEsYUFBekI7QUFDQXZCLFVBQU15QixFQUFOLENBQVNELFFBQVQsR0FBb0JBLFFBQXBCO0FBQ0gsQ0FITTs7QUFLQSxJQUFNMUIsc0NBQWUsU0FBZkEsWUFBZSxDQUFDRSxLQUFELEVBQVEwQixLQUFSLEVBQWtCO0FBQzFDMUIsVUFBTTBCLEtBQU4sR0FBY0EsS0FBZDtBQUNILENBRk07O0FBSUEsSUFBTTNCLHNDQUFlLFNBQWZBLFlBQWUsQ0FBQ0MsS0FBRCxFQUFRMkIsS0FBUixFQUFrQjtBQUMxQyxrQkFBSUMsR0FBSixDQUFRNUIsTUFBTTJCLEtBQWQsRUFBcUIsQ0FBckIsRUFBd0JBLE1BQU0sQ0FBTixDQUF4QjtBQUNBLGtCQUFJQyxHQUFKLENBQVE1QixNQUFNMkIsS0FBZCxFQUFxQixDQUFyQixFQUF3QkEsTUFBTSxDQUFOLENBQXhCO0FBQ0gsQ0FITSIsImZpbGUiOiJtdXRhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ZyaXppL1Byb2plY3RzL29wLXdlYiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgdHlwZXMgPSB7XG4gICAgTUlESV9DT05ORUNUX0lOUFVUOiAnTUlESV9DT05ORUNUX0lOUFVUJyxcbiAgICBNSURJX0RJU0NPTk5FQ1RfSU5QVVQ6ICdNSURJX0RJU0NPTk5FQ1RfSU5QVVQnLFxuICAgIE1JRElfQ09OTkVDVF9PVVRQVVQ6ICdNSURJX0NPTk5FQ1RfT1VUUFVUJyxcbiAgICBNSURJX0RJU0NPTk5FQ1RfT1VUUFVUOiAnTUlESV9ESVNDT05ORUNUX09VVFBVVCcsXG4gICAgTUlESV9OT1RFX1NFVDogJ01JRElfTk9URV9TRVQnLFxuICAgIE1JRElfTk9URV9FTkQ6ICdNSURJX05PVEVfRU5EJyxcbiAgICBVUERBVEVfVUlfTUVBU1VSRVM6ICdVUERBVEVfVUlfTUVBU1VSRVMnLFxuICAgIFVQREFURV9URU1QTzogJ1VQREFURV9URU1QTycsXG4gICAgVVBEQVRFX01FVFJFOiAnVVBEQVRFX01FVFJFJ1xufVxuXG5leHBvcnQgY29uc3QgTUlESV9DT05ORUNUX0lOUFVUID0gKHN0YXRlLCB7aWQsIG5hbWUsIHZpcnR1YWx9KSA9PiB7XG4gICAgc3RhdGUubWlkaS5pbnB1dHMucHVzaCh7XG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICB2aXJ0dWFsLFxuICAgICAgICBub3RlczogW11cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgTUlESV9DT05ORUNUX09VVFBVVCA9IChzdGF0ZSwge2lkLCBuYW1lLCB2aXJ0dWFsfSkgPT4ge1xuICAgIHN0YXRlLm1pZGkub3V0cHV0cy5wdXNoKHtcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZpcnR1YWxcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgTUlESV9ESVNDT05ORUNUX0lOUFVUID0gKHN0YXRlLCB7aWR9KSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBzdGF0ZS5taWRpLmlucHV0cy5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBpZClcbiAgICBpZiAoaW5kZXggPj0gMCkgc3RhdGUubWlkaS5pbnB1dHMuc3BsaWNlKGluZGV4LCAxKVxufVxuXG5leHBvcnQgY29uc3QgTUlESV9ESVNDT05ORUNUX09VVFBVVCA9IChzdGF0ZSwge2lkfSkgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gc3RhdGUubWlkaS5vdXRwdXRzLmZpbmRJbmRleChvID0+IG8uaWQgPT09IGlkKVxuICAgIGlmIChpbmRleCA+PSAwKSBzdGF0ZS5taWRpLm91dHB1dHMuc3BsaWNlKGluZGV4LCAxKVxufVxuXG5leHBvcnQgY29uc3QgTUlESV9OT1RFX1NFVCA9IChzdGF0ZSwge2lucHV0SWQsIG5vdGVOdW1iZXIsIHZlbG9jaXR5fSkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gc3RhdGUubWlkaS5pbnB1dHMuZmluZChpbnB1dCA9PiBpbnB1dC5pZCA9PT0gaW5wdXRJZClcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdOb3RlID0gaW5wdXQubm90ZXMuZmluZChub3RlID0+IG5vdGUubnVtYmVyID09PSBub3RlTnVtYmVyKVxuICAgICAgICBpZiAoZXhpc3RpbmdOb3RlKSB7XG4gICAgICAgICAgICBleGlzdGluZ05vdGUudmVsb2NpdHkgPSB2ZWxvY2l0eVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQubm90ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbnVtYmVyOiBub3RlTnVtYmVyLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgTUlESV9OT1RFX0VORCA9IChzdGF0ZSwge2lucHV0SWQsIGNoYW5uZWwsIG5vdGVOdW1iZXJ9KSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBzdGF0ZS5taWRpLmlucHV0cy5maW5kKGlucHV0ID0+IGlucHV0LmlkID09PSBpbnB1dElkKVxuICAgIGlmIChpbnB1dCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGlucHV0Lm5vdGVzLmZpbmRJbmRleChub3RlID0+IG5vdGUubnVtYmVyID09PSBub3RlTnVtYmVyKVxuICAgICAgICBpZiAoaW5kZXggPj0gMCkgaW5wdXQubm90ZXMuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFVQREFURV9VSV9NRUFTVVJFUyA9IChzdGF0ZSwge3BpeGVsc1BlckJlYXQsIHBhbkJlYXRzfSkgPT4ge1xuICAgIHN0YXRlLnVpLnBpeGVsc1BlckJlYXQgPSBwaXhlbHNQZXJCZWF0XG4gICAgc3RhdGUudWkucGFuQmVhdHMgPSBwYW5CZWF0c1xufVxuXG5leHBvcnQgY29uc3QgVVBEQVRFX1RFTVBPID0gKHN0YXRlLCB0ZW1wbykgPT4ge1xuICAgIHN0YXRlLnRlbXBvID0gdGVtcG9cbn1cblxuZXhwb3J0IGNvbnN0IFVQREFURV9NRVRSRSA9IChzdGF0ZSwgbWV0cmUpID0+IHtcbiAgICBWdWUuc2V0KHN0YXRlLm1ldHJlLCAwLCBtZXRyZVswXSlcbiAgICBWdWUuc2V0KHN0YXRlLm1ldHJlLCAxLCBtZXRyZVsxXSlcbn1cbiJdfQ==\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(151)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(135),\n  /* template */\n  __webpack_require__(168),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\nmodule.exports = _curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n  var start = idx < 0 ? list.length : 0;\n  var _idx = start + idx;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nmodule.exports = _curry2(function and(a, b) {\n  return a && b;\n});\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xany = __webpack_require__(97);\n\n\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      var lessThan0 = R.flip(R.lt)(0);\n *      var lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nmodule.exports = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nmodule.exports = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar _has = __webpack_require__(6);\nvar _isArray = __webpack_require__(15);\nvar _isInteger = __webpack_require__(58);\nvar assoc = __webpack_require__(33);\nvar isNil = __webpack_require__(101);\n\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nmodule.exports = _curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = (!isNil(obj) && _has(idx, obj)) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar chain = __webpack_require__(50);\nvar compose = __webpack_require__(51);\nvar map = __webpack_require__(7);\n\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nmodule.exports = function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n};\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar curry = __webpack_require__(34);\nvar nAry = __webpack_require__(45);\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      };\n *      Salad.prototype.recipe = function() {\n *        var instructions = R.map((ingredient) => (\n *          'Add a whollop of ' + ingredient, this.ingredients)\n *        )\n *        return R.join('\\n', instructions)\n *      }\n *\n *      var ThreeLayerSalad = R.constructN(3, Salad)\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup')\n *      console.log(salad.recipe());\n *      // Add a whollop of Mayonnaise\n *      // Add a whollop of Potato Chips\n *      // Add a whollop of Potato Ketchup\n */\nmodule.exports = _curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function() { return new Fn(); };\n  }\n  return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case  1: return new Fn($0);\n      case  2: return new Fn($0, $1);\n      case  3: return new Fn($0, $1, $2);\n      case  4: return new Fn($0, $1, $2, $3);\n      case  5: return new Fn($0, $1, $2, $3, $4);\n      case  6: return new Fn($0, $1, $2, $3, $4, $5);\n      case  7: return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case  8: return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case  9: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _map = __webpack_require__(41);\nvar curryN = __webpack_require__(5);\nvar max = __webpack_require__(22);\nvar pluck = __webpack_require__(29);\nvar reduce = __webpack_require__(14);\n\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nmodule.exports = _curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function() {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function(fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nmodule.exports = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nmodule.exports = _curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _containsWith = __webpack_require__(36);\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nmodule.exports = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) &&\n        !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nmodule.exports = _curry2(function dissoc(prop, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n});\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xdrop = __webpack_require__(257);\nvar slice = __webpack_require__(20);\n\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nmodule.exports = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xdropRepeatsWith = __webpack_require__(98);\nvar last = __webpack_require__(103);\n\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\n\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _isArguments = __webpack_require__(94);\nvar _isArray = __webpack_require__(15);\nvar _isObject = __webpack_require__(59);\nvar _isString = __webpack_require__(25);\n\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty` and/or\n * `<Type>.prototype.empty`.\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nmodule.exports = _curry1(function empty(x) {\n  return (\n    (x != null && typeof x['fantasy-land/empty'] === 'function') ?\n      x['fantasy-land/empty']() :\n    (x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function') ?\n      x.constructor['fantasy-land/empty']() :\n    (x != null && typeof x.empty === 'function') ?\n      x.empty() :\n    (x != null && x.constructor != null && typeof x.constructor.empty === 'function') ?\n      x.constructor.empty() :\n    _isArray(x) ?\n      [] :\n    _isString(x) ?\n      '' :\n    _isObject(x) ?\n      {} :\n    _isArguments(x) ?\n      (function() { return arguments; }()) :\n    // else\n      void 0\n  );\n});\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _cloneRegExp = __webpack_require__(90);\nvar type = __webpack_require__(65);\n\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nmodule.exports = function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ?\n        _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':  return copy({});\n    case 'Array':   return copy([]);\n    case 'Date':    return new Date(value.valueOf());\n    case 'RegExp':  return _cloneRegExp(value);\n    default:        return value;\n  }\n};\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +\n                                    (pattern.ignoreCase ? 'i' : '') +\n                                    (pattern.multiline  ? 'm' : '') +\n                                    (pattern.sticky     ? 'y' : '') +\n                                    (pattern.unicode    ? 'u' : ''));\n};\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n};\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _curry2 = __webpack_require__(0);\n\n\nmodule.exports = function _createPartialApplicator(concat) {\n  return _curry2(function(fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function() {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n};\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar equals = __webpack_require__(8);\n\n\nmodule.exports = function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n};\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _has = __webpack_require__(6);\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n};\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _isArrayLike = __webpack_require__(38);\n\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nmodule.exports = function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n};\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduced = __webpack_require__(16);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XAny(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.any = false;\n  }\n  XAny.prototype['@@transducer/init'] = _xfBase.init;\n  XAny.prototype['@@transducer/result'] = function(result) {\n    if (!this.any) {\n      result = this.xf['@@transducer/step'](result, false);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAny.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.any = true;\n      result = _reduced(this.xf['@@transducer/step'](result, true));\n    }\n    return result;\n  };\n\n  return _curry2(function _xany(f, xf) { return new XAny(f, xf); });\n}());\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XDropRepeatsWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.lastValue = undefined;\n    this.seenFirstValue = false;\n  }\n\n  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\n  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\n  XDropRepeatsWith.prototype['@@transducer/step'] = function(result, input) {\n    var sameAsLast = false;\n    if (!this.seenFirstValue) {\n      this.seenFirstValue = true;\n    } else if (this.pred(this.lastValue, input)) {\n      sameAsLast = true;\n    }\n    this.lastValue = input;\n    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdropRepeatsWith(pred, xf) { return new XDropRepeatsWith(pred, xf); });\n}());\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports) {\n\nmodule.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nmodule.exports = _curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nmodule.exports = _curry1(function isNil(x) { return x == null; });\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar converge = __webpack_require__(80);\n\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nmodule.exports = _curry1(function juxt(fns) {\n  return converge(function() { return Array.prototype.slice.call(arguments, 0); }, fns);\n});\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar nth = __webpack_require__(27);\n\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nmodule.exports = nth(-1);\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _isNumber = __webpack_require__(95);\n\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nmodule.exports = _curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduce = __webpack_require__(9);\nvar ap = __webpack_require__(49);\nvar curryN = __webpack_require__(5);\nvar map = __webpack_require__(7);\n\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nmodule.exports = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar sum = __webpack_require__(120);\n\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nmodule.exports = _curry1(function mean(list) {\n  return sum(list) / list.length;\n});\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _curry2 = __webpack_require__(0);\nvar _has = __webpack_require__(6);\n\n\n/**\n * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n * additional function that will be applied to a given argument set and used to\n * create the cache key under which the results of the function to be memoized\n * will be stored. Care must be taken when implementing key generation to avoid\n * clashes that may overwrite previous entries erroneously.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoize\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nmodule.exports = _curry2(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return _arity(fn.length, function() {\n    var key = mFn.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      var double = R.multiply(2);\n *      var triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nmodule.exports = _curry2(function multiply(a, b) { return a * b; });\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nmodule.exports = _curry1(function not(a) {\n  return !a;\n});\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nmodule.exports = _curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nmodule.exports = _curry2(function or(a, b) {\n  return a || b;\n});\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nmodule.exports = (function() {\n  // `Identity` is a functor that holds a single value, where `map` simply\n  // transforms the held value with the provided function.\n  var Identity = function(x) {\n    return {value: x, map: function(f) { return Identity(f(x)); }};\n  };\n\n  return _curry3(function over(lens, f, x) {\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    return lens(function(y) { return Identity(f(y)); })(x).value;\n  });\n}());\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nmodule.exports = _curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _pipe = __webpack_require__(248);\nvar reduce = __webpack_require__(14);\nvar tail = __webpack_require__(63);\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _pipeP = __webpack_require__(249);\nvar reduce = __webpack_require__(14);\nvar tail = __webpack_require__(63);\n\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\nmodule.exports = function pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipeP, arguments[0], tail(arguments)));\n};\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nmodule.exports = _curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a, b -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *          -               -2\n *         / \\              / \\\n *        1   -            1   3\n *           / \\              / \\\n *          2   -     ==>    2  -1\n *             / \\              / \\\n *            3   -            3   4\n *               / \\              / \\\n *              4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nmodule.exports = _curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nmodule.exports = _curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar ap = __webpack_require__(49);\nvar map = __webpack_require__(7);\nvar prepend = __webpack_require__(116);\nvar reduceRight = __webpack_require__(117);\n\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nmodule.exports = _curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ?\n    traversable.sequence(of) :\n    reduceRight(function(x, acc) { return ap(map(prepend, x), acc); },\n                of([]),\n                traversable);\n});\n\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar add = __webpack_require__(32);\nvar reduce = __webpack_require__(14);\n\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nmodule.exports = reduce(add, 0);\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar drop = __webpack_require__(85);\n\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nmodule.exports = _curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nmodule.exports = _curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _Set = __webpack_require__(236);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nmodule.exports = _curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar curryN = __webpack_require__(5);\n\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nmodule.exports = _curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function() {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar keys = __webpack_require__(13);\n\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nmodule.exports = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _has = __webpack_require__(6);\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nmodule.exports = _curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\n\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _vue = __webpack_require__(23);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _App = __webpack_require__(158);\n\nvar _App2 = _interopRequireDefault(_App);\n\n__webpack_require__(145);\n\n__webpack_require__(31);\n\n__webpack_require__(138);\n\n__webpack_require__(139);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nnew _vue2.default({\n    el: '#app',\n    render: function render(h) {\n        return h(_App2.default);\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJlbCIsInJlbmRlciIsImgiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsa0JBQVE7QUFDSkEsUUFBSSxNQURBO0FBRUpDLFVBRkksa0JBRUlDLENBRkosRUFFTztBQUNQLGVBQU9BLGdCQUFQO0FBQ0g7QUFKRyxDQUFSIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9mcml6aS9Qcm9qZWN0cy9vcC13ZWIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnXG5cbmltcG9ydCAnLi9taXhpbnMnXG5pbXBvcnQgJy4vc3RvcmUnXG5pbXBvcnQgJy4vYXVkaW8vTWlkaUN0eCdcbmltcG9ydCAnLi9hdWRpby9hdWRpb0N0eCdcblxubmV3IFZ1ZSh7XG4gICAgZWw6ICcjYXBwJyxcbiAgICByZW5kZXIgKGgpIHtcbiAgICAgICAgcmV0dXJuIGgoQXBwKVxuICAgIH1cbn0pXG4iXX0=\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _store = __webpack_require__(31);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _SettingsPanel = __webpack_require__(164);\n\nvar _SettingsPanel2 = _interopRequireDefault(_SettingsPanel);\n\nvar _ArrangementPanel = __webpack_require__(159);\n\nvar _ArrangementPanel2 = _interopRequireDefault(_ArrangementPanel);\n\nvar _KeyboardController = __webpack_require__(162);\n\nvar _KeyboardController2 = _interopRequireDefault(_KeyboardController);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {\n    store: _store2.default,\n    components: {\n        SettingsPanel: _SettingsPanel2.default,\n        ArrangementPanel: _ArrangementPanel2.default,\n        KeyboardController: _KeyboardController2.default\n    }\n};\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nvar _vuex = __webpack_require__(17);\n\nvar _Tapes = __webpack_require__(165);\n\nvar _Tapes2 = _interopRequireDefault(_Tapes);\n\nvar _ViewSlider = __webpack_require__(166);\n\nvar _ViewSlider2 = _interopRequireDefault(_ViewSlider);\n\nvar _BarMarks = __webpack_require__(160);\n\nvar _BarMarks2 = _interopRequireDefault(_BarMarks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    components: {\n        Tapes: _Tapes2.default,\n        ViewSlider: _ViewSlider2.default,\n        BarMarks: _BarMarks2.default\n    },\n    data: function data() {\n        return {\n            elWidth: 0,\n            caret: 0,\n            showBeats: 50\n        };\n    },\n\n    computed: _extends({}, (0, _vuex.mapGetters)(['tapes', 'uiMeasures', 'secondsToBeats']), {\n        region: function region() {\n            var _uiMeasures = this.uiMeasures,\n                pixelsPerBeat = _uiMeasures.pixelsPerBeat,\n                panBeats = _uiMeasures.panBeats;\n\n            return [panBeats, panBeats + this.elWidth / pixelsPerBeat];\n        },\n        maxClipRange: function maxClipRange() {\n            var secondsToBeats = this.secondsToBeats;\n            return _ramda2.default.pipe(_ramda2.default.chain(_ramda2.default.prop('clips'), this.tapes), _ramda2.default.map(function (clip) {\n                return clip.beat + secondsToBeats(clip.duration);\n            }), _ramda2.default.max);\n        },\n        minBeatsToShow: function minBeatsToShow() {\n            return Math.ceil(Math.min(this.caret, this.maxClipRange)) + 8;\n        }\n    }),\n    watch: {\n        minBeatsToShow: function minBeatsToShow(value) {\n            if (value < this.showBeats) {\n                this.showBeats = value;\n            }\n        }\n    },\n    methods: _extends({}, (0, _vuex.mapActions)(['updateUiMeasures']), {\n        gatherMeasures: function gatherMeasures() {\n            var rect = this.$el.getBoundingClientRect();\n            this.elWidth = rect.right - rect.left;\n        },\n        updateRegion: function updateRegion(newRegion) {\n            var _uiMeasures2 = this.uiMeasures,\n                pixelsPerBeat = _uiMeasures2.pixelsPerBeat,\n                panBeats = _uiMeasures2.panBeats;\n\n            var newPan = newRegion[0];\n            var totalBeats = newRegion[1] - newRegion[0];\n\n            var newPixelsPerBeat = this.elWidth / totalBeats;\n            this.updateUiMeasures({\n                pixelsPerBeat: newPixelsPerBeat,\n                panBeats: newPan\n            });\n        }\n    }),\n    docEvents: {\n        resize: function resize() {\n            this.gatherMeasures();\n        }\n    },\n    mounted: function mounted() {\n        this.gatherMeasures();\n    }\n};\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n//\n//\n\nvar _vuex = __webpack_require__(17);\n\nexports.default = {\n    props: {\n        region: {\n            type: Array,\n            required: true\n        }\n    },\n    computed: _extends({}, (0, _vuex.mapGetters)(['beatsPerBar']), {\n        bars: function bars() {\n            var barsInView = (this.region[1] - this.region[0]) / this.beatsPerBar;\n            var min = Math.floor(this.region[0] / this.beatsPerBar);\n            var max = Math.ceil(this.region[1] / this.beatsPerBar);\n            var bars = [];\n            for (var i = min; i <= max; i++) {\n                bars.push({\n                    left: 100 * i / barsInView + '%',\n                    value: i\n                });\n            }\n            return bars;\n        },\n        transform: function transform() {\n            var offscreenRatio = this.region[0] / (this.region[1] - this.region[0]);\n            return 'translate(' + -offscreenRatio * 100 + '%, 0)';\n        }\n    })\n};\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n\nvar _vuex = __webpack_require__(17);\n\nexports.default = {\n    props: {\n        clip: {\n            type: Object,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        }\n    },\n    computed: _extends({}, (0, _vuex.mapGetters)(['secondsToBeats']), {\n        style: function style() {\n            var _region = _slicedToArray(this.region, 2),\n                startBeat = _region[0],\n                endBeat = _region[1];\n\n            var regionLength = endBeat - startBeat;\n\n            var clip = this.clip;\n            var offsetBeatStart = clip.beat - startBeat;\n            var offsetBeatLength = this.secondsToBeats(clip.duration);\n            return {\n                left: offsetBeatStart / regionLength * 100 + '%',\n                width: offsetBeatLength / regionLength * 100 + '%'\n            };\n        }\n    })\n};\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _vuex = __webpack_require__(17);\n\nvar _notes = __webpack_require__(69);\n\nvar _util = __webpack_require__(149);\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    render: function render() {\n        return null;\n    },\n    data: function data() {\n        return {\n            octave: 5,\n            keyboardState: {}\n        };\n    },\n\n    computed: {\n        inputId: function inputId() {\n            return '_KEYBOARD_' + this._uid;\n        },\n        playingNotes: function playingNotes() {\n            var _this = this;\n\n            var oct = this.octave * 12;\n            return Object.keys(this.keyboardState).filter(function (k) {\n                return !!_this.keyboardState[k];\n            }).map(function (k) {\n                return _notes.keyToNote[k];\n            }).filter(_util.isDef).map(function (n) {\n                return n + oct;\n            }).filter(function (n) {\n                return n < 128 && n >= 0;\n            });\n        }\n    },\n    docEvents: {\n        keydown: function keydown(event) {\n            if (event.shiftKey || event.altKey || event.metaKey) return;\n\n            var key = event.key.toLowerCase();\n            switch (key) {\n                case 'z':\n                    this.octave = Math.max(0, this.octave - 1);\n                    break;\n                case 'x':\n                    this.octave = Math.min(10, this.octave + 1);\n                    break;\n                default:\n                    this.$set(this.keyboardState, key, true);\n                    break;\n            }\n        },\n        keyup: function keyup() {\n            var key = event.key.toLowerCase();\n            switch (key) {\n                case 'z':\n                case 'x':\n                    break;\n                default:\n                    this.$set(this.keyboardState, key, false);\n            }\n        }\n    },\n    watch: {\n        playingNotes: function playingNotes(newNotes, oldNotes) {\n            var _this2 = this;\n\n            var addedNotes = _ramda2.default.difference(newNotes, oldNotes);\n            var removedNotes = _ramda2.default.difference(oldNotes, newNotes);\n            addedNotes.forEach(function (n) {\n                _this2.midiNoteon({ inputId: _this2.inputId, noteNumber: n, velocity: 127 });\n            });\n            removedNotes.forEach(function (n) {\n                _this2.midiNoteoff({ inputId: _this2.inputId, noteNumber: n });\n            });\n        }\n    },\n    methods: _extends({}, (0, _vuex.mapActions)(['midiNoteon', 'midiNoteoff', 'midiConnectVirtualInput', 'midiDisconnectVirtualInput'])),\n    mounted: function mounted() {\n        this.midiConnectVirtualInput({ id: this.inputId, name: 'Keyboard' });\n    },\n    destroy: function destroy() {\n        this.midiDisconnectVirtualInput({ id: this.inputId });\n    }\n};\n\n/***/ }),\n/* 133 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    props: {\n        value: {\n            required: true,\n            type: Number\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        sensitivity: {\n            type: Number,\n            default: 10\n        },\n        min: {\n            type: Number,\n            default: 0\n        },\n        max: {\n            type: Number,\n            default: 100\n        }\n    },\n    data: function data() {\n        return {\n            editing: false,\n            internalValue: 0,\n            accumulator: 0\n        };\n    },\n\n    computed: {\n        numDecimals: function numDecimals() {\n            return (this.step.toString().split('.')[1] || '').length;\n        },\n        formattedValue: function formattedValue() {\n            return this.value.toFixed(this.numDecimals);\n        }\n    },\n    methods: {\n        handleWheel: function handleWheel(e) {\n            this.accumulator += e.deltaY;\n            var scale = 10;\n            var scaledValue = this.accumulator / this.sensitivity;\n            var valueChange = scaledValue > 0 ? Math.floor(scaledValue) : Math.ceil(scaledValue);\n            if (valueChange !== 0) {\n                this.accumulator -= Math.round(valueChange * this.sensitivity);\n                var newVal = Math.round(this.value / this.step + valueChange) * this.step;\n                var boundVal = Math.max(this.min, Math.min(this.max, newVal));\n                this.$emit('update', boundVal);\n            }\n        },\n        applyEdit: function applyEdit() {\n            this.editing = false;\n            var newVal = Math.round(parseFloat(this.internalValue) / this.step) * this.step;\n            var boundVal = Math.max(this.min, Math.min(this.max, newVal));\n            this.$emit('update', boundVal);\n        },\n        startEdit: function startEdit() {\n            this.editing = true;\n            this.internalValue = this.formattedValue;\n        },\n        cancelEdit: function cancelEdit() {\n            this.editing = false;\n        }\n    }\n}; //\n//\n//\n//\n//\n//\n//\n//\n\n/***/ }),\n/* 134 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar _vuex = __webpack_require__(17);\n\nvar _NumberSlider = __webpack_require__(163);\n\nvar _NumberSlider2 = _interopRequireDefault(_NumberSlider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    components: {\n        NumberSlider: _NumberSlider2.default\n    },\n    data: function data() {\n        return {\n            elWidth: 0,\n            caret: 0,\n            showBeats: 50\n        };\n    },\n\n    computed: _extends({}, (0, _vuex.mapGetters)(['tempo', 'metre'])),\n    methods: _extends({}, (0, _vuex.mapActions)(['updateTempo', 'updateMetre']))\n};\n\n/***/ }),\n/* 135 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n//\n//\n\nvar _vuex = __webpack_require__(17);\n\nvar _Clip = __webpack_require__(161);\n\nvar _Clip2 = _interopRequireDefault(_Clip);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    components: {\n        Clip: _Clip2.default\n    },\n    computed: _extends({}, (0, _vuex.mapGetters)(['secondsToBeats']), {\n        clipsInRegion: function clipsInRegion() {\n            var secondsToBeats = this.secondsToBeats;\n\n            var _region = _slicedToArray(this.region, 2),\n                startBeat = _region[0],\n                endBeat = _region[1];\n\n            var clipInRegion = function clipInRegion(clip) {\n                return clip.beat < endBeat && clip.beat + secondsToBeats(clip.duration) > startBeat;\n            };\n\n            return this.tape.clips.filter(clipInRegion);\n        }\n    }),\n    props: {\n        tape: {\n            type: Object,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        }\n    }\n};\n\n/***/ }),\n/* 136 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); //\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar _Tape = __webpack_require__(71);\n\nvar _Tape2 = _interopRequireDefault(_Tape);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    components: {\n        Tape: _Tape2.default\n    },\n    props: {\n        tapes: {\n            type: Array,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        },\n        totalBeats: {\n            type: Number,\n            required: true\n        }\n    },\n    methods: {\n        handleWheel: function handleWheel(e) {\n            var bounds = this.$el.getBoundingClientRect();\n            var elWidth = bounds.right - bounds.left;\n\n            var _region = _slicedToArray(this.region, 2),\n                regionStart = _region[0],\n                regionEnd = _region[1];\n\n            var regionLen = regionEnd - regionStart;\n\n            var moveX = e.deltaX * regionLen / elWidth;\n\n            var newStart = Math.max(0, Math.min(this.totalBeats - regionLen, regionStart + moveX));\n\n            this.$emit('updateRegion', [newStart, newStart + regionLen]);\n        }\n    }\n};\n\n/***/ }),\n/* 137 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar _vuex = __webpack_require__(17);\n\nvar _Tape = __webpack_require__(71);\n\nvar _Tape2 = _interopRequireDefault(_Tape);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    components: {\n        Tape: _Tape2.default\n    },\n    props: {\n        totalBeats: {\n            type: Number,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        },\n        tapes: {\n            type: Array,\n            required: true\n        }\n    },\n    computed: _extends({}, (0, _vuex.mapGetters)(['secondsToBeats']), {\n        windowStyle: function windowStyle() {\n            var start = this.region[0];\n            var length = this.region[1] - start;\n            return {\n                left: 100 * start / this.totalBeats + '%',\n                width: 100 * length / this.totalBeats + '%'\n            };\n        }\n    }),\n    mounted: function mounted() {\n        this._dragLast = null;\n    },\n\n    docEvents: {\n        mouseup: function mouseup(e) {\n            if (this._dragLast !== null) {\n                e.preventDefault();\n                this.handleUp(e);\n            }\n        },\n        mousemove: function mousemove(e) {\n            if (this._dragLast !== null) {\n                e.preventDefault();\n                this.handleDrag(e);\n            }\n        }\n    },\n    methods: {\n        handleDown: function handleDown(e) {\n            this._dragLast = e.pageX;\n        },\n        handleUp: function handleUp(e) {\n            this._dragLast = null;\n        },\n        handleDrag: function handleDrag(e) {\n            var delta = e.pageX - this._dragLast;\n            this._dragLast = e.pageX;\n\n            var bounds = this.$el.getBoundingClientRect();\n            var elWidth = bounds.right - bounds.left;\n            var moveX = delta * this.totalBeats / elWidth;\n\n            var width = this.region[1] - this.region[0];\n            var start = Math.min(this.totalBeats - width, Math.max(0, this.region[0] + moveX));\n\n            this.$emit('updateRegion', [start, start + width]);\n        },\n        handleWheel: function handleWheel(e) {\n            var bounds = this.$el.getBoundingClientRect();\n            var elWidth = bounds.right - bounds.left;\n\n            var moveX = -e.deltaX * this.totalBeats / elWidth;\n\n            var adjDeltaY = e.deltaY > 0 ? Math.max(0, e.deltaY - 2) : Math.min(0, e.deltaY + 2);\n            var zoomY = Math.pow(1.05, adjDeltaY);\n            var regionStart = this.region[0];\n            var regionEnd = this.region[1];\n\n            var regionMid = (regionStart + regionEnd) / 2;\n            var regionLen = regionEnd - regionStart;\n\n            var newLen = Math.min(Math.max(1, regionLen * zoomY), this.totalBeats);\n            var lenShift = regionLen - newLen;\n\n            var newStart = Math.min(this.totalBeats - newLen, Math.max(0, regionStart + moveX + lenShift / 2));\n\n            this.$emit('updateRegion', [newStart, newStart + newLen]);\n        },\n        clipStyle: function clipStyle(clip) {\n            var total = this.totalBeats;\n            var beatStart = clip.beat;\n            var beatWidth = this.secondsToBeats(clip.duration);\n            return {\n                left: 100 * beatStart / total + '%',\n                width: 100 * beatWidth / total + '%'\n            };\n        }\n    }\n};\n\n/***/ }),\n/* 138 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _webmidi = __webpack_require__(376);\n\nvar _webmidi2 = _interopRequireDefault(_webmidi);\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nvar _drivers = __webpack_require__(141);\n\nvar _drivers2 = _interopRequireDefault(_drivers);\n\nvar _store = __webpack_require__(31);\n\nvar _store2 = _interopRequireDefault(_store);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.webmidi = _webmidi2.default;\n\nvar handleInput = function handleInput(i) {\n    var driver = _drivers2.default.find(function (d) {\n        return d.type === 'input' && d.match(i);\n    });\n    if (driver) driver.init(i);\n\n    i.addListener('');\n};\n\nvar handleOutput = function handleOutput(o) {\n    var driver = _drivers2.default.find(function (d) {\n        return d.type === 'output' && d.match(o);\n    });\n    if (driver) driver.init(o);\n};\n\nvar updateStore = function updateStore() {\n    var outputs = _webmidi2.default.outputs.map(_ramda2.default.prop('id'));\n    var inputs = _webmidi2.default.inputs.map(_ramda2.default.prop('id'));\n    _store2.default.dispatch('midiUpdateDevices', { inputs: inputs, outputs: outputs });\n};\n\n_webmidi2.default.enable(function () {\n    _webmidi2.default.outputs.forEach(handleOutput);\n    _webmidi2.default.inputs.forEach(handleInput);\n    updateStore();\n\n    _webmidi2.default.addListener('connected', function (e) {\n        if (e.input) handleInput(e.input);\n        if (e.output) handleOutput(e.output);\n        updateStore();\n    });\n    _webmidi2.default.addListener('disconnected', function (e) {\n        updateStore();\n    });\n});\n\nexports.default = {\n    getOutput: function getOutput(id) {\n        return _webmidi2.default.outputs.find(function (o) {\n            return o.id === id;\n        });\n    },\n    getInput: function getInput(id) {\n        return _webmidi2.default.inputs.find(function (i) {\n            return i.id === id;\n        });\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdWRpby9NaWRpQ3R4LmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIndlYm1pZGkiLCJoYW5kbGVJbnB1dCIsImRyaXZlciIsImZpbmQiLCJkIiwidHlwZSIsIm1hdGNoIiwiaSIsImluaXQiLCJhZGRMaXN0ZW5lciIsImhhbmRsZU91dHB1dCIsIm8iLCJ1cGRhdGVTdG9yZSIsIm91dHB1dHMiLCJtYXAiLCJwcm9wIiwiaW5wdXRzIiwiZGlzcGF0Y2giLCJlbmFibGUiLCJmb3JFYWNoIiwiZSIsImlucHV0Iiwib3V0cHV0IiwiZ2V0T3V0cHV0IiwiaWQiLCJnZXRJbnB1dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBQSxPQUFPQyxPQUFQOztBQUVBLElBQU1DLGNBQWMsU0FBZEEsV0FBYyxJQUFLO0FBQ3JCLFFBQU1DLFNBQVMsa0JBQVFDLElBQVIsQ0FBYTtBQUFBLGVBQUtDLEVBQUVDLElBQUYsS0FBVyxPQUFYLElBQXNCRCxFQUFFRSxLQUFGLENBQVFDLENBQVIsQ0FBM0I7QUFBQSxLQUFiLENBQWY7QUFDQSxRQUFJTCxNQUFKLEVBQVlBLE9BQU9NLElBQVAsQ0FBWUQsQ0FBWjs7QUFFWkEsTUFBRUUsV0FBRixDQUFjLEVBQWQ7QUFDSCxDQUxEOztBQU9BLElBQU1DLGVBQWUsU0FBZkEsWUFBZSxJQUFLO0FBQ3RCLFFBQU1SLFNBQVMsa0JBQVFDLElBQVIsQ0FBYTtBQUFBLGVBQUtDLEVBQUVDLElBQUYsS0FBVyxRQUFYLElBQXVCRCxFQUFFRSxLQUFGLENBQVFLLENBQVIsQ0FBNUI7QUFBQSxLQUFiLENBQWY7QUFDQSxRQUFJVCxNQUFKLEVBQVlBLE9BQU9NLElBQVAsQ0FBWUcsQ0FBWjtBQUNmLENBSEQ7O0FBS0EsSUFBTUMsY0FBYyxTQUFkQSxXQUFjLEdBQU07QUFDdEIsUUFBTUMsVUFBVSxrQkFBUUEsT0FBUixDQUFnQkMsR0FBaEIsQ0FBb0IsZ0JBQUVDLElBQUYsQ0FBTyxJQUFQLENBQXBCLENBQWhCO0FBQ0EsUUFBTUMsU0FBUyxrQkFBUUEsTUFBUixDQUFlRixHQUFmLENBQW1CLGdCQUFFQyxJQUFGLENBQU8sSUFBUCxDQUFuQixDQUFmO0FBQ0Esb0JBQU1FLFFBQU4sQ0FBZSxtQkFBZixFQUFvQyxFQUFDRCxjQUFELEVBQVNILGdCQUFULEVBQXBDO0FBQ0gsQ0FKRDs7QUFNQSxrQkFBUUssTUFBUixDQUFlLFlBQU07QUFDakIsc0JBQVFMLE9BQVIsQ0FBZ0JNLE9BQWhCLENBQXdCVCxZQUF4QjtBQUNBLHNCQUFRTSxNQUFSLENBQWVHLE9BQWYsQ0FBdUJsQixXQUF2QjtBQUNBVzs7QUFFQSxzQkFBUUgsV0FBUixDQUFvQixXQUFwQixFQUFpQyxVQUFDVyxDQUFELEVBQU87QUFDcEMsWUFBSUEsRUFBRUMsS0FBTixFQUFhcEIsWUFBWW1CLEVBQUVDLEtBQWQ7QUFDYixZQUFJRCxFQUFFRSxNQUFOLEVBQWNaLGFBQWFVLEVBQUVFLE1BQWY7QUFDZFY7QUFDSCxLQUpEO0FBS0Esc0JBQVFILFdBQVIsQ0FBb0IsY0FBcEIsRUFBb0MsVUFBQ1csQ0FBRCxFQUFPO0FBQ3ZDUjtBQUNILEtBRkQ7QUFHSCxDQWJEOztrQkFlZTtBQUNYVyxlQUFXLG1CQUFDQyxFQUFEO0FBQUEsZUFBUSxrQkFBUVgsT0FBUixDQUFnQlYsSUFBaEIsQ0FBcUI7QUFBQSxtQkFBS1EsRUFBRWEsRUFBRixLQUFTQSxFQUFkO0FBQUEsU0FBckIsQ0FBUjtBQUFBLEtBREE7QUFFWEMsY0FBVSxrQkFBQ0QsRUFBRDtBQUFBLGVBQVEsa0JBQVFSLE1BQVIsQ0FBZWIsSUFBZixDQUFvQjtBQUFBLG1CQUFLSSxFQUFFaUIsRUFBRixLQUFTQSxFQUFkO0FBQUEsU0FBcEIsQ0FBUjtBQUFBO0FBRkMsQyIsImZpbGUiOiJNaWRpQ3R4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9mcml6aS9Qcm9qZWN0cy9vcC13ZWIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2VibWlkaSBmcm9tICd3ZWJtaWRpJ1xuaW1wb3J0IFIgZnJvbSAncmFtZGEnXG5cbmltcG9ydCBkcml2ZXJzIGZyb20gJy4uL2RyaXZlcnMnXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnXG5cbndpbmRvdy53ZWJtaWRpID0gd2VibWlkaVxuXG5jb25zdCBoYW5kbGVJbnB1dCA9IGkgPT4ge1xuICAgIGNvbnN0IGRyaXZlciA9IGRyaXZlcnMuZmluZChkID0+IGQudHlwZSA9PT0gJ2lucHV0JyAmJiBkLm1hdGNoKGkpKVxuICAgIGlmIChkcml2ZXIpIGRyaXZlci5pbml0KGkpXG5cbiAgICBpLmFkZExpc3RlbmVyKCcnKVxufVxuXG5jb25zdCBoYW5kbGVPdXRwdXQgPSBvID0+IHtcbiAgICBjb25zdCBkcml2ZXIgPSBkcml2ZXJzLmZpbmQoZCA9PiBkLnR5cGUgPT09ICdvdXRwdXQnICYmIGQubWF0Y2gobykpXG4gICAgaWYgKGRyaXZlcikgZHJpdmVyLmluaXQobylcbn1cblxuY29uc3QgdXBkYXRlU3RvcmUgPSAoKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0cyA9IHdlYm1pZGkub3V0cHV0cy5tYXAoUi5wcm9wKCdpZCcpKVxuICAgIGNvbnN0IGlucHV0cyA9IHdlYm1pZGkuaW5wdXRzLm1hcChSLnByb3AoJ2lkJykpXG4gICAgc3RvcmUuZGlzcGF0Y2goJ21pZGlVcGRhdGVEZXZpY2VzJywge2lucHV0cywgb3V0cHV0c30pXG59XG5cbndlYm1pZGkuZW5hYmxlKCgpID0+IHtcbiAgICB3ZWJtaWRpLm91dHB1dHMuZm9yRWFjaChoYW5kbGVPdXRwdXQpXG4gICAgd2VibWlkaS5pbnB1dHMuZm9yRWFjaChoYW5kbGVJbnB1dClcbiAgICB1cGRhdGVTdG9yZSgpXG5cbiAgICB3ZWJtaWRpLmFkZExpc3RlbmVyKCdjb25uZWN0ZWQnLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5pbnB1dCkgaGFuZGxlSW5wdXQoZS5pbnB1dClcbiAgICAgICAgaWYgKGUub3V0cHV0KSBoYW5kbGVPdXRwdXQoZS5vdXRwdXQpXG4gICAgICAgIHVwZGF0ZVN0b3JlKClcbiAgICB9KVxuICAgIHdlYm1pZGkuYWRkTGlzdGVuZXIoJ2Rpc2Nvbm5lY3RlZCcsIChlKSA9PiB7XG4gICAgICAgIHVwZGF0ZVN0b3JlKClcbiAgICB9KVxufSlcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldE91dHB1dDogKGlkKSA9PiB3ZWJtaWRpLm91dHB1dHMuZmluZChvID0+IG8uaWQgPT09IGlkKSxcbiAgICBnZXRJbnB1dDogKGlkKSA9PiB3ZWJtaWRpLmlucHV0cy5maW5kKGkgPT4gaS5pZCA9PT0gaWQpXG59XG4iXX0=\n\n/***/ }),\n/* 139 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _store = __webpack_require__(31);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _tone = __webpack_require__(375);\n\nvar _tone2 = _interopRequireDefault(_tone);\n\nvar _notes = __webpack_require__(69);\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar recordClip = '';\n\nvar clipsBackingStore = {};\n\nvar synth = new _tone2.default.PolySynth(4, _tone2.default.Synth).toMaster();\n\n_store2.default.watch(function (_, g) {\n    return g.allActiveNotes;\n}, function (notes, oldNotes) {\n    var release = _ramda2.default.difference(_ramda2.default.pluck('number', oldNotes), _ramda2.default.pluck('number', notes));\n\n    notes.forEach(function (note) {\n        var oldNote = oldNotes.find(_ramda2.default.propEq('number', note.number));\n        if (oldNote && oldNote.velocity !== note.velocity) {\n            synth.triggerRelease((0, _notes.noteFrequency)(number));\n            synth.triggerAttack((0, _notes.noteFrequency)(note.number), null, note.velocity / 127);\n        }\n        if (!oldNote) {\n            synth.triggerAttack((0, _notes.noteFrequency)(note.number), null, note.velocity / 127);\n        }\n    });\n    release.forEach(function (n) {\n        synth.triggerRelease((0, _notes.noteFrequency)(n));\n    });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdWRpby9hdWRpb0N0eC5qcyJdLCJuYW1lcyI6WyJyZWNvcmRDbGlwIiwiY2xpcHNCYWNraW5nU3RvcmUiLCJzeW50aCIsIlBvbHlTeW50aCIsIlN5bnRoIiwidG9NYXN0ZXIiLCJ3YXRjaCIsIl8iLCJnIiwiYWxsQWN0aXZlTm90ZXMiLCJub3RlcyIsIm9sZE5vdGVzIiwicmVsZWFzZSIsImRpZmZlcmVuY2UiLCJwbHVjayIsImZvckVhY2giLCJvbGROb3RlIiwiZmluZCIsInByb3BFcSIsIm5vdGUiLCJudW1iZXIiLCJ2ZWxvY2l0eSIsInRyaWdnZXJSZWxlYXNlIiwidHJpZ2dlckF0dGFjayIsIm4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxhQUFhLEVBQW5COztBQUVBLElBQU1DLG9CQUFvQixFQUExQjs7QUFJQSxJQUFJQyxRQUFRLElBQUksZUFBS0MsU0FBVCxDQUFtQixDQUFuQixFQUFzQixlQUFLQyxLQUEzQixFQUFrQ0MsUUFBbEMsRUFBWjs7QUFHQSxnQkFBTUMsS0FBTixDQUFZLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVBLEVBQUVDLGNBQVo7QUFBQSxDQUFaLEVBQXdDLFVBQUNDLEtBQUQsRUFBUUMsUUFBUixFQUFxQjtBQUN6RCxRQUFNQyxVQUFVLGdCQUFFQyxVQUFGLENBQWEsZ0JBQUVDLEtBQUYsQ0FBUSxRQUFSLEVBQWtCSCxRQUFsQixDQUFiLEVBQTBDLGdCQUFFRyxLQUFGLENBQVEsUUFBUixFQUFrQkosS0FBbEIsQ0FBMUMsQ0FBaEI7O0FBRUFBLFVBQU1LLE9BQU4sQ0FBYyxnQkFBUTtBQUNsQixZQUFNQyxVQUFVTCxTQUFTTSxJQUFULENBQWMsZ0JBQUVDLE1BQUYsQ0FBUyxRQUFULEVBQW1CQyxLQUFLQyxNQUF4QixDQUFkLENBQWhCO0FBQ0EsWUFBSUosV0FBV0EsUUFBUUssUUFBUixLQUFxQkYsS0FBS0UsUUFBekMsRUFBbUQ7QUFDL0NuQixrQkFBTW9CLGNBQU4sQ0FBcUIsMEJBQWNGLE1BQWQsQ0FBckI7QUFDQWxCLGtCQUFNcUIsYUFBTixDQUFvQiwwQkFBY0osS0FBS0MsTUFBbkIsQ0FBcEIsRUFBZ0QsSUFBaEQsRUFBc0RELEtBQUtFLFFBQUwsR0FBZ0IsR0FBdEU7QUFDSDtBQUNELFlBQUksQ0FBQ0wsT0FBTCxFQUFjO0FBQ1ZkLGtCQUFNcUIsYUFBTixDQUFvQiwwQkFBY0osS0FBS0MsTUFBbkIsQ0FBcEIsRUFBZ0QsSUFBaEQsRUFBc0RELEtBQUtFLFFBQUwsR0FBZ0IsR0FBdEU7QUFDSDtBQUNKLEtBVEQ7QUFVQVQsWUFBUUcsT0FBUixDQUFnQixVQUFDUyxDQUFELEVBQU87QUFDbkJ0QixjQUFNb0IsY0FBTixDQUFxQiwwQkFBY0UsQ0FBZCxDQUFyQjtBQUNILEtBRkQ7QUFHSCxDQWhCRCIsImZpbGUiOiJhdWRpb0N0eC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0b3JlIGZyb20gJy4uL3N0b3JlJ1xuaW1wb3J0IFRvbmUgZnJvbSAndG9uZSdcbmltcG9ydCB7bm90ZUZyZXF1ZW5jeX0gZnJvbSAnLi4vbm90ZXMnXG5pbXBvcnQgUiBmcm9tICdyYW1kYSdcblxuY29uc3QgcmVjb3JkQ2xpcCA9ICcnXG5cbmNvbnN0IGNsaXBzQmFja2luZ1N0b3JlID0ge1xuXG59XG5cbnZhciBzeW50aCA9IG5ldyBUb25lLlBvbHlTeW50aCg0LCBUb25lLlN5bnRoKS50b01hc3RlcigpO1xuXG5cbnN0b3JlLndhdGNoKChfLCBnKSA9PiBnLmFsbEFjdGl2ZU5vdGVzLCAobm90ZXMsIG9sZE5vdGVzKSA9PiB7XG4gICAgY29uc3QgcmVsZWFzZSA9IFIuZGlmZmVyZW5jZShSLnBsdWNrKCdudW1iZXInLCBvbGROb3RlcyksIFIucGx1Y2soJ251bWJlcicsIG5vdGVzKSlcblxuICAgIG5vdGVzLmZvckVhY2gobm90ZSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZE5vdGUgPSBvbGROb3Rlcy5maW5kKFIucHJvcEVxKCdudW1iZXInLCBub3RlLm51bWJlcikpXG4gICAgICAgIGlmIChvbGROb3RlICYmIG9sZE5vdGUudmVsb2NpdHkgIT09IG5vdGUudmVsb2NpdHkpIHtcbiAgICAgICAgICAgIHN5bnRoLnRyaWdnZXJSZWxlYXNlKG5vdGVGcmVxdWVuY3kobnVtYmVyKSlcbiAgICAgICAgICAgIHN5bnRoLnRyaWdnZXJBdHRhY2sobm90ZUZyZXF1ZW5jeShub3RlLm51bWJlciksIG51bGwsIG5vdGUudmVsb2NpdHkgLyAxMjcpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvbGROb3RlKSB7XG4gICAgICAgICAgICBzeW50aC50cmlnZ2VyQXR0YWNrKG5vdGVGcmVxdWVuY3kobm90ZS5udW1iZXIpLCBudWxsLCBub3RlLnZlbG9jaXR5IC8gMTI3KVxuICAgICAgICB9XG4gICAgfSlcbiAgICByZWxlYXNlLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgc3ludGgudHJpZ2dlclJlbGVhc2Uobm90ZUZyZXF1ZW5jeShuKSlcbiAgICB9KVxufSlcbiJdfQ==\n\n/***/ }),\n/* 140 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    type: 'output',\n    match: function match(e) {\n        return e.name.indexOf('Launchpad') >= 0;\n    },\n    init: function init(e) {\n        e.sendControlChange(0, 0);\n        e.sendControlChange(0, 2);\n        this.input = e;\n\n        return {};\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9kcml2ZXJzL0xhdW5jaHBhZE91dHB1dC5qcyJdLCJuYW1lcyI6WyJ0eXBlIiwibWF0Y2giLCJlIiwibmFtZSIsImluZGV4T2YiLCJpbml0Iiwic2VuZENvbnRyb2xDaGFuZ2UiLCJpbnB1dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQWU7QUFDWEEsVUFBTSxRQURLO0FBRVhDLFNBRlcsaUJBRUpDLENBRkksRUFFRDtBQUNOLGVBQU9BLEVBQUVDLElBQUYsQ0FBT0MsT0FBUCxDQUFlLFdBQWYsS0FBK0IsQ0FBdEM7QUFDSCxLQUpVO0FBS1hDLFFBTFcsZ0JBS0xILENBTEssRUFLRjtBQUNMQSxVQUFFSSxpQkFBRixDQUFvQixDQUFwQixFQUF1QixDQUF2QjtBQUNBSixVQUFFSSxpQkFBRixDQUFvQixDQUFwQixFQUF1QixDQUF2QjtBQUNBLGFBQUtDLEtBQUwsR0FBYUwsQ0FBYjs7QUFFQSxlQUFPLEVBQVA7QUFHSDtBQWJVLEMiLCJmaWxlIjoiTGF1bmNocGFkT3V0cHV0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9mcml6aS9Qcm9qZWN0cy9vcC13ZWIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgdHlwZTogJ291dHB1dCcsXG4gICAgbWF0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGUubmFtZS5pbmRleE9mKCdMYXVuY2hwYWQnKSA+PSAwXG4gICAgfSxcbiAgICBpbml0IChlKSB7XG4gICAgICAgIGUuc2VuZENvbnRyb2xDaGFuZ2UoMCwgMClcbiAgICAgICAgZS5zZW5kQ29udHJvbENoYW5nZSgwLCAyKVxuICAgICAgICB0aGlzLmlucHV0ID0gZVxuXG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==\n\n/***/ }),\n/* 141 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _LaunchpadOutput = __webpack_require__(140);\n\nvar _LaunchpadOutput2 = _interopRequireDefault(_LaunchpadOutput);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = [_LaunchpadOutput2.default];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9kcml2ZXJzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7a0JBRWUsMkIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ZyaXppL1Byb2plY3RzL29wLXdlYiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMYXVuY2hwYWRPdXRwdXQgZnJvbSAnLi9MYXVuY2hwYWRPdXRwdXQnXG5cbmV4cG9ydCBkZWZhdWx0IFtMYXVuY2hwYWRPdXRwdXRdXG4iXX0=\n\n/***/ }),\n/* 142 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar beatsPerBar = exports.beatsPerBar = function beatsPerBar(metre) {\n    return 4 * metre[0] / metre[1];\n};\n\nvar barsPerMinute = exports.barsPerMinute = function barsPerMinute(tempo, metre) {\n    return tempo / beatsPerBar(metre);\n};\n\nvar secondsPerBar = exports.secondsPerBar = function secondsPerBar(tempo, metre) {\n    return 60 * beatsPerBar(metre) / tempo;\n};\n\nvar secondsPerBeat = exports.secondsPerBeat = function secondsPerBeat(tempo) {\n    return 60 / tempo;\n};\n\nvar secondsToBeats = exports.secondsToBeats = function secondsToBeats(seconds, tempo) {\n    return seconds * tempo / 60;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tZWFzdXJlcy5qcyJdLCJuYW1lcyI6WyJiZWF0c1BlckJhciIsIm1ldHJlIiwiYmFyc1Blck1pbnV0ZSIsInRlbXBvIiwic2Vjb25kc1BlckJhciIsInNlY29uZHNQZXJCZWF0Iiwic2Vjb25kc1RvQmVhdHMiLCJzZWNvbmRzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQU1BLG9DQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsS0FBRCxFQUFXO0FBQ2xDLFdBQU8sSUFBSUEsTUFBTSxDQUFOLENBQUosR0FBZUEsTUFBTSxDQUFOLENBQXRCO0FBQ0gsQ0FGTTs7QUFJQSxJQUFNQyx3Q0FBZ0IsU0FBaEJBLGFBQWdCLENBQUNDLEtBQUQsRUFBUUYsS0FBUixFQUFrQjtBQUMzQyxXQUFPRSxRQUFRSCxZQUFZQyxLQUFaLENBQWY7QUFDSCxDQUZNOztBQUlBLElBQU1HLHdDQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0QsS0FBRCxFQUFRRixLQUFSLEVBQWtCO0FBQzNDLFdBQU8sS0FBS0QsWUFBWUMsS0FBWixDQUFMLEdBQTBCRSxLQUFqQztBQUNILENBRk07O0FBSUEsSUFBTUUsMENBQWlCLFNBQWpCQSxjQUFpQixDQUFDRixLQUFELEVBQVc7QUFDckMsV0FBTyxLQUFLQSxLQUFaO0FBQ0gsQ0FGTTs7QUFJQSxJQUFNRywwQ0FBaUIsU0FBakJBLGNBQWlCLENBQUNDLE9BQUQsRUFBVUosS0FBVixFQUFvQjtBQUM5QyxXQUFPSSxVQUFVSixLQUFWLEdBQWtCLEVBQXpCO0FBQ0gsQ0FGTSIsImZpbGUiOiJtZWFzdXJlcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGJlYXRzUGVyQmFyID0gKG1ldHJlKSA9PiB7XG4gICAgcmV0dXJuIDQgKiBtZXRyZVswXSAvIG1ldHJlWzFdXG59XG5cbmV4cG9ydCBjb25zdCBiYXJzUGVyTWludXRlID0gKHRlbXBvLCBtZXRyZSkgPT4ge1xuICAgIHJldHVybiB0ZW1wbyAvIGJlYXRzUGVyQmFyKG1ldHJlKVxufVxuXG5leHBvcnQgY29uc3Qgc2Vjb25kc1BlckJhciA9ICh0ZW1wbywgbWV0cmUpID0+IHtcbiAgICByZXR1cm4gNjAgKiBiZWF0c1BlckJhcihtZXRyZSkgLyB0ZW1wb1xufVxuXG5leHBvcnQgY29uc3Qgc2Vjb25kc1BlckJlYXQgPSAodGVtcG8pID0+IHtcbiAgICByZXR1cm4gNjAgLyB0ZW1wb1xufVxuXG5leHBvcnQgY29uc3Qgc2Vjb25kc1RvQmVhdHMgPSAoc2Vjb25kcywgdGVtcG8pID0+IHtcbiAgICByZXR1cm4gc2Vjb25kcyAqIHRlbXBvIC8gNjBcbn1cbiJdfQ==\n\n/***/ }),\n/* 143 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _vue = __webpack_require__(23);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_vue2.default.mixin({\n    beforeCreate: function beforeCreate() {\n        var evs = this.$options.docEvents;\n        if (evs) {\n            this._boundDocEvents = [];\n            for (var eventName in evs) {\n                var bound = evs[eventName].bind(this);\n                this._boundDocEvents.push([eventName, bound]);\n                document.addEventListener(eventName, bound, false);\n            }\n        }\n    },\n    desroyed: function desroyed() {\n        if (this._boundDocEvents) {\n            this._boundDocEvents.forEach(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 2),\n                    eventName = _ref2[0],\n                    bound = _ref2[1];\n\n                document.removeEventListener(eventName, bound, false);\n            });\n        }\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9taXhpbnMvZG9jRXZlbnRzLmpzIl0sIm5hbWVzIjpbIm1peGluIiwiYmVmb3JlQ3JlYXRlIiwiZXZzIiwiJG9wdGlvbnMiLCJkb2NFdmVudHMiLCJfYm91bmREb2NFdmVudHMiLCJldmVudE5hbWUiLCJib3VuZCIsImJpbmQiLCJwdXNoIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGVzcm95ZWQiLCJmb3JFYWNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFFQSxjQUFJQSxLQUFKLENBQVU7QUFDTkMsZ0JBRE0sMEJBQ1U7QUFDWixZQUFNQyxNQUFNLEtBQUtDLFFBQUwsQ0FBY0MsU0FBMUI7QUFDQSxZQUFJRixHQUFKLEVBQVM7QUFDTCxpQkFBS0csZUFBTCxHQUF1QixFQUF2QjtBQUNBLGlCQUFLLElBQU1DLFNBQVgsSUFBd0JKLEdBQXhCLEVBQTZCO0FBQzFCLG9CQUFNSyxRQUFRTCxJQUFJSSxTQUFKLEVBQWVFLElBQWYsQ0FBb0IsSUFBcEIsQ0FBZDtBQUNBLHFCQUFLSCxlQUFMLENBQXFCSSxJQUFyQixDQUEwQixDQUFDSCxTQUFELEVBQVlDLEtBQVosQ0FBMUI7QUFDQUcseUJBQVNDLGdCQUFULENBQTBCTCxTQUExQixFQUFxQ0MsS0FBckMsRUFBNEMsS0FBNUM7QUFDSDtBQUNIO0FBQ0osS0FYSztBQVlOSyxZQVpNLHNCQVlNO0FBQ1IsWUFBSSxLQUFLUCxlQUFULEVBQTBCO0FBQ3RCLGlCQUFLQSxlQUFMLENBQXFCUSxPQUFyQixDQUE2QixnQkFBd0I7QUFBQTtBQUFBLG9CQUF0QlAsU0FBc0I7QUFBQSxvQkFBWEMsS0FBVzs7QUFDakRHLHlCQUFTSSxtQkFBVCxDQUE2QlIsU0FBN0IsRUFBd0NDLEtBQXhDLEVBQStDLEtBQS9DO0FBQ0gsYUFGRDtBQUdIO0FBQ0o7QUFsQkssQ0FBViIsImZpbGUiOiJkb2NFdmVudHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ZyaXppL1Byb2plY3RzL29wLXdlYiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG5WdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgICAgIGNvbnN0IGV2cyA9IHRoaXMuJG9wdGlvbnMuZG9jRXZlbnRzXG4gICAgICAgIGlmIChldnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kRG9jRXZlbnRzID0gW11cbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnROYW1lIGluIGV2cykge1xuICAgICAgICAgICAgICAgY29uc3QgYm91bmQgPSBldnNbZXZlbnROYW1lXS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICB0aGlzLl9ib3VuZERvY0V2ZW50cy5wdXNoKFtldmVudE5hbWUsIGJvdW5kXSlcbiAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBib3VuZCwgZmFsc2UpXG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVzcm95ZWQgKCkge1xuICAgICAgICBpZiAodGhpcy5fYm91bmREb2NFdmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kRG9jRXZlbnRzLmZvckVhY2goKFtldmVudE5hbWUsIGJvdW5kXSkgPT4ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBib3VuZCwgZmFsc2UpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxufSlcbiJdfQ==\n\n/***/ }),\n/* 144 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _vue = __webpack_require__(23);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_vue2.default.directive('focus', {\n  inserted: function inserted(el) {\n    el.focus();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9taXhpbnMvZm9jdXMuanMiXSwibmFtZXMiOlsiZGlyZWN0aXZlIiwiaW5zZXJ0ZWQiLCJlbCIsImZvY3VzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxjQUFJQSxTQUFKLENBQWMsT0FBZCxFQUF1QjtBQUNyQkMsWUFBVSxrQkFBVUMsRUFBVixFQUFjO0FBQ3RCQSxPQUFHQyxLQUFIO0FBQ0Q7QUFIb0IsQ0FBdkIiLCJmaWxlIjoiZm9jdXMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ZyaXppL1Byb2plY3RzL29wLXdlYiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG5WdWUuZGlyZWN0aXZlKCdmb2N1cycsIHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIChlbCkge1xuICAgIGVsLmZvY3VzKClcbiAgfVxufSlcbiJdfQ==\n\n/***/ }),\n/* 145 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(143);\n\n__webpack_require__(144);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9taXhpbnMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2RvY0V2ZW50cydcbmltcG9ydCAnLi9mb2N1cydcbiJdfQ==\n\n/***/ }),\n/* 146 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.midiNoteoff = exports.midiNoteon = exports.updateMetre = exports.updateTempo = exports.updateUiMeasures = exports.midiDisconnectVirtualInput = exports.midiConnectVirtualInput = exports.midiUpdateDevices = undefined;\n\nvar _mutations = __webpack_require__(70);\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getName = function getName(id) {\n    return _ramda2.default.pipe(_ramda2.default.find(_ramda2.default.propEq('id', id)), _ramda2.default.prop('name'));\n};\n\nvar midiUpdateDevices = exports.midiUpdateDevices = function midiUpdateDevices(_ref, _ref2) {\n    var commit = _ref.commit,\n        state = _ref.state;\n    var inputs = _ref2.inputs,\n        outputs = _ref2.outputs;\n\n    var oldIns = state.midi.inputs.filter(function (i) {\n        return i.virtual === false;\n    });\n    var oldOuts = state.midi.outputs.filter(function (i) {\n        return i.virtual === false;\n    });\n\n    var addedIns = _ramda2.default.difference(inputs, oldIns);\n    var removedIns = _ramda2.default.difference(oldIns, inputs);\n    var addedOuts = _ramda2.default.difference(outputs, oldOuts);\n    var removedOuts = _ramda2.default.difference(oldOuts, outputs);\n\n    removedIns.forEach(function (id) {\n        return commit(_mutations.types.MIDI_DISCONNECT_INPUT, { id: id });\n    });\n    removedOuts.forEach(function (id) {\n        return commit(_mutations.types.MIDI_DISCONNECT_OUTPUT, { id: id });\n    });\n\n    addedIns.forEach(function (id) {\n        return commit(_mutations.types.MIDI_CONNECT_INPUT, {\n            id: id,\n            name: getName(id)(inputs),\n            virtual: false\n        });\n    });\n\n    addedOuts.forEach(function (id) {\n        return commit(_mutations.types.MIDI_CONNECT_OUTPUT, {\n            id: id,\n            name: getName(id)(inputs),\n            virtual: false\n        });\n    });\n};\n\nvar midiConnectVirtualInput = exports.midiConnectVirtualInput = function midiConnectVirtualInput(_ref3, _ref4) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    var id = _ref4.id,\n        name = _ref4.name;\n\n    commit(_mutations.types.MIDI_CONNECT_INPUT, { id: id, name: name, virtual: true });\n};\n\nvar midiDisconnectVirtualInput = exports.midiDisconnectVirtualInput = function midiDisconnectVirtualInput(_ref5, _ref6) {\n    var commit = _ref5.commit,\n        state = _ref5.state;\n    var id = _ref6.id;\n\n    if (state.midi.inputs.find(function (i) {\n        return i.id === id && i.virtual === true;\n    })) {\n        commit(_mutations.types.MIDI_DISCONNECT_INPUT, { id: id });\n    }\n};\n\nvar updateUiMeasures = exports.updateUiMeasures = function updateUiMeasures(_ref7, newMeasures) {\n    var commit = _ref7.commit;\n\n    commit(_mutations.types.UPDATE_UI_MEASURES, newMeasures);\n};\n\nvar updateTempo = exports.updateTempo = function updateTempo(_ref8, tempo) {\n    var commit = _ref8.commit;\n\n    commit(_mutations.types.UPDATE_TEMPO, tempo);\n};\n\nvar updateMetre = exports.updateMetre = function updateMetre(_ref9, metre) {\n    var commit = _ref9.commit;\n\n    commit(_mutations.types.UPDATE_METRE, metre);\n};\n\nvar midiNoteon = exports.midiNoteon = function midiNoteon(_ref10, _ref11) {\n    var commit = _ref10.commit;\n    var inputId = _ref11.inputId,\n        noteNumber = _ref11.noteNumber,\n        velocity = _ref11.velocity;\n\n    commit(_mutations.types.MIDI_NOTE_SET, { inputId: inputId, noteNumber: noteNumber, velocity: velocity });\n};\n\nvar midiNoteoff = exports.midiNoteoff = function midiNoteoff(_ref12, _ref13) {\n    var commit = _ref12.commit;\n    var inputId = _ref13.inputId,\n        noteNumber = _ref13.noteNumber;\n\n    commit(_mutations.types.MIDI_NOTE_END, { inputId: inputId, noteNumber: noteNumber });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdG9yZS9hY3Rpb25zLmpzIl0sIm5hbWVzIjpbImdldE5hbWUiLCJwaXBlIiwiZmluZCIsInByb3BFcSIsImlkIiwicHJvcCIsIm1pZGlVcGRhdGVEZXZpY2VzIiwiY29tbWl0Iiwic3RhdGUiLCJpbnB1dHMiLCJvdXRwdXRzIiwib2xkSW5zIiwibWlkaSIsImZpbHRlciIsImkiLCJ2aXJ0dWFsIiwib2xkT3V0cyIsImFkZGVkSW5zIiwiZGlmZmVyZW5jZSIsInJlbW92ZWRJbnMiLCJhZGRlZE91dHMiLCJyZW1vdmVkT3V0cyIsImZvckVhY2giLCJNSURJX0RJU0NPTk5FQ1RfSU5QVVQiLCJNSURJX0RJU0NPTk5FQ1RfT1VUUFVUIiwiTUlESV9DT05ORUNUX0lOUFVUIiwibmFtZSIsIk1JRElfQ09OTkVDVF9PVVRQVVQiLCJtaWRpQ29ubmVjdFZpcnR1YWxJbnB1dCIsIm1pZGlEaXNjb25uZWN0VmlydHVhbElucHV0IiwidXBkYXRlVWlNZWFzdXJlcyIsIm5ld01lYXN1cmVzIiwiVVBEQVRFX1VJX01FQVNVUkVTIiwidXBkYXRlVGVtcG8iLCJ0ZW1wbyIsIlVQREFURV9URU1QTyIsInVwZGF0ZU1ldHJlIiwibWV0cmUiLCJVUERBVEVfTUVUUkUiLCJtaWRpTm90ZW9uIiwiaW5wdXRJZCIsIm5vdGVOdW1iZXIiLCJ2ZWxvY2l0eSIsIk1JRElfTk9URV9TRVQiLCJtaWRpTm90ZW9mZiIsIk1JRElfTk9URV9FTkQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsVUFBVSxTQUFWQSxPQUFVO0FBQUEsV0FBTSxnQkFBRUMsSUFBRixDQUNsQixnQkFBRUMsSUFBRixDQUFPLGdCQUFFQyxNQUFGLENBQVMsSUFBVCxFQUFlQyxFQUFmLENBQVAsQ0FEa0IsRUFFbEIsZ0JBQUVDLElBQUYsQ0FBTyxNQUFQLENBRmtCLENBQU47QUFBQSxDQUFoQjs7QUFLTyxJQUFNQyxnREFBb0IsU0FBcEJBLGlCQUFvQixjQUF3QztBQUFB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QUFJQSxJQUFNRSxvQ0FBYyxTQUFkQSxXQUFjLFFBQVdDLEtBQVgsRUFBcUI7QUFBQSxRQUFuQjNCLE1BQW1CLFNBQW5CQSxNQUFtQjs7QUFDNUNBLFdBQU8saUJBQU00QixZQUFiLEVBQTJCRCxLQUEzQjtBQUNILENBRk07O0FBSUEsSUFBTUUsb0NBQWMsU0FBZEEsV0FBYyxRQUFXQyxLQUFYLEVBQXFCO0FBQUEsUUFBbkI5QixNQUFtQixTQUFuQkEsTUFBbUI7O0FBQzVDQSxXQUFPLGlCQUFNK0IsWUFBYixFQUEyQkQsS0FBM0I7QUFDSCxDQUZNOztBQUlBLElBQU1FLGtDQUFhLFNBQWJBLFVBQWEsaUJBQStDO0FBQUEsUUFBN0NoQyxNQUE2QyxVQUE3Q0EsTUFBNkM7QUFBQSxRQUFuQ2lDLE9BQW1DLFVBQW5DQSxPQUFtQztBQUFBLFFBQTFCQyxVQUEwQixVQUExQkEsVUFBMEI7QUFBQSxRQUFkQyxRQUFjLFVBQWRBLFFBQWM7O0FBQ3JFbkMsV0FBTyxpQkFBTW9DLGFBQWIsRUFBNEIsRUFBQ0gsZ0JBQUQsRUFBVUMsc0JBQVYsRUFBc0JDLGtCQUF0QixFQUE1QjtBQUNILENBRk07O0FBSUEsSUFBTUUsb0NBQWMsU0FBZEEsV0FBYyxpQkFBcUM7QUFBQSxRQUFuQ3JDLE1BQW1DLFVBQW5DQSxNQUFtQztBQUFBLFFBQXpCaUMsT0FBeUIsVUFBekJBLE9BQXlCO0FBQUEsUUFBaEJDLFVBQWdCLFVBQWhCQSxVQUFnQjs7QUFDNURsQyxXQUFPLGlCQUFNc0MsYUFBYixFQUE0QixFQUFDTCxnQkFBRCxFQUFVQyxzQkFBVixFQUE1QjtBQUNILENBRk0iLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0eXBlc30gZnJvbSAnLi9tdXRhdGlvbnMnXG5pbXBvcnQgUiBmcm9tICdyYW1kYSdcblxuY29uc3QgZ2V0TmFtZSA9IGlkID0+IFIucGlwZShcbiAgICBSLmZpbmQoUi5wcm9wRXEoJ2lkJywgaWQpKSxcbiAgICBSLnByb3AoJ25hbWUnKVxuKVxuXG5leHBvcnQgY29uc3QgbWlkaVVwZGF0ZURldmljZXMgPSAoe2NvbW1pdCwgc3RhdGV9LCB7aW5wdXRzLCBvdXRwdXRzfSkgPT4ge1xuICAgIGNvbnN0IG9sZElucyA9IHN0YXRlLm1pZGkuaW5wdXRzLmZpbHRlcihpID0+IGkudmlydHVhbCA9PT0gZmFsc2UpXG4gICAgY29uc3Qgb2xkT3V0cyA9IHN0YXRlLm1pZGkub3V0cHV0cy5maWx0ZXIoaSA9PiBpLnZpcnR1YWwgPT09IGZhbHNlKVxuXG4gICAgY29uc3QgYWRkZWRJbnMgPSBSLmRpZmZlcmVuY2UoaW5wdXRzLCBvbGRJbnMpXG4gICAgY29uc3QgcmVtb3ZlZElucyA9IFIuZGlmZmVyZW5jZShvbGRJbnMsIGlucHV0cylcbiAgICBjb25zdCBhZGRlZE91dHMgPSBSLmRpZmZlcmVuY2Uob3V0cHV0cywgb2xkT3V0cylcbiAgICBjb25zdCByZW1vdmVkT3V0cyA9IFIuZGlmZmVyZW5jZShvbGRPdXRzLCBvdXRwdXRzKVxuXG4gICAgcmVtb3ZlZElucy5mb3JFYWNoKGlkID0+IGNvbW1pdCh0eXBlcy5NSURJX0RJU0NPTk5FQ1RfSU5QVVQsIHtpZH0pKVxuICAgIHJlbW92ZWRPdXRzLmZvckVhY2goaWQgPT4gY29tbWl0KHR5cGVzLk1JRElfRElTQ09OTkVDVF9PVVRQVVQsIHtpZH0pKVxuXG4gICAgYWRkZWRJbnMuZm9yRWFjaChpZCA9PiBjb21taXQodHlwZXMuTUlESV9DT05ORUNUX0lOUFVULCB7XG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lOiBnZXROYW1lKGlkKShpbnB1dHMpLFxuICAgICAgICB2aXJ0dWFsOiBmYWxzZVxuICAgIH0pKVxuXG4gICAgYWRkZWRPdXRzLmZvckVhY2goaWQgPT4gY29tbWl0KHR5cGVzLk1JRElfQ09OTkVDVF9PVVRQVVQsIHtcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWU6IGdldE5hbWUoaWQpKGlucHV0cyksXG4gICAgICAgIHZpcnR1YWw6IGZhbHNlXG4gICAgfSkpXG59XG5cbmV4cG9ydCBjb25zdCBtaWRpQ29ubmVjdFZpcnR1YWxJbnB1dCA9ICh7Y29tbWl0LCBzdGF0ZX0sIHtpZCwgbmFtZX0pID0+IHtcbiAgICBjb21taXQodHlwZXMuTUlESV9DT05ORUNUX0lOUFVULCB7aWQsIG5hbWUsIHZpcnR1YWw6IHRydWV9KVxufVxuXG5leHBvcnQgY29uc3QgbWlkaURpc2Nvbm5lY3RWaXJ0dWFsSW5wdXQgPSAoe2NvbW1pdCwgc3RhdGV9LCB7aWR9KSA9PiB7XG4gICAgaWYgKHN0YXRlLm1pZGkuaW5wdXRzLmZpbmQoaSA9PiBpLmlkID09PSBpZCAmJiBpLnZpcnR1YWwgPT09IHRydWUpKSB7XG4gICAgICAgIGNvbW1pdCh0eXBlcy5NSURJX0RJU0NPTk5FQ1RfSU5QVVQsIHtpZH0pXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlVWlNZWFzdXJlcyA9ICh7Y29tbWl0fSwgbmV3TWVhc3VyZXMpID0+IHtcbiAgICBjb21taXQodHlwZXMuVVBEQVRFX1VJX01FQVNVUkVTLCBuZXdNZWFzdXJlcylcbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVRlbXBvID0gKHtjb21taXR9LCB0ZW1wbykgPT4ge1xuICAgIGNvbW1pdCh0eXBlcy5VUERBVEVfVEVNUE8sIHRlbXBvKVxufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlTWV0cmUgPSAoe2NvbW1pdH0sIG1ldHJlKSA9PiB7XG4gICAgY29tbWl0KHR5cGVzLlVQREFURV9NRVRSRSwgbWV0cmUpXG59XG5cbmV4cG9ydCBjb25zdCBtaWRpTm90ZW9uID0gKHtjb21taXR9LCB7aW5wdXRJZCwgbm90ZU51bWJlciwgdmVsb2NpdHl9KSA9PiB7XG4gICAgY29tbWl0KHR5cGVzLk1JRElfTk9URV9TRVQsIHtpbnB1dElkLCBub3RlTnVtYmVyLCB2ZWxvY2l0eX0pXG59XG5cbmV4cG9ydCBjb25zdCBtaWRpTm90ZW9mZiA9ICh7Y29tbWl0fSwge2lucHV0SWQsIG5vdGVOdW1iZXJ9KSA9PiB7XG4gICAgY29tbWl0KHR5cGVzLk1JRElfTk9URV9FTkQsIHtpbnB1dElkLCBub3RlTnVtYmVyfSlcbn1cbiJdfQ==\n\n/***/ }),\n/* 147 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.allActiveNotes = exports.tempo = exports.metre = exports.beatsPerBar = exports.secondsToBeats = exports.uiMeasures = exports.tapes = undefined;\n\nvar _ramda = __webpack_require__(18);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nvar _measures = __webpack_require__(142);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar tapes = exports.tapes = function tapes(state) {\n    var clips = state.clips;\n    return _ramda2.default.map(_ramda2.default.evolve({\n        clips: _ramda2.default.map(_ramda2.default.pipe(_ramda2.default.propEq('id'), _ramda2.default.find(_ramda2.default.__, state.clips)))\n    }), state.tapes);\n};\n\nvar uiMeasures = exports.uiMeasures = function uiMeasures(state) {\n    var _state$ui = state.ui,\n        pixelsPerBeat = _state$ui.pixelsPerBeat,\n        panBeats = _state$ui.panBeats;\n\n\n    return {\n        pixelsPerBeat: pixelsPerBeat,\n        panBeats: panBeats\n    };\n};\n\nvar secondsToBeats = exports.secondsToBeats = function secondsToBeats(state) {\n    var metre = state.metre;\n    var tempo = state.tempo;\n    return function (seconds) {\n        return (0, _measures.secondsToBeats)(seconds, tempo, metre);\n    };\n};\n\nvar beatsPerBar = exports.beatsPerBar = function beatsPerBar(state) {\n    return (0, _measures.beatsPerBar)(state.metre);\n};\n\nvar metre = exports.metre = function metre(state) {\n    return state.metre;\n};\nvar tempo = exports.tempo = function tempo(state) {\n    return state.tempo;\n};\n\nvar allActiveNotes = exports.allActiveNotes = function allActiveNotes(state) {\n    return _ramda2.default.pipe(_ramda2.default.chain(_ramda2.default.prop('notes')), _ramda2.default.groupBy(_ramda2.default.prop('number')), _ramda2.default.map(_ramda2.default.reduce(_ramda2.default.maxBy(_ramda2.default.prop('velocity')), { velocity: -1 })), _ramda2.default.values, _ramda2.default.sortBy(_ramda2.default.prop('number')))(state.midi.inputs);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdG9yZS9nZXR0ZXJzLmpzIl0sIm5hbWVzIjpbInRhcGVzIiwic3RhdGUiLCJjbGlwcyIsIm1hcCIsImV2b2x2ZSIsInBpcGUiLCJwcm9wRXEiLCJmaW5kIiwiX18iLCJ1aU1lYXN1cmVzIiwidWkiLCJwaXhlbHNQZXJCZWF0IiwicGFuQmVhdHMiLCJzZWNvbmRzVG9CZWF0cyIsIm1ldHJlIiwidGVtcG8iLCJzZWNvbmRzIiwiYmVhdHNQZXJCYXIiLCJhbGxBY3RpdmVOb3RlcyIsImNoYWluIiwicHJvcCIsImdyb3VwQnkiLCJyZWR1Y2UiLCJtYXhCeSIsInZlbG9jaXR5IiwidmFsdWVzIiwic29ydEJ5IiwibWlkaSIsImlucHV0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUE7Ozs7QUFLTyxJQUFNQSx3QkFBUSxTQUFSQSxLQUFRLENBQUNDLEtBQUQsRUFBVztBQUM1QixRQUFNQyxRQUFRRCxNQUFNQyxLQUFwQjtBQUNBLFdBQU8sZ0JBQUVDLEdBQUYsQ0FDSCxnQkFBRUMsTUFBRixDQUFTO0FBQ0xGLGVBQU8sZ0JBQUVDLEdBQUYsQ0FDSCxnQkFBRUUsSUFBRixDQUNJLGdCQUFFQyxNQUFGLENBQVMsSUFBVCxDQURKLEVBRUksZ0JBQUVDLElBQUYsQ0FBTyxnQkFBRUMsRUFBVCxFQUFhUCxNQUFNQyxLQUFuQixDQUZKLENBREc7QUFERixLQUFULENBREcsRUFTSEQsTUFBTUQsS0FUSCxDQUFQO0FBV0gsQ0FiTTs7QUFlQSxJQUFNUyxrQ0FBYSxTQUFiQSxVQUFhLENBQUNSLEtBQUQsRUFBVztBQUFBLG9CQUk3QkEsTUFBTVMsRUFKdUI7QUFBQSxRQUU3QkMsYUFGNkIsYUFFN0JBLGFBRjZCO0FBQUEsUUFHN0JDLFFBSDZCLGFBRzdCQSxRQUg2Qjs7O0FBTWpDLFdBQU87QUFDSEQsb0NBREc7QUFFSEM7QUFGRyxLQUFQO0FBSUgsQ0FWTTs7QUFZQSxJQUFNQywwQ0FBaUIsU0FBakJBLGNBQWlCLFFBQVM7QUFDbkMsUUFBTUMsUUFBUWIsTUFBTWEsS0FBcEI7QUFDQSxRQUFNQyxRQUFRZCxNQUFNYyxLQUFwQjtBQUNBLFdBQU87QUFBQSxlQUFXLDhCQUFrQkMsT0FBbEIsRUFBMkJELEtBQTNCLEVBQWtDRCxLQUFsQyxDQUFYO0FBQUEsS0FBUDtBQUNILENBSk07O0FBTUEsSUFBTUcsb0NBQWMsU0FBZEEsV0FBYztBQUFBLFdBQVMsMkJBQWVoQixNQUFNYSxLQUFyQixDQUFUO0FBQUEsQ0FBcEI7O0FBRUEsSUFBTUEsd0JBQVEsU0FBUkEsS0FBUTtBQUFBLFdBQVNiLE1BQU1hLEtBQWY7QUFBQSxDQUFkO0FBQ0EsSUFBTUMsd0JBQVEsU0FBUkEsS0FBUTtBQUFBLFdBQVNkLE1BQU1jLEtBQWY7QUFBQSxDQUFkOztBQUVBLElBQU1HLDBDQUFpQixTQUFqQkEsY0FBaUIsUUFBUztBQUNuQyxXQUFPLGdCQUFFYixJQUFGLENBQ0gsZ0JBQUVjLEtBQUYsQ0FBUSxnQkFBRUMsSUFBRixDQUFPLE9BQVAsQ0FBUixDQURHLEVBRUgsZ0JBQUVDLE9BQUYsQ0FBVSxnQkFBRUQsSUFBRixDQUFPLFFBQVAsQ0FBVixDQUZHLEVBR0gsZ0JBQUVqQixHQUFGLENBQU0sZ0JBQUVtQixNQUFGLENBQVMsZ0JBQUVDLEtBQUYsQ0FBUSxnQkFBRUgsSUFBRixDQUFPLFVBQVAsQ0FBUixDQUFULEVBQXNDLEVBQUNJLFVBQVUsQ0FBQyxDQUFaLEVBQXRDLENBQU4sQ0FIRyxFQUlILGdCQUFFQyxNQUpDLEVBS0gsZ0JBQUVDLE1BQUYsQ0FBUyxnQkFBRU4sSUFBRixDQUFPLFFBQVAsQ0FBVCxDQUxHLEVBTUxuQixNQUFNMEIsSUFBTixDQUFXQyxNQU5OLENBQVA7QUFPSCxDQVJNIiwiZmlsZSI6ImdldHRlcnMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ZyaXppL1Byb2plY3RzL29wLXdlYiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSIGZyb20gJ3JhbWRhJ1xuXG5pbXBvcnQge1xuICAgIHNlY29uZHNUb0JlYXRzIGFzIHJhd1NlY29uZHNUb0JlYXRzLFxuICAgIGJlYXRzUGVyQmFyIGFzIHJhd0JlYXRzUGVyQmFyXG59IGZyb20gJy4uL21lYXN1cmVzJ1xuXG5leHBvcnQgY29uc3QgdGFwZXMgPSAoc3RhdGUpID0+IHtcbiAgICBjb25zdCBjbGlwcyA9IHN0YXRlLmNsaXBzXG4gICAgcmV0dXJuIFIubWFwKFxuICAgICAgICBSLmV2b2x2ZSh7XG4gICAgICAgICAgICBjbGlwczogUi5tYXAoXG4gICAgICAgICAgICAgICAgUi5waXBlKFxuICAgICAgICAgICAgICAgICAgICBSLnByb3BFcSgnaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgUi5maW5kKFIuX18sIHN0YXRlLmNsaXBzKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgfSksXG4gICAgICAgIHN0YXRlLnRhcGVzXG4gICAgKVxufVxuXG5leHBvcnQgY29uc3QgdWlNZWFzdXJlcyA9IChzdGF0ZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgcGl4ZWxzUGVyQmVhdCxcbiAgICAgICAgcGFuQmVhdHNcbiAgICB9ID0gc3RhdGUudWlcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBpeGVsc1BlckJlYXQsXG4gICAgICAgIHBhbkJlYXRzXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2Vjb25kc1RvQmVhdHMgPSBzdGF0ZSA9PiB7XG4gICAgY29uc3QgbWV0cmUgPSBzdGF0ZS5tZXRyZVxuICAgIGNvbnN0IHRlbXBvID0gc3RhdGUudGVtcG9cbiAgICByZXR1cm4gc2Vjb25kcyA9PiByYXdTZWNvbmRzVG9CZWF0cyhzZWNvbmRzLCB0ZW1wbywgbWV0cmUpXG59XG5cbmV4cG9ydCBjb25zdCBiZWF0c1BlckJhciA9IHN0YXRlID0+IHJhd0JlYXRzUGVyQmFyKHN0YXRlLm1ldHJlKVxuXG5leHBvcnQgY29uc3QgbWV0cmUgPSBzdGF0ZSA9PiBzdGF0ZS5tZXRyZVxuZXhwb3J0IGNvbnN0IHRlbXBvID0gc3RhdGUgPT4gc3RhdGUudGVtcG9cblxuZXhwb3J0IGNvbnN0IGFsbEFjdGl2ZU5vdGVzID0gc3RhdGUgPT4ge1xuICAgIHJldHVybiBSLnBpcGUoXG4gICAgICAgIFIuY2hhaW4oUi5wcm9wKCdub3RlcycpKSxcbiAgICAgICAgUi5ncm91cEJ5KFIucHJvcCgnbnVtYmVyJykpLFxuICAgICAgICBSLm1hcChSLnJlZHVjZShSLm1heEJ5KFIucHJvcCgndmVsb2NpdHknKSksIHt2ZWxvY2l0eTogLTF9KSksXG4gICAgICAgIFIudmFsdWVzLFxuICAgICAgICBSLnNvcnRCeShSLnByb3AoJ251bWJlcicpKVxuICAgICkoc3RhdGUubWlkaS5pbnB1dHMpXG59XG4iXX0=\n\n/***/ }),\n/* 148 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    ui: {\n        panBeats: 0,\n        pixelsPerBeat: 40,\n        cursorPosition: 0\n    },\n    tempo: 120,\n    metre: [4, 4],\n    playback: {\n        recording: false,\n        playTimestamp: null,\n        playOffset: 0\n    },\n    tapes: [{\n        id: '4F4F0BC1-9465-4786-8800-A575BB3D911A',\n        name: 'Tape 1',\n        clips: ['E133493E-6EF6-432D-9E05-5F08DEFD95C1', 'BFB8988D-9C1A-49E4-BDD8-1CE586ED4319']\n    }, {\n        id: '83658428-AF69-4867-94DC-E74D944313A7',\n        name: \"Tape 2\",\n        clips: ['8F3ABBD8-3BC6-4F32-ACDD-2FBC4E4A6133', '61B59978-08C6-4CC0-A118-B3965D156E71']\n    }],\n    clips: [{\n        id: 'E133493E-6EF6-432D-9E05-5F08DEFD95C1',\n        beat: 0, // start time in beats, float\n        duration: 0.5 // duration time in seconds, float\n    }, {\n        id: '8F3ABBD8-3BC6-4F32-ACDD-2FBC4E4A6133',\n        beat: 1,\n        duration: 0.5\n    }, {\n        id: 'BFB8988D-9C1A-49E4-BDD8-1CE586ED4319',\n        beat: 2,\n        duration: 0.5\n    }, {\n        id: '61B59978-08C6-4CC0-A118-B3965D156E71',\n        beat: 4,\n        duration: 0.5\n    }],\n    midi: {\n        inputs: [],\n        outputs: []\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdG9yZS9zdGF0ZS5qcyJdLCJuYW1lcyI6WyJ1aSIsInBhbkJlYXRzIiwicGl4ZWxzUGVyQmVhdCIsImN1cnNvclBvc2l0aW9uIiwidGVtcG8iLCJtZXRyZSIsInBsYXliYWNrIiwicmVjb3JkaW5nIiwicGxheVRpbWVzdGFtcCIsInBsYXlPZmZzZXQiLCJ0YXBlcyIsImlkIiwibmFtZSIsImNsaXBzIiwiYmVhdCIsImR1cmF0aW9uIiwibWlkaSIsImlucHV0cyIsIm91dHB1dHMiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUFlO0FBQ1hBLFFBQUk7QUFDQUMsa0JBQVUsQ0FEVjtBQUVBQyx1QkFBZSxFQUZmO0FBR0FDLHdCQUFnQjtBQUhoQixLQURPO0FBTVhDLFdBQU8sR0FOSTtBQU9YQyxXQUFPLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FQSTtBQVFYQyxjQUFVO0FBQ05DLG1CQUFXLEtBREw7QUFFTkMsdUJBQWUsSUFGVDtBQUdOQyxvQkFBWTtBQUhOLEtBUkM7QUFhWEMsV0FBTyxDQUFDO0FBQ0pDLFlBQUksc0NBREE7QUFFSkMsY0FBTSxRQUZGO0FBR0pDLGVBQU8sQ0FBQyxzQ0FBRCxFQUF5QyxzQ0FBekM7QUFISCxLQUFELEVBSUo7QUFDQ0YsWUFBSSxzQ0FETDtBQUVDQyxjQUFNLFFBRlA7QUFHQ0MsZUFBTyxDQUFDLHNDQUFELEVBQXlDLHNDQUF6QztBQUhSLEtBSkksQ0FiSTtBQXNCWEEsV0FBTyxDQUNIO0FBQ0lGLFlBQUksc0NBRFI7QUFFSUcsY0FBTSxDQUZWLEVBRWE7QUFDVEMsa0JBQVUsR0FIZCxDQUdrQjtBQUhsQixLQURHLEVBTUg7QUFDSUosWUFBSSxzQ0FEUjtBQUVJRyxjQUFNLENBRlY7QUFHSUMsa0JBQVU7QUFIZCxLQU5HLEVBV0g7QUFDSUosWUFBSSxzQ0FEUjtBQUVJRyxjQUFNLENBRlY7QUFHSUMsa0JBQVU7QUFIZCxLQVhHLEVBZ0JIO0FBQ0lKLFlBQUksc0NBRFI7QUFFSUcsY0FBTSxDQUZWO0FBR0lDLGtCQUFVO0FBSGQsS0FoQkcsQ0F0Qkk7QUE0Q1hDLFVBQU07QUFDRkMsZ0JBQVEsRUFETjtBQUVGQyxpQkFBUztBQUZQO0FBNUNLLEMiLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ZyaXppL1Byb2plY3RzL29wLXdlYiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICB1aToge1xuICAgICAgICBwYW5CZWF0czogMCxcbiAgICAgICAgcGl4ZWxzUGVyQmVhdDogNDAsXG4gICAgICAgIGN1cnNvclBvc2l0aW9uOiAwXG4gICAgfSxcbiAgICB0ZW1wbzogMTIwLFxuICAgIG1ldHJlOiBbNCwgNF0sXG4gICAgcGxheWJhY2s6IHtcbiAgICAgICAgcmVjb3JkaW5nOiBmYWxzZSxcbiAgICAgICAgcGxheVRpbWVzdGFtcDogbnVsbCxcbiAgICAgICAgcGxheU9mZnNldDogMFxuICAgIH0sXG4gICAgdGFwZXM6IFt7XG4gICAgICAgIGlkOiAnNEY0RjBCQzEtOTQ2NS00Nzg2LTg4MDAtQTU3NUJCM0Q5MTFBJyxcbiAgICAgICAgbmFtZTogJ1RhcGUgMScsXG4gICAgICAgIGNsaXBzOiBbJ0UxMzM0OTNFLTZFRjYtNDMyRC05RTA1LTVGMDhERUZEOTVDMScsICdCRkI4OTg4RC05QzFBLTQ5RTQtQkREOC0xQ0U1ODZFRDQzMTknXVxuICAgIH0sIHtcbiAgICAgICAgaWQ6ICc4MzY1ODQyOC1BRjY5LTQ4NjctOTREQy1FNzREOTQ0MzEzQTcnLFxuICAgICAgICBuYW1lOiBcIlRhcGUgMlwiLFxuICAgICAgICBjbGlwczogWyc4RjNBQkJEOC0zQkM2LTRGMzItQUNERC0yRkJDNEU0QTYxMzMnLCAnNjFCNTk5NzgtMDhDNi00Q0MwLUExMTgtQjM5NjVEMTU2RTcxJ11cbiAgICB9XSxcbiAgICBjbGlwczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ0UxMzM0OTNFLTZFRjYtNDMyRC05RTA1LTVGMDhERUZEOTVDMScsXG4gICAgICAgICAgICBiZWF0OiAwLCAvLyBzdGFydCB0aW1lIGluIGJlYXRzLCBmbG9hdFxuICAgICAgICAgICAgZHVyYXRpb246IDAuNSAvLyBkdXJhdGlvbiB0aW1lIGluIHNlY29uZHMsIGZsb2F0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnOEYzQUJCRDgtM0JDNi00RjMyLUFDREQtMkZCQzRFNEE2MTMzJyxcbiAgICAgICAgICAgIGJlYXQ6IDEsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC41XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnQkZCODk4OEQtOUMxQS00OUU0LUJERDgtMUNFNTg2RUQ0MzE5JyxcbiAgICAgICAgICAgIGJlYXQ6IDIsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC41XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnNjFCNTk5NzgtMDhDNi00Q0MwLUExMTgtQjM5NjVEMTU2RTcxJyxcbiAgICAgICAgICAgIGJlYXQ6IDQsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC41XG4gICAgICAgIH1cbiAgICBdLFxuICAgIG1pZGk6IHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgb3V0cHV0czogW11cbiAgICB9XG59XG4iXX0=\n\n/***/ }),\n/* 149 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar isDef = exports.isDef = function isDef(x) {\n  return x !== null && x !== undefined;\n};\nvar isUndef = exports.isUndef = function isUndef(x) {\n  return x === null || x === undefined;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy91dGlsLmpzIl0sIm5hbWVzIjpbImlzRGVmIiwieCIsInVuZGVmaW5lZCIsImlzVW5kZWYiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sSUFBTUEsd0JBQVEsU0FBUkEsS0FBUTtBQUFBLFNBQUtDLE1BQU0sSUFBTixJQUFjQSxNQUFNQyxTQUF6QjtBQUFBLENBQWQ7QUFDQSxJQUFNQyw0QkFBVSxTQUFWQSxPQUFVO0FBQUEsU0FBS0YsTUFBTSxJQUFOLElBQWNBLE1BQU1DLFNBQXpCO0FBQUEsQ0FBaEIiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZnJpemkvUHJvamVjdHMvb3Atd2ViIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzRGVmID0geCA9PiB4ICE9PSBudWxsICYmIHggIT09IHVuZGVmaW5lZFxuZXhwb3J0IGNvbnN0IGlzVW5kZWYgPSB4ID0+IHggPT09IG51bGwgfHwgeCA9PT0gdW5kZWZpbmVkXG4iXX0=\n\n/***/ }),\n/* 150 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 151 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 152 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 153 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 154 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 155 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 156 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 157 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 158 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(157)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(128),\n  /* template */\n  __webpack_require__(175),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 159 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(129),\n  /* template */\n  __webpack_require__(170),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 160 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(154)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(130),\n  /* template */\n  __webpack_require__(172),\n  /* scopeId */\n  \"data-v-5a9e1cb0\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 161 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(152)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(131),\n  /* template */\n  __webpack_require__(169),\n  /* scopeId */\n  \"data-v-43747a05\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 162 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(132),\n  /* template */\n  null,\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 163 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(153)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(133),\n  /* template */\n  __webpack_require__(171),\n  /* scopeId */\n  \"data-v-4fafa23f\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 164 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(155)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(134),\n  /* template */\n  __webpack_require__(173),\n  /* scopeId */\n  \"data-v-79157a3c\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 165 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(150)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(136),\n  /* template */\n  __webpack_require__(167),\n  /* scopeId */\n  \"data-v-1fa9ada8\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 166 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(156)\n\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(137),\n  /* template */\n  __webpack_require__(174),\n  /* scopeId */\n  \"data-v-a86abc4a\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 167 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"layout\": \"column u1\"\n    },\n    on: {\n      \"wheel\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleWheel($event)\n      }\n    }\n  }, _vm._l((_vm.tapes), function(tape, index) {\n    return _c('Tape', {\n      key: tape.id,\n      attrs: {\n        \"tape\": tape,\n        \"region\": _vm.region\n      }\n    })\n  }))\n},staticRenderFns: []}\n\n/***/ }),\n/* 168 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"tape\"\n  }, _vm._l((_vm.clipsInRegion), function(clip) {\n    return _c('Clip', {\n      key: clip.id,\n      attrs: {\n        \"clip\": clip,\n        \"region\": _vm.region\n      }\n    })\n  }))\n},staticRenderFns: []}\n\n/***/ }),\n/* 169 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"clip\",\n    style: (_vm.style)\n  })\n},staticRenderFns: []}\n\n/***/ }),\n/* 170 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"layout\": \"column u1\"\n    }\n  }, [_c('ViewSlider', {\n    attrs: {\n      \"region\": _vm.region,\n      \"totalBeats\": _vm.showBeats,\n      \"tapes\": _vm.tapes\n    },\n    on: {\n      \"updateRegion\": _vm.updateRegion\n    }\n  }), _vm._v(\" \"), _c('BarMarks', {\n    attrs: {\n      \"region\": _vm.region\n    }\n  }), _vm._v(\" \"), _c('Tapes', {\n    attrs: {\n      \"region\": _vm.region,\n      \"totalBeats\": _vm.showBeats,\n      \"tapes\": _vm.tapes\n    },\n    on: {\n      \"updateRegion\": _vm.updateRegion\n    }\n  })], 1)\n},staticRenderFns: []}\n\n/***/ }),\n/* 171 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return (!_vm.editing) ? _c('div', {\n    staticClass: \"value\",\n    on: {\n      \"click\": _vm.startEdit,\n      \"wheel\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleWheel($event)\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.formattedValue))]) : _c('form', {\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.applyEdit($event)\n      }\n    }\n  }, [_c('input', {\n    directives: [{\n      name: \"focus\",\n      rawName: \"v-focus\"\n    }, {\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.internalValue),\n      expression: \"internalValue\"\n    }],\n    staticClass: \"input\",\n    domProps: {\n      \"value\": (_vm.internalValue)\n    },\n    on: {\n      \"keydown\": function($event) {\n        $event.stopPropagation();\n      },\n      \"keyup\": function($event) {\n        $event.stopPropagation();\n      },\n      \"blur\": _vm.cancelEdit,\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.internalValue = $event.target.value\n      }\n    }\n  })])\n},staticRenderFns: []}\n\n/***/ }),\n/* 172 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"marks-bar\",\n    style: ({\n      transform: _vm.transform\n    })\n  }, _vm._l((_vm.bars), function(bar) {\n    return _c('div', {\n      key: bar.value,\n      staticClass: \"bar\",\n      style: ({\n        left: bar.left\n      })\n    }, [_vm._v(_vm._s(bar.value))])\n  }))\n},staticRenderFns: []}\n\n/***/ }),\n/* 173 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"settings\",\n    attrs: {\n      \"layout\": \"row u1\"\n    }\n  }, [_c('div', {\n    staticClass: \"framed\"\n  }, [_c('NumberSlider', {\n    staticClass: \"tempo\",\n    attrs: {\n      \"value\": _vm.tempo,\n      \"step\": 0.1,\n      \"min\": 0,\n      \"max\": 999\n    },\n    on: {\n      \"update\": _vm.updateTempo\n    }\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"framed\",\n    attrs: {\n      \"layout\": \"row center u05\"\n    }\n  }, [_c('NumberSlider', {\n    staticClass: \"metre\",\n    attrs: {\n      \"value\": _vm.metre[0],\n      \"min\": 1,\n      \"max\": 16\n    },\n    on: {\n      \"update\": function($event) {\n        _vm.updateMetre([$event, _vm.metre[1]])\n      }\n    }\n  }), _vm._v(\" \"), _c('span', [_vm._v(\"/\")]), _vm._v(\" \"), _c('NumberSlider', {\n    staticClass: \"metre\",\n    attrs: {\n      \"value\": _vm.metre[1],\n      \"step\": 2,\n      \"min\": 2,\n      \"max\": 16\n    },\n    on: {\n      \"update\": function($event) {\n        _vm.updateMetre([_vm.metre[0], $event])\n      }\n    }\n  })], 1)])\n},staticRenderFns: []}\n\n/***/ }),\n/* 174 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"viewSlider\",\n    attrs: {\n      \"layout\": \"column\"\n    },\n    on: {\n      \"wheel\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleWheel($event)\n      },\n      \"mousedown\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleDown($event)\n      }\n    }\n  }, [_vm._l((_vm.tapes), function(tape) {\n    return _c('div', {\n      staticClass: \"tape\"\n    }, _vm._l((tape.clips), function(clip) {\n      return _c('div', {\n        staticClass: \"clip\",\n        style: (_vm.clipStyle(clip))\n      })\n    }))\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"window\",\n    style: (_vm.windowStyle)\n  })], 2)\n},staticRenderFns: []}\n\n/***/ }),\n/* 175 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"layout\": \"column u1\"\n    }\n  }, [_c('SettingsPanel'), _vm._v(\" \"), _c('ArrangementPanel'), _vm._v(\" \"), _c('KeyboardController')], 1)\n},staticRenderFns: []}\n\n/***/ }),\n/* 176 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 177 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar always = __webpack_require__(21);\n\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.T\n * @example\n *\n *      R.F(); //=> false\n */\nmodule.exports = always(false);\n\n\n/***/ }),\n/* 178 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar always = __webpack_require__(21);\n\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.F\n * @example\n *\n *      R.T(); //=> true\n */\nmodule.exports = always(true);\n\n\n/***/ }),\n/* 179 */\n/***/ (function(module, exports) {\n\n/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nmodule.exports = {'@@functional/placeholder': true};\n\n\n/***/ }),\n/* 180 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry1 = __webpack_require__(1);\nvar curryN = __webpack_require__(5);\n\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      var mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nmodule.exports = _curry1(function addIndex(fn) {\n  return curryN(fn.length, function() {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function() {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\n\n\n/***/ }),\n/* 181 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xall = __webpack_require__(254);\n\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      var equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nmodule.exports = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\n\n\n/***/ }),\n/* 182 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar curryN = __webpack_require__(5);\nvar max = __webpack_require__(22);\nvar pluck = __webpack_require__(29);\nvar reduce = __webpack_require__(14);\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      var isQueen = R.propEq('rank', 'Q');\n *      var isSpade = R.propEq('suit', '♠︎');\n *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nmodule.exports = _curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\n\n\n/***/ }),\n/* 183 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar curryN = __webpack_require__(5);\nvar max = __webpack_require__(22);\nvar pluck = __webpack_require__(29);\nvar reduce = __webpack_require__(14);\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      var isClub = R.propEq('suit', '♣');\n *      var isSpade = R.propEq('suit', '♠');\n *      var isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nmodule.exports = _curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\n\n\n/***/ }),\n/* 184 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _aperture = __webpack_require__(237);\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xaperture = __webpack_require__(255);\n\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nmodule.exports = _curry2(_dispatchable([], _xaperture, _aperture));\n\n\n/***/ }),\n/* 185 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nmodule.exports = _curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\n\n\n/***/ }),\n/* 186 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar apply = __webpack_require__(75);\nvar curryN = __webpack_require__(5);\nvar map = __webpack_require__(7);\nvar max = __webpack_require__(22);\nvar pluck = __webpack_require__(29);\nvar reduce = __webpack_require__(14);\nvar values = __webpack_require__(125);\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n\n\n/***/ }),\n/* 187 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      var byAge = R.ascend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByYoungestFirst = R.sort(byAge, people);\n */\nmodule.exports = _curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\n\n\n/***/ }),\n/* 188 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar nAry = __webpack_require__(45);\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nmodule.exports = _curry1(function binary(fn) {\n  return nAry(2, fn);\n});\n\n\n/***/ }),\n/* 189 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isFunction = __webpack_require__(39);\nvar and = __webpack_require__(73);\nvar lift = __webpack_require__(43);\n\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nmodule.exports = _curry2(function both(f, g) {\n  return _isFunction(f) ?\n    function _both() {\n      return f.apply(this, arguments) && g.apply(this, arguments);\n    } :\n    lift(and)(f, g);\n});\n\n\n/***/ }),\n/* 190 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar curry = __webpack_require__(34);\n\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      var indentN = R.pipe(R.times(R.always(' ')),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      var format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nmodule.exports = curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\n\n\n/***/ }),\n/* 191 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nmodule.exports = _curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min :\n         value > max ? max :\n         value;\n});\n\n\n/***/ }),\n/* 192 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _clone = __webpack_require__(89);\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Creates a deep copy of the value which may contain (nested) `Array`s and\n * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\n * assigned by reference rather than copied\n *\n * Dispatches to a `clone` method if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      var objects = [{}, {}, {}];\n *      var objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nmodule.exports = _curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ?\n    value.clone() :\n    _clone(value, [], [], true);\n});\n\n\n/***/ }),\n/* 193 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a, b -> Boolean) -> (a, b -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      var byAge = R.comparator((a, b) => a.age < b.age);\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByIncreasingAge = R.sort(byAge, people);\n */\nmodule.exports = _curry1(function comparator(pred) {\n  return function(a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\n\n\n/***/ }),\n/* 194 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar lift = __webpack_require__(43);\nvar not = __webpack_require__(109);\n\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      var isNotNil = R.complement(R.isNil);\n *      isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nmodule.exports = lift(not);\n\n\n/***/ }),\n/* 195 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar pipeP = __webpack_require__(115);\nvar reverse = __webpack_require__(48);\n\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nmodule.exports = function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n};\n\n\n/***/ }),\n/* 196 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _curry1 = __webpack_require__(1);\nvar map = __webpack_require__(7);\nvar max = __webpack_require__(22);\nvar reduce = __webpack_require__(14);\n\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nmodule.exports = _curry1(function cond(pairs) {\n  var arity = reduce(max,\n                     0,\n                     map(function(pair) { return pair[0].length; }, pairs));\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\n\n\n/***/ }),\n/* 197 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar constructN = __webpack_require__(79);\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      var AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      var animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      var animalSighting = R.invoker(0, 'sighting');\n *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nmodule.exports = _curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\n\n\n/***/ }),\n/* 198 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.contains(3, [1, 2, 3]); //=> true\n *      R.contains(4, [1, 2, 3]); //=> false\n *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.contains([42], [[42]]); //=> true\n */\nmodule.exports = _curry2(_contains);\n\n\n/***/ }),\n/* 199 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar reduceBy = __webpack_require__(46);\n\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nmodule.exports = reduceBy(function(acc, elem) { return acc + 1; }, 0);\n\n\n/***/ }),\n/* 200 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar add = __webpack_require__(32);\n\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nmodule.exports = add(-1);\n\n\n/***/ }),\n/* 201 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      var byAge = R.descend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByOldestFirst = R.sort(byAge, people);\n */\nmodule.exports = _curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\n\n\n/***/ }),\n/* 202 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isInteger = __webpack_require__(58);\nvar assoc = __webpack_require__(33);\nvar dissoc = __webpack_require__(84);\nvar remove = __webpack_require__(118);\nvar update = __webpack_require__(68);\n\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nmodule.exports = _curry2(function dissocPath(path, obj) {\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return _isInteger(path[0]) ? remove(path[0], 1, obj) : dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      if (obj[head] == null) {\n        return obj;\n      } else if (_isInteger(path[0])) {\n        return update(head, dissocPath(tail, obj[head]), obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n  }\n});\n\n\n/***/ }),\n/* 203 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      var half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      var reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nmodule.exports = _curry2(function divide(a, b) { return a / b; });\n\n\n/***/ }),\n/* 204 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _dropLast = __webpack_require__(239);\nvar _xdropLast = __webpack_require__(258);\n\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nmodule.exports = _curry2(_dispatchable([], _xdropLast, _dropLast));\n\n\n/***/ }),\n/* 205 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _dropLastWhile = __webpack_require__(240);\nvar _xdropLastWhile = __webpack_require__(259);\n\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} predicate The function to be called on each element\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      var lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));\n\n\n/***/ }),\n/* 206 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _dispatchable = __webpack_require__(3);\nvar _xdropRepeatsWith = __webpack_require__(98);\nvar dropRepeatsWith = __webpack_require__(86);\nvar equals = __webpack_require__(8);\n\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nmodule.exports = _curry1(_dispatchable([], _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n\n/***/ }),\n/* 207 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xdropWhile = __webpack_require__(260);\n\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      var lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n */\nmodule.exports = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len && pred(list[idx])) {\n    idx += 1;\n  }\n  return Array.prototype.slice.call(list, idx);\n}));\n\n\n/***/ }),\n/* 208 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isFunction = __webpack_require__(39);\nvar lift = __webpack_require__(43);\nvar or = __webpack_require__(111);\n\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nmodule.exports = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\n\n\n/***/ }),\n/* 209 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar equals = __webpack_require__(8);\nvar takeLast = __webpack_require__(121);\n\n/**\n * Checks if a list ends with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nmodule.exports = _curry2(function(suffix, list) {\n  return equals(takeLast(suffix.length, list), suffix);\n});\n\n\n/***/ }),\n/* 210 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar equals = __webpack_require__(8);\n\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nmodule.exports = _curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\n\n\n/***/ }),\n/* 211 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar equals = __webpack_require__(8);\n\n\n/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nmodule.exports = _curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\n\n\n/***/ }),\n/* 212 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      var transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nmodule.exports = _curry2(function evolve(transformations, object) {\n  var result = {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function'                 ? transformation(object[key])\n                : transformation && type === 'object' ? evolve(transformation, object[key])\n                                                      : object[key];\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 213 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xfind = __webpack_require__(262);\n\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\n\n\n/***/ }),\n/* 214 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xfindIndex = __webpack_require__(263);\n\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n */\nmodule.exports = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\n\n\n/***/ }),\n/* 215 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xfindLast = __webpack_require__(264);\n\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\n\n\n/***/ }),\n/* 216 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xfindLastIndex = __webpack_require__(265);\n\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n */\nmodule.exports = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\n\n\n/***/ }),\n/* 217 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _makeFlat = __webpack_require__(96);\n\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nmodule.exports = _curry1(_makeFlat(true));\n\n\n/***/ }),\n/* 218 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _checkForMethod = __webpack_require__(24);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nmodule.exports = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\n\n\n/***/ }),\n/* 219 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar keys = __webpack_require__(13);\n\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nmodule.exports = _curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\n\n\n/***/ }),\n/* 220 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 221 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _checkForMethod = __webpack_require__(24);\nvar _curry2 = __webpack_require__(0);\nvar reduceBy = __webpack_require__(46);\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a String-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> String) -> [a] -> {String: [a]}\n * @param {Function} fn Function :: a -> String\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.transduce\n * @example\n *\n *      var byGrade = R.groupBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nmodule.exports = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\n  if (acc == null) {\n    acc = [];\n  }\n  acc.push(item);\n  return acc;\n}, null)));\n\n\n/***/ }),\n/* 222 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nmodule.exports = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\n\n\n/***/ }),\n/* 223 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nmodule.exports = _curry2(function gt(a, b) { return a > b; });\n\n\n/***/ }),\n/* 224 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nmodule.exports = _curry2(function gte(a, b) { return a >= b; });\n\n\n/***/ }),\n/* 225 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _has = __webpack_require__(6);\n\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      var hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      var point = {x: 0, y: 0};\n *      var pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nmodule.exports = _curry2(_has);\n\n\n/***/ }),\n/* 226 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      var square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nmodule.exports = _curry2(function hasIn(prop, obj) {\n  return prop in obj;\n});\n\n\n/***/ }),\n/* 227 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar nth = __webpack_require__(27);\n\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nmodule.exports = nth(0);\n\n\n/***/ }),\n/* 228 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar curryN = __webpack_require__(5);\n\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nmodule.exports = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\n\n\n/***/ }),\n/* 229 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar add = __webpack_require__(32);\n\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nmodule.exports = add(1);\n\n\n/***/ }),\n/* 230 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar reduceBy = __webpack_require__(46);\n\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n * @param {Function} fn Function :: a -> String\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @example\n *\n *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nmodule.exports = reduceBy(function(acc, elem) { return elem; }, null);\n\n\n/***/ }),\n/* 231 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _indexOf = __webpack_require__(93);\nvar _isArray = __webpack_require__(15);\n\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nmodule.exports = _curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ?\n    xs.indexOf(target) :\n    _indexOf(xs, target, 0);\n});\n\n\n/***/ }),\n/* 232 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar slice = __webpack_require__(20);\n\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nmodule.exports = slice(0, -1);\n\n\n/***/ }),\n/* 233 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _containsWith = __webpack_require__(36);\nvar _curry3 = __webpack_require__(2);\nvar _filter = __webpack_require__(56);\n\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig (a -> b -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nmodule.exports = _curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function(x) { return _containsWith(pred, x, ys); }, xs);\n});\n\n\n/***/ }),\n/* 234 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nmodule.exports = _curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\n\n\n/***/ }),\n/* 235 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nmodule.exports = _curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(Array.prototype.slice.call(list, 0, idx),\n                   elts,\n                   Array.prototype.slice.call(list, idx));\n});\n\n\n/***/ }),\n/* 236 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\n\n\n// A simple Set type that honours R.equals semantics\nmodule.exports = (function() {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function(item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function(item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  function hasOrAdd(item, shouldAdd, set) {\n    var type = typeof item;\n    var prevSize, newSize;\n    switch (type) {\n      case 'string':\n      case 'number':\n        // distinguish between +0 and -0\n        if (item === 0 && 1 / item === -Infinity) {\n          if (set._items['-0']) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items['-0'] = true;\n            }\n            return false;\n          }\n        }\n        // these types can all utilise the native Set\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = {};\n              set._items[type][item] = true;\n            }\n            return false;\n          } else if (item in set._items[type]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][item] = true;\n            }\n            return false;\n          }\n        }\n\n      case 'boolean':\n        // set._items['boolean'] holds a two element array\n        // representing [ falseExists, trueExists ]\n        if (type in set._items) {\n          var bIdx = item ? 1 : 0;\n          if (set._items[type][bIdx]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][bIdx] = true;\n            }\n            return false;\n          }\n        } else {\n          if (shouldAdd) {\n            set._items[type] = item ? [false, true] : [true, false];\n          }\n          return false;\n        }\n\n      case 'function':\n        // compare functions for reference equality\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = [item];\n            }\n            return false;\n          }\n          if (!_contains(item, set._items[type])) {\n            if (shouldAdd) {\n              set._items[type].push(item);\n            }\n            return false;\n          }\n          return true;\n        }\n\n      case 'undefined':\n        if (set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type] = true;\n          }\n          return false;\n        }\n\n      case 'object':\n        if (item === null) {\n          if (!set._items['null']) {\n            if (shouldAdd) {\n              set._items['null'] = true;\n            }\n            return false;\n          }\n          return true;\n        }\n      /* falls through */\n      default:\n        // reduce the search size of heterogeneous sets by creating buckets\n        // for each type.\n        type = Object.prototype.toString.call(item);\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        // scan through all previously applied items\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n    }\n  }\n  return _Set;\n}());\n\n\n/***/ }),\n/* 237 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n};\n\n\n/***/ }),\n/* 238 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n\n\n/***/ }),\n/* 239 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar take = __webpack_require__(64);\n\nmodule.exports = function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n};\n\n\n/***/ }),\n/* 240 */\n/***/ (function(module, exports) {\n\nmodule.exports = function dropLastWhile(pred, list) {\n  var idx = list.length - 1;\n  while (idx >= 0 && pred(list[idx])) {\n    idx -= 1;\n  }\n  return Array.prototype.slice.call(list, 0, idx + 1);\n};\n\n\n/***/ }),\n/* 241 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arrayFromIterator = __webpack_require__(238);\nvar _functionName = __webpack_require__(244);\nvar _has = __webpack_require__(6);\nvar identical = __webpack_require__(88);\nvar keys = __webpack_require__(13);\nvar type = __webpack_require__(65);\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) &&\n           typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n\n\n/***/ }),\n/* 242 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _forceReduced = __webpack_require__(243);\nvar _isArrayLike = __webpack_require__(38);\nvar _reduce = __webpack_require__(9);\nvar _xfBase = __webpack_require__(4);\n\nmodule.exports = (function() {\n  var preservingReduced = function(xf) {\n    return {\n      '@@transducer/init': _xfBase.init,\n      '@@transducer/result': function(result) {\n        return xf['@@transducer/result'](result);\n      },\n      '@@transducer/step': function(result, input) {\n        var ret = xf['@@transducer/step'](result, input);\n        return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n      }\n    };\n  };\n\n  return function _xcat(xf) {\n    var rxf = preservingReduced(xf);\n    return {\n      '@@transducer/init': _xfBase.init,\n      '@@transducer/result': function(result) {\n        return rxf['@@transducer/result'](result);\n      },\n      '@@transducer/step': function(result, input) {\n        return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n      }\n    };\n  };\n}());\n\n\n/***/ }),\n/* 243 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n};\n\n\n/***/ }),\n/* 244 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n\n\n/***/ }),\n/* 245 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n};\n\n\n/***/ }),\n/* 246 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _has = __webpack_require__(6);\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nmodule.exports = function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n};\n\n\n/***/ }),\n/* 247 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _of(x) { return [x]; };\n\n\n/***/ }),\n/* 248 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n\n\n/***/ }),\n/* 249 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _pipeP(f, g) {\n  return function() {\n    var ctx = this;\n    return f.apply(ctx, arguments).then(function(x) {\n      return g.call(ctx, x);\n    });\n  };\n};\n\n\n/***/ }),\n/* 250 */\n/***/ (function(module, exports) {\n\nmodule.exports = function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n};\n\n\n/***/ }),\n/* 251 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _assign = __webpack_require__(55);\nvar _identity = __webpack_require__(57);\nvar _isArrayLike = __webpack_require__(38);\nvar _isTransformer = __webpack_require__(60);\nvar objOf = __webpack_require__(110);\n\n\nmodule.exports = (function() {\n  var _stepCatArray = {\n    '@@transducer/init': Array,\n    '@@transducer/step': function(xs, x) {\n      xs.push(x);\n      return xs;\n    },\n    '@@transducer/result': _identity\n  };\n  var _stepCatString = {\n    '@@transducer/init': String,\n    '@@transducer/step': function(a, b) { return a + b; },\n    '@@transducer/result': _identity\n  };\n  var _stepCatObject = {\n    '@@transducer/init': Object,\n    '@@transducer/step': function(result, input) {\n      return _assign(\n        result,\n        _isArrayLike(input) ? objOf(input[0], input[1]) : input\n      );\n    },\n    '@@transducer/result': _identity\n  };\n\n  return function _stepCat(obj) {\n    if (_isTransformer(obj)) {\n      return obj;\n    }\n    if (_isArrayLike(obj)) {\n      return _stepCatArray;\n    }\n    if (typeof obj === 'string') {\n      return _stepCatString;\n    }\n    if (typeof obj === 'object') {\n      return _stepCatObject;\n    }\n    throw new Error('Cannot create transformer for ' + obj);\n  };\n}());\n\n\n/***/ }),\n/* 252 */\n/***/ (function(module, exports) {\n\n/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nmodule.exports = (function() {\n  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\n  return typeof Date.prototype.toISOString === 'function' ?\n    function _toISOString(d) {\n      return d.toISOString();\n    } :\n    function _toISOString(d) {\n      return (\n        d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + '.' +\n        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n      );\n    };\n}());\n\n\n/***/ }),\n/* 253 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\nvar _map = __webpack_require__(41);\nvar _quote = __webpack_require__(250);\nvar _toISOString = __webpack_require__(252);\nvar keys = __webpack_require__(13);\nvar reject = __webpack_require__(47);\n\n\nmodule.exports = function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n};\n\n\n/***/ }),\n/* 254 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduced = __webpack_require__(16);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XAll(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.all = true;\n  }\n  XAll.prototype['@@transducer/init'] = _xfBase.init;\n  XAll.prototype['@@transducer/result'] = function(result) {\n    if (this.all) {\n      result = this.xf['@@transducer/step'](result, true);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAll.prototype['@@transducer/step'] = function(result, input) {\n    if (!this.f(input)) {\n      this.all = false;\n      result = _reduced(this.xf['@@transducer/step'](result, false));\n    }\n    return result;\n  };\n\n  return _curry2(function _xall(f, xf) { return new XAll(f, xf); });\n}());\n\n\n/***/ }),\n/* 255 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XAperture(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XAperture.prototype['@@transducer/init'] = _xfBase.init;\n  XAperture.prototype['@@transducer/result'] = function(result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XAperture.prototype['@@transducer/step'] = function(result, input) {\n    this.store(input);\n    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n  };\n  XAperture.prototype.store = function(input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n  XAperture.prototype.getCopy = function() {\n    return _concat(Array.prototype.slice.call(this.acc, this.pos),\n                   Array.prototype.slice.call(this.acc, 0, this.pos));\n  };\n\n  return _curry2(function _xaperture(n, xf) { return new XAperture(n, xf); });\n}());\n\n\n/***/ }),\n/* 256 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _flatCat = __webpack_require__(242);\nvar map = __webpack_require__(7);\n\n\nmodule.exports = _curry2(function _xchain(f, xf) {\n  return map(f, _flatCat(xf));\n});\n\n\n/***/ }),\n/* 257 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function(result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdrop(n, xf) { return new XDrop(n, xf); });\n}());\n\n\n/***/ }),\n/* 258 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XDropLast(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLast.prototype['@@transducer/result'] =  function(result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLast.prototype['@@transducer/step'] = function(result, input) {\n    if (this.full) {\n      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n    }\n    this.store(input);\n    return result;\n  };\n  XDropLast.prototype.store = function(input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n\n  return _curry2(function _xdropLast(n, xf) { return new XDropLast(n, xf); });\n}());\n\n\n/***/ }),\n/* 259 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduce = __webpack_require__(9);\nvar _xfBase = __webpack_require__(4);\n\nmodule.exports = (function() {\n  function XDropLastWhile(fn, xf) {\n    this.f = fn;\n    this.retained = [];\n    this.xf = xf;\n  }\n  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLastWhile.prototype['@@transducer/result'] = function(result) {\n    this.retained = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLastWhile.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.retain(result, input)\n                         : this.flush(result, input);\n  };\n  XDropLastWhile.prototype.flush = function(result, input) {\n    result = _reduce(\n      this.xf['@@transducer/step'],\n      result,\n      this.retained\n    );\n    this.retained = [];\n    return this.xf['@@transducer/step'](result, input);\n  };\n  XDropLastWhile.prototype.retain = function(result, input) {\n    this.retained.push(input);\n    return result;\n  };\n\n  return _curry2(function _xdropLastWhile(fn, xf) { return new XDropLastWhile(fn, xf); });\n}());\n\n\n/***/ }),\n/* 260 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XDropWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XDropWhile.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f) {\n      if (this.f(input)) {\n        return result;\n      }\n      this.f = null;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdropWhile(f, xf) { return new XDropWhile(f, xf); });\n}());\n\n\n/***/ }),\n/* 261 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n}());\n\n\n/***/ }),\n/* 262 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduced = __webpack_require__(16);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfind(f, xf) { return new XFind(f, xf); });\n}());\n\n\n/***/ }),\n/* 263 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduced = __webpack_require__(16);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XFindIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.found = false;\n  }\n  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindIndex.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, -1);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFindIndex.prototype['@@transducer/step'] = function(result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindIndex(f, xf) { return new XFindIndex(f, xf); });\n}());\n\n\n/***/ }),\n/* 264 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XFindLast(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLast.prototype['@@transducer/result'] = function(result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n  };\n  XFindLast.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.last = input;\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindLast(f, xf) { return new XFindLast(f, xf); });\n}());\n\n\n/***/ }),\n/* 265 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XFindLastIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.lastIdx = -1;\n  }\n  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLastIndex.prototype['@@transducer/result'] = function(result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n  };\n  XFindLastIndex.prototype['@@transducer/step'] = function(result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.lastIdx = this.idx;\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindLastIndex(f, xf) { return new XFindLastIndex(f, xf); });\n}());\n\n\n/***/ }),\n/* 266 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n\n\n/***/ }),\n/* 267 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curryN = __webpack_require__(37);\nvar _has = __webpack_require__(6);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n    this.valueFn = valueFn;\n    this.valueAcc = valueAcc;\n    this.keyFn = keyFn;\n    this.xf = xf;\n    this.inputs = {};\n  }\n  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n  XReduceBy.prototype['@@transducer/result'] = function(result) {\n    var key;\n    for (key in this.inputs) {\n      if (_has(key, this.inputs)) {\n        result = this.xf['@@transducer/step'](result, this.inputs[key]);\n        if (result['@@transducer/reduced']) {\n          result = result['@@transducer/value'];\n          break;\n        }\n      }\n    }\n    this.inputs = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XReduceBy.prototype['@@transducer/step'] = function(result, input) {\n    var key = this.keyFn(input);\n    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n    return result;\n  };\n\n  return _curryN(4, [],\n                 function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n                   return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n                 });\n}());\n\n\n/***/ }),\n/* 268 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduced = __webpack_require__(16);\nvar _xfBase = __webpack_require__(4);\n\nmodule.exports = (function() {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function(result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return _curry2(function _xtake(n, xf) { return new XTake(n, xf); });\n}());\n\n\n/***/ }),\n/* 269 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduced = __webpack_require__(16);\nvar _xfBase = __webpack_require__(4);\n\n\nmodule.exports = (function() {\n  function XTakeWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XTakeWhile.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n  };\n\n  return _curry2(function _xtakeWhile(f, xf) { return new XTakeWhile(f, xf); });\n}());\n\n\n/***/ }),\n/* 270 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\nvar _curry2 = __webpack_require__(0);\nvar _filter = __webpack_require__(56);\nvar flip = __webpack_require__(35);\nvar uniq = __webpack_require__(66);\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nmodule.exports = _curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return uniq(_filter(flip(_contains)(lookupList), filteredList));\n});\n\n\n/***/ }),\n/* 271 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _containsWith = __webpack_require__(36);\nvar _curry3 = __webpack_require__(2);\nvar uniqWith = __webpack_require__(67);\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate function that determines whether\n *        the two supplied elements are equal.\n * @param {Array} list1 One list of items to compare\n * @param {Array} list2 A second list of items to compare\n * @return {Array} A new list containing those elements common to both lists.\n * @see R.innerJoin\n * @deprecated since v0.24.0\n * @example\n *\n *      var buffaloSpringfield = [\n *        {id: 824, name: 'Richie Furay'},\n *        {id: 956, name: 'Dewey Martin'},\n *        {id: 313, name: 'Bruce Palmer'},\n *        {id: 456, name: 'Stephen Stills'},\n *        {id: 177, name: 'Neil Young'}\n *      ];\n *      var csny = [\n *        {id: 204, name: 'David Crosby'},\n *        {id: 456, name: 'Stephen Stills'},\n *        {id: 539, name: 'Graham Nash'},\n *        {id: 177, name: 'Neil Young'}\n *      ];\n *\n *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nmodule.exports = _curry3(function intersectionWith(pred, list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  var results = [];\n  var idx = 0;\n  while (idx < filteredList.length) {\n    if (_containsWith(pred, filteredList[idx], lookupList)) {\n      results[results.length] = filteredList[idx];\n    }\n    idx += 1;\n  }\n  return uniqWith(pred, results);\n});\n\n\n/***/ }),\n/* 272 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _checkForMethod = __webpack_require__(24);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nmodule.exports = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\n\n\n/***/ }),\n/* 273 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _clone = __webpack_require__(89);\nvar _curry3 = __webpack_require__(2);\nvar _isTransformer = __webpack_require__(60);\nvar _reduce = __webpack_require__(9);\nvar _stepCat = __webpack_require__(251);\n\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nmodule.exports = _curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ?\n    _reduce(xf(acc), acc['@@transducer/init'](), list) :\n    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n\n\n/***/ }),\n/* 274 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _has = __webpack_require__(6);\nvar keys = __webpack_require__(13);\n\n\n/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nmodule.exports = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : (out[val] = []);\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\n\n\n/***/ }),\n/* 275 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar keys = __webpack_require__(13);\n\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      var raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      var raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nmodule.exports = _curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\n\n\n/***/ }),\n/* 276 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar empty = __webpack_require__(87);\nvar equals = __webpack_require__(8);\n\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\nmodule.exports = _curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\n\n\n/***/ }),\n/* 277 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar invoker = __webpack_require__(26);\n\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      var spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nmodule.exports = invoker(1, 'join');\n\n\n/***/ }),\n/* 278 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nmodule.exports = _curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\n\n\n/***/ }),\n/* 279 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isArray = __webpack_require__(15);\nvar equals = __webpack_require__(8);\n\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nmodule.exports = _curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\n\n\n/***/ }),\n/* 280 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar lens = __webpack_require__(42);\nvar nth = __webpack_require__(27);\nvar update = __webpack_require__(68);\n\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nmodule.exports = _curry1(function lensIndex(n) {\n  return lens(nth(n), update(n));\n});\n\n\n/***/ }),\n/* 281 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar assocPath = __webpack_require__(76);\nvar lens = __webpack_require__(42);\nvar path = __webpack_require__(28);\n\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\nmodule.exports = _curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\n\n\n/***/ }),\n/* 282 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar assoc = __webpack_require__(33);\nvar lens = __webpack_require__(42);\nvar prop = __webpack_require__(62);\n\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\n\n\n/***/ }),\n/* 283 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lt(a, b) { return a < b; });\n\n\n/***/ }),\n/* 284 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lte(a, b) { return a <= b; });\n\n\n/***/ }),\n/* 285 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nmodule.exports = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\n\n\n/***/ }),\n/* 286 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nmodule.exports = _curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\n\n\n/***/ }),\n/* 287 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _reduce = __webpack_require__(9);\nvar keys = __webpack_require__(13);\n\n\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      var values = { x: 1, y: 2, z: 3 };\n *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nmodule.exports = _curry2(function mapObjIndexed(fn, obj) {\n  return _reduce(function(acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\n\n\n/***/ }),\n/* 288 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nmodule.exports = _curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\n\n\n/***/ }),\n/* 289 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isInteger = __webpack_require__(58);\n\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nmodule.exports = _curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) { return NaN; }\n  if (!_isInteger(p) || p < 1) { return NaN; }\n  return ((m % p) + p) % p;\n});\n\n\n/***/ }),\n/* 290 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nmodule.exports = _curry3(function maxBy(f, a, b) {\n  return f(b) > f(a) ? b : a;\n});\n\n\n/***/ }),\n/* 291 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar mean = __webpack_require__(106);\n\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nmodule.exports = _curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\n\n\n/***/ }),\n/* 292 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar memoizeWith = __webpack_require__(107);\nvar toString = __webpack_require__(30);\n\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoizeWith\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nmodule.exports = memoizeWith(function() {\n  return toString(arguments);\n});\n\n\n/***/ }),\n/* 293 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _assign = __webpack_require__(55);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nmodule.exports = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\n\n\n/***/ }),\n/* 294 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _assign = __webpack_require__(55);\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Merges a list of objects together into one object.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nmodule.exports = _curry1(function mergeAll(list) {\n  return _assign.apply(null, [{}].concat(list));\n});\n\n\n/***/ }),\n/* 295 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar mergeDeepWithKey = __webpack_require__(44);\n\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */\nmodule.exports = _curry2(function mergeDeepLeft(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return lVal;\n  }, lObj, rObj);\n});\n\n\n/***/ }),\n/* 296 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar mergeDeepWithKey = __webpack_require__(44);\n\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\nmodule.exports = _curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\n\n\n/***/ }),\n/* 297 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar mergeDeepWithKey = __webpack_require__(44);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\nmodule.exports = _curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\n\n\n/***/ }),\n/* 298 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar mergeWithKey = __webpack_require__(61);\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nmodule.exports = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n\n\n/***/ }),\n/* 299 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nmodule.exports = _curry2(function min(a, b) { return b < a ? b : a; });\n\n\n/***/ }),\n/* 300 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nmodule.exports = _curry3(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\n\n\n/***/ }),\n/* 301 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nmodule.exports = _curry2(function modulo(a, b) { return a % b; });\n\n\n/***/ }),\n/* 302 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nmodule.exports = _curry1(function negate(n) { return -n; });\n\n\n/***/ }),\n/* 303 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _complement = __webpack_require__(91);\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xany = __webpack_require__(97);\nvar any = __webpack_require__(74);\n\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n */\nmodule.exports = _curry2(_complement(_dispatchable(['any'], _xany, any)));\n\n\n/***/ }),\n/* 304 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar curryN = __webpack_require__(5);\nvar nth = __webpack_require__(27);\n\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nmodule.exports = _curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function() {\n    return nth(n, arguments);\n  });\n});\n\n\n/***/ }),\n/* 305 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      var classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + lastName\n *      var yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */\nmodule.exports = _curry3(function o(f, g, x) {\n  return f(g(x));\n});\n\n\n/***/ }),\n/* 306 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _of = __webpack_require__(247);\n\n\n/**\n * Returns a singleton array containing the value provided.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> [a]\n * @param {*} x any value\n * @return {Array} An array wrapping `x`.\n * @example\n *\n *      R.of(null); //=> [null]\n *      R.of([42]); //=> [[42]]\n */\nmodule.exports = _curry1(_of);\n\n\n/***/ }),\n/* 307 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nmodule.exports = _curry2(function omit(names, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (!_contains(prop, names)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 308 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nmodule.exports = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function() {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n\n\n/***/ }),\n/* 309 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nmodule.exports = _curry2(function pair(fst, snd) { return [fst, snd]; });\n\n\n/***/ }),\n/* 310 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _createPartialApplicator = __webpack_require__(92);\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nmodule.exports = _createPartialApplicator(_concat);\n\n\n/***/ }),\n/* 311 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _createPartialApplicator = __webpack_require__(92);\nvar flip = __webpack_require__(35);\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nmodule.exports = _createPartialApplicator(flip(_concat));\n\n\n/***/ }),\n/* 312 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar filter = __webpack_require__(53);\nvar juxt = __webpack_require__(102);\nvar reject = __webpack_require__(47);\n\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nmodule.exports = juxt([filter, reject]);\n\n\n/***/ }),\n/* 313 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar equals = __webpack_require__(8);\nvar path = __webpack_require__(28);\n\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nmodule.exports = _curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\n\n/***/ }),\n/* 314 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar defaultTo = __webpack_require__(81);\nvar path = __webpack_require__(28);\n\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nmodule.exports = _curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\n\n\n/***/ }),\n/* 315 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar path = __webpack_require__(28);\n\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n */\nmodule.exports = _curry3(function pathSatisfies(pred, propPath, obj) {\n  return propPath.length > 0 && pred(path(propPath, obj));\n});\n\n\n/***/ }),\n/* 316 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nmodule.exports = _curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 317 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nmodule.exports = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 318 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar composeK = __webpack_require__(78);\nvar reverse = __webpack_require__(48);\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nmodule.exports = function pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n  return composeK.apply(this, reverse(arguments));\n};\n\n\n/***/ }),\n/* 319 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar multiply = __webpack_require__(108);\nvar reduce = __webpack_require__(14);\n\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nmodule.exports = reduce(multiply, 1);\n\n\n/***/ }),\n/* 320 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _map = __webpack_require__(41);\nvar identity = __webpack_require__(54);\nvar pickAll = __webpack_require__(113);\nvar useWith = __webpack_require__(124);\n\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      var kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nmodule.exports = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\n\n\n/***/ }),\n/* 321 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar equals = __webpack_require__(8);\n\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.equals, R.propSatisfies\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nmodule.exports = _curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\n\n\n/***/ }),\n/* 322 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar is = __webpack_require__(100);\n\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nmodule.exports = _curry3(function propIs(type, name, obj) {\n  return is(type, obj[name]);\n});\n\n\n/***/ }),\n/* 323 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar _has = __webpack_require__(6);\n\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var favorite = R.prop('favoriteLibrary');\n *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nmodule.exports = _curry3(function propOr(val, p, obj) {\n  return (obj != null && _has(p, obj)) ? obj[p] : val;\n});\n\n\n/***/ }),\n/* 324 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nmodule.exports = _curry3(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\n\n\n/***/ }),\n/* 325 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nmodule.exports = _curry2(function props(ps, obj) {\n  var len = ps.length;\n  var out = [];\n  var idx = 0;\n\n  while (idx < len) {\n    out[idx] = obj[ps[idx]];\n    idx += 1;\n  }\n\n  return out;\n});\n\n\n/***/ }),\n/* 326 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _isNumber = __webpack_require__(95);\n\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nmodule.exports = _curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 327 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curryN = __webpack_require__(37);\nvar _reduce = __webpack_require__(9);\nvar _reduced = __webpack_require__(16);\n\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nmodule.exports = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function(acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\n\n\n/***/ }),\n/* 328 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _reduced = __webpack_require__(16);\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * Note: this optimization is unavailable to functions not explicitly listed\n * above. For instance, it is not currently supported by\n * [`reduceRight`](#reduceRight).\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */\n\nmodule.exports = _curry1(_reduced);\n\n\n/***/ }),\n/* 329 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar always = __webpack_require__(21);\nvar times = __webpack_require__(122);\n\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      var obj = {};\n *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nmodule.exports = _curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\n\n\n/***/ }),\n/* 330 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nmodule.exports = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n\n\n/***/ }),\n/* 331 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a,b -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nmodule.exports = _curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 332 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar always = __webpack_require__(21);\nvar over = __webpack_require__(112);\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nmodule.exports = _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\n\n\n/***/ }),\n/* 333 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,a -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @example\n *\n *      var diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nmodule.exports = _curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\n\n\n/***/ }),\n/* 334 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      var people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nmodule.exports = _curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\n\n\n/***/ }),\n/* 335 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [a -> a -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @example\n *\n *      var alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      var bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      var people = [clara, bob, alice];\n *      var ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nmodule.exports = _curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\n\n\n/***/ }),\n/* 336 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar invoker = __webpack_require__(26);\n\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nmodule.exports = invoker(1, 'split');\n\n\n/***/ }),\n/* 337 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar length = __webpack_require__(104);\nvar slice = __webpack_require__(20);\n\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nmodule.exports = _curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\n\n\n/***/ }),\n/* 338 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar slice = __webpack_require__(20);\n\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nmodule.exports = _curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 339 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nmodule.exports = _curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n\n\n/***/ }),\n/* 340 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar equals = __webpack_require__(8);\nvar take = __webpack_require__(64);\n\n/**\n * Checks if a list starts with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nmodule.exports = _curry2(function(prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\n\n\n/***/ }),\n/* 341 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      var minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      var complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nmodule.exports = _curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\n\n\n/***/ }),\n/* 342 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar concat = __webpack_require__(52);\nvar difference = __webpack_require__(82);\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nmodule.exports = _curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\n\n\n/***/ }),\n/* 343 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar concat = __webpack_require__(52);\nvar differenceWith = __webpack_require__(83);\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nmodule.exports = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n\n\n/***/ }),\n/* 344 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n */\nmodule.exports = _curry2(function takeLastWhile(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0 && fn(list[idx])) {\n    idx -= 1;\n  }\n  return Array.prototype.slice.call(list, idx + 1);\n});\n\n\n/***/ }),\n/* 345 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar _dispatchable = __webpack_require__(3);\nvar _xtakeWhile = __webpack_require__(269);\n\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      var isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n */\nmodule.exports = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len && fn(list[idx])) {\n    idx += 1;\n  }\n  return Array.prototype.slice.call(list, 0, idx);\n}));\n\n\n/***/ }),\n/* 346 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nmodule.exports = _curry2(function tap(fn, x) {\n  fn(x);\n  return x;\n});\n\n\n/***/ }),\n/* 347 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _cloneRegExp = __webpack_require__(90);\nvar _curry2 = __webpack_require__(0);\nvar _isRegExp = __webpack_require__(245);\nvar toString = __webpack_require__(30);\n\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nmodule.exports = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\n\n\n/***/ }),\n/* 348 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar invoker = __webpack_require__(26);\n\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nmodule.exports = invoker(0, 'toLowerCase');\n\n\n/***/ }),\n/* 349 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar _has = __webpack_require__(6);\n\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nmodule.exports = _curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\n\n\n/***/ }),\n/* 350 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nmodule.exports = _curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\n\n\n/***/ }),\n/* 351 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar invoker = __webpack_require__(26);\n\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nmodule.exports = invoker(0, 'toUpperCase');\n\n\n/***/ }),\n/* 352 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _reduce = __webpack_require__(9);\nvar _xwrap = __webpack_require__(99);\nvar curryN = __webpack_require__(5);\n\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      var isOdd = (x) => x % 2 === 1;\n *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nmodule.exports = curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\n\n\n/***/ }),\n/* 353 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nmodule.exports = _curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 354 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\nvar map = __webpack_require__(7);\nvar sequence = __webpack_require__(119);\n\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n * @param {Function} of\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Nothing` if the given divisor is `0`\n *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n */\nmodule.exports = _curry3(function traverse(of, f, traversable) {\n  return typeof traversable['fantasy-land/traverse'] === 'function' ?\n    traversable['fantasy-land/traverse'](f, of) :\n    sequence(of, map(f, traversable));\n});\n\n\n/***/ }),\n/* 355 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nmodule.exports = (function() {\n  var ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n           '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n           '\\u2029\\uFEFF';\n  var zeroWidth = '\\u200b';\n  var hasProtoTrim = (typeof String.prototype.trim === 'function');\n  if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n    return _curry1(function trim(str) {\n      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n      return str.replace(beginRx, '').replace(endRx, '');\n    });\n  } else {\n    return _curry1(function trim(str) {\n      return str.trim();\n    });\n  }\n}());\n\n\n/***/ }),\n/* 356 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _arity = __webpack_require__(12);\nvar _concat = __webpack_require__(10);\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n */\nmodule.exports = _curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function() {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\n\n\n/***/ }),\n/* 357 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nmodule.exports = _curry1(function unapply(fn) {\n  return function() {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\n\n\n/***/ }),\n/* 358 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\nvar nAry = __webpack_require__(45);\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      var takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nmodule.exports = _curry1(function unary(fn) {\n  return nAry(1, fn);\n});\n\n\n/***/ }),\n/* 359 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar curryN = __webpack_require__(5);\n\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      var addFour = a => b => c => d => a + b + c + d;\n *\n *      var uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nmodule.exports = _curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function() {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\n\n\n/***/ }),\n/* 360 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nmodule.exports = _curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 361 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry2 = __webpack_require__(0);\nvar compose = __webpack_require__(51);\nvar uniq = __webpack_require__(66);\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nmodule.exports = _curry2(compose(uniq, _concat));\n\n\n/***/ }),\n/* 362 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _concat = __webpack_require__(10);\nvar _curry3 = __webpack_require__(2);\nvar uniqWith = __webpack_require__(67);\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nmodule.exports = _curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\n\n\n/***/ }),\n/* 363 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nmodule.exports = _curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\n\n\n/***/ }),\n/* 364 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _identity = __webpack_require__(57);\nvar chain = __webpack_require__(50);\n\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nmodule.exports = chain(_identity);\n\n\n/***/ }),\n/* 365 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nmodule.exports = _curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\n\n\n/***/ }),\n/* 366 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry1 = __webpack_require__(1);\n\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nmodule.exports = _curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\n\n\n/***/ }),\n/* 367 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nmodule.exports = (function() {\n  // `Const` is a functor that effectively ignores the function given to `map`.\n  var Const = function(x) {\n    return {value: x, 'fantasy-land/map': function() { return this; }};\n  };\n\n  return _curry2(function view(lens, x) {\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    return lens(Const)(x).value;\n  });\n}());\n\n\n/***/ }),\n/* 368 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless\n * @example\n *\n *      // truncate :: String -> String\n *      var truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nmodule.exports = _curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\n\n\n/***/ }),\n/* 369 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\nvar equals = __webpack_require__(8);\nvar map = __webpack_require__(7);\nvar where = __webpack_require__(126);\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nmodule.exports = _curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\n\n\n/***/ }),\n/* 370 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _contains = __webpack_require__(19);\nvar _curry2 = __webpack_require__(0);\nvar flip = __webpack_require__(35);\nvar reject = __webpack_require__(47);\n\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nmodule.exports = _curry2(function(xs, list) {\n  return reject(flip(_contains)(xs), list);\n});\n\n\n/***/ }),\n/* 371 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nmodule.exports = _curry2(function xprod(a, b) { // = xprodWith(prepend); (takes about 3 times as long...)\n  var idx = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = [];\n  while (idx < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[result.length] = [a[idx], b[j]];\n      j += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n/***/ }),\n/* 372 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nmodule.exports = _curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\n\n\n/***/ }),\n/* 373 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry2 = __webpack_require__(0);\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\n\n\n/***/ }),\n/* 374 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _curry3 = __webpack_require__(2);\n\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,b -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      var f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nmodule.exports = _curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\n\n\n/***/ }),\n/* 375 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){\n\n\t//UMD\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn factory();\n\t\t}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t *          a lot of methods and functionality to all classes that extend\n\t\t *          it. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t    var Tone = function (inputs, outputs) {\n\t        /**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(inputs) || inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        /**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(outputs) || outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which \n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds. \n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (this.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (this.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (this.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (this.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (this.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (this.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (this.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!this.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!this.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCLASS VARS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (this.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (this.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        if (!this.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!this.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Array.isArray(this.output)) {\n\t            outputNum = this.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (this.isArray(this.output)) {\n\t            if (this.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = this.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connectSeries = function () {\n\t        if (arguments.length > 1) {\n\t            var currentUnit = arguments[0];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.chain = function () {\n\t        if (arguments.length > 0) {\n\t            var currentUnit = this;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.fan = function () {\n\t        if (arguments.length > 0) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.connect(arguments[i]);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    //give native nodes chain and fan methods\n\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUTILITIES / HELPERS / MATHS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both \n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property. \n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop.\n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return this.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    /**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t        var options = {};\n\t        if (values.length === 1 && this.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!this.isUndef(defaults)) {\n\t            return this.defaultArg(options, defaults);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t */\n\t    Tone.prototype.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t */\n\t    Tone.prototype.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t */\n\t    Tone.prototype.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t */\n\t    Tone.prototype.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t */\n\t    Tone.prototype.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states. \n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t */\n\t    Tone.prototype.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}   \n\t\t */\n\t    Tone.prototype.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}   \n\t\t */\n\t    Tone.prototype.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.prototype.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes. \n\t\t *  @private\n\t\t *  @type {Tone.Context|undefined}\n\t\t */\n\t    var audioContext;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            if (Tone.Context) {\n\t                Tone.Context.emit('init', audioContext);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    Tone.version = 'r10';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t    };\n\t    Tone.extend(Tone.SignalBase);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t        } else if (this.isFunction(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t                //default units\n\t                units = this.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (this.isString(val)) {\n\t                this.set(val);\n\t            } else if (this.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!this.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!this.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (this.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (this.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!this.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = this.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @override\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * this.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz. \n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value. \n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.prototype.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function (context) {\n\t        Tone.Emitter.call(this);\n\t        if (!context) {\n\t            context = new window.AudioContext();\n\t        }\n\t        this._context = context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = 'interactive';\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lookAhead = 0.1;\n\t        /**\n\t\t\t *  How often the update look runs\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._updateInterval = this._lookAhead / 3;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t *  @private\n\t\t\t *  @type  {WebWorker}\n\t\t\t */\n\t        this._worker = this._createWorker();\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (this.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime;\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.addEventListener('message', function () {\n\t            // tick the clock\n\t            this.emit('tick');\n\t        }.bind(this));\n\t        //lag compensation\n\t        worker.addEventListener('message', function () {\n\t            var now = this.now();\n\t            if (this.isNumber(this._lastUpdate)) {\n\t                var diff = now - this._lastUpdate;\n\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t            }\n\t            this._lastUpdate = now;\n\t        }.bind(this));\n\t        return worker;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  This is the time that the clock is falling behind\n\t\t *  the scheduled update interval. The Context automatically\n\t\t *  adjusts for the lag and schedules further in advance.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lag\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t        get: function () {\n\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t            diff = Math.max(diff, 0);\n\t            return diff;\n\t        }\n\t    });\n\t    /**\n\t\t *  The amount of time in advance that events are scheduled.\n\t\t *  The lookAhead will adjust slightly in response to the \n\t\t *  measured update time to try to avoid clicks.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lookAhead\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t        get: function () {\n\t            return this._lookAhead;\n\t        },\n\t        set: function (lA) {\n\t            this._lookAhead = lA;\n\t        }\n\t    });\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name updateInterval\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @static\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (this.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    function shimConnect() {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                if (Array.isArray(B.input)) {\n\t                    if (Tone.prototype.isUndef(inNum)) {\n\t                        inNum = 0;\n\t                    }\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Array.isArray(B.input)) {\n\t                if (Tone.prototype.isUndef(inNum)) {\n\t                    inNum = 0;\n\t                }\n\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    }\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        shimConnect();\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /** \n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  <ul>\n\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t *  </ul>\n\t\t\t *  \n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value. \n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /** \n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /** \n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /** \n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /** \n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t *  is twice is loud. \n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /** \n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /** \n\t\t\t *  Beats per minute. \n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /** \n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /** \n\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /** \n\t\t\t *  Angle between 0 and 360. \n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /** \n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /** \n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /** \n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /** \n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /** \n\t\t\t *  A frequency represented by a letter name, \n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /** \n\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /** \n\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /** \n\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t *  <ul>\n\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t *  </ul>\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time \n\t\t *  @return {Seconds} \n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (this.isNumber(time)) {\n\t            return time;\n\t        } else if (this.isUndef(time)) {\n\t            return this.now();\n\t        } else if (this.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq \n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (this.isNumber(freq)) {\n\t            return freq;\n\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (this.isNumber(time) || this.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (this.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter. \n\t\t *  @extends {Tone}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param.defaults);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by \n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = null;\n\t        if (this.isObject(options.lfo)) {\n\t            this.value = options.lfo;\n\t        } else if (!this.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter. \n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            if (this.isObject(value)) {\n\t                //throw an error if the LFO needs to be included\n\t                if (this.isUndef(Tone.LFO)) {\n\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t                }\n\t                //remove the old one\n\t                if (this._lfo) {\n\t                    this._lfo.dispose();\n\t                }\n\t                this._lfo = new Tone.LFO(value).start();\n\t                this._lfo.connect(this.input);\n\t            } else {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._param.cancelScheduledValues(0);\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return this.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return this.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        value = this._fromUnits(value);\n\t        time = this.toSeconds(time);\n\t        if (time <= this.now() + this.blockTime) {\n\t            this._param.value = value;\n\t        } else {\n\t            this._param.setValueAtTime(value, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to \n\t\t *  schedule changes from the current value. \n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = this.defaultArg(now, this.now());\n\t        var currentVal = this._param.value;\n\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t * signal.exponentialRampToValue(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t * signal.linearRampToValue(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Param} this \n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array} values    \n\t\t *  @param {Time} startTime \n\t\t *  @param {Time} duration  \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        for (var i = 0; i < values.length; i++) {\n\t            values[i] = this._fromUnits(values[i]);\n\t        }\n\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially \n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = this.defaultArg(rampTime, 0);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampToValue(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The LFO created by the signal instance. If none\n\t\t *  was created, this is null.\n\t\t *  @type {Tone.LFO}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Param#\n\t\t *  @name lfo\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t        get: function () {\n\t            return this._lfo;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param = null;\n\t        if (this._lfo) {\n\t            this._lfo.dispose();\n\t            this._lfo = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain.defaults);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    //STATIC///////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  input   The number of inputs\n\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t *  @return  {Tone}  this\n\t\t *  @internal\n\t\t */\n\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = new Tone.Gain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = new Tone.Gain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._gain = this.context.createGain();\n\t        options.param = this._gain.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this._gain.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).chain(this._gain);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._gain.disconnect();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t *         Internally, events are stored in time order for fast \n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list. \n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t *                           timeline. \n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (this.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._timeline.length) {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t        } else {\n\t            this._timeline.push(event);\n\t        }\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time) {\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t        var index = this._search(time);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        if (this._timeline.length) {\n\t            var index = this._search(time);\n\t            if (index >= 0) {\n\t                this._timeline = this._timeline.slice(index + 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Does a binary serach on the timeline array and returns the \n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time  \n\t\t *  @return  {Number} the index in the timeline array \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time) {\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event.time === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent.time === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event.time < time && nextEvent.time > time) {\n\t                return midPoint;\n\t            } else if (event.time > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else if (event.time < time) {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for \n\t\t *  removing items from the array. \n\t\t *  @param  {Function}  callback \n\t\t *  @param  {Number=}    lowerBound     \n\t\t *  @param  {Number=}    upperBound    \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback(this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        if (this._toRemove.length > 0) {\n\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t                if (index !== -1) {\n\t                    this._timeline.splice(index, 1);\n\t                }\n\t            }\n\t            this._toRemove = [];\n\t        }\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback(event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(10);\n\t        //constructors\n\t        Tone.Signal.apply(this, options);\n\t        options.param = this._param;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Curve: 'curve',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal. \n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._initial = convertedVal;\n\t            this.cancelScheduledValues();\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = this.defaultArg(scaling, 1);\n\t        //copy the array\n\t        var floats = new Array(values.length);\n\t        for (var i = 0; i < floats.length; i++) {\n\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        duration = this.toSeconds(duration);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Curve,\n\t            'value': floats,\n\t            'time': startTime,\n\t            'duration': duration\n\t        });\n\t        //set the first value\n\t        this._param.setValueAtTime(floats[0], startTime);\n\t        //schedule a lienar ramp for each of the segments\n\t        for (var j = 1; j < floats.length; j++) {\n\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after \n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t            //if the curve is still playing\n\t            //cancel the curve\n\t            this.cancelScheduledValues(time);\n\t            this.linearRampToValueAtTime(val, time);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t            this.setValueAtTime(val, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previouVal;\n\t            if (previous === null) {\n\t                previouVal = this._initial;\n\t            } else {\n\t                previouVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t        var len = curve.length;\n\t        // If time is after duration, return the last curve value\n\t        if (time >= start + duration) {\n\t            return curve[len - 1];\n\t        } else if (time <= start) {\n\t            return curve[0];\n\t        } else {\n\t            var progress = (time - start) / duration;\n\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t            var lowerVal = curve[lowerIndex];\n\t            var upperVal = curve[upperIndex];\n\t            if (upperIndex === lowerIndex) {\n\t                return lowerVal;\n\t            } else {\n\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = this.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t *                         0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        /** \n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value \n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for \n\t\t * syncronizing visual output to the envelope. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack. \n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (this.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (this.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (this.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (this.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = this.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampToValue(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampToValue(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.exponentialRampToValue(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (this.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease. \n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal. \n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves. \n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t *                               0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        this.input = null;\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's \n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser.defaults);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The return type of the analysis\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._returnType = options.returnType;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t        this.returnType = options.returnType;\n\t        this.minDecibels = options.minDecibels;\n\t        this.maxDecibels = options.maxDecibels;\n\t    };\n\t    Tone.extend(Tone.Analyser);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'returnType': 'byte',\n\t        'type': 'fft',\n\t        'smoothing': 0.8,\n\t        'maxDecibels': -30,\n\t        'minDecibels': -100\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t *  byte values are between [0,255]. float values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.ReturnType = {\n\t        Byte: 'byte',\n\t        Float: 'float'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the \n\t\t *  result as a TypedArray. \n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.analyse = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteFrequencyData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t            }\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t            }\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t *  are between 0-255. \"float\" values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t        get: function () {\n\t            return this._returnType;\n\t        },\n\t        set: function (type) {\n\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t            } else {\n\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t            }\n\t            this._returnType = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name minDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t        get: function () {\n\t            return this._analyser.minDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.minDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name maxDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t        get: function () {\n\t            return this._analyser.maxDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.maxDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor.defaults);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = this.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param.dispose();\n\t        this._param = null;\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = this.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!this.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (this.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (this.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return this.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t *          (default), -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter.defaults);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            this.connectSeries.apply(this, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit.defaults);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3.defaults);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay.defaults);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed. \n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t *          the amplitude of an incoming signal. \n\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known \n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack  \n\t\t *  @param   {Time} release \n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.Envelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming \n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return this.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = this.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock.defaults);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1,\n\t        'lookAhead': 'auto'\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'offset': offset\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t *                          when the page was loaded.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //get the frequency value to compute the value of the next loop\n\t        var now = this.now();\n\t        //if it's started\n\t        var lookAhead = this.context.lookAhead;\n\t        var updateInterval = this.context.updateInterval;\n\t        var lagCompensation = this.context.lag * 2;\n\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t        while (loopInterval > this._nextTick && this._state) {\n\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t            if (currentState !== this._lastState) {\n\t                this._lastState = currentState;\n\t                var event = this._state.get(this._nextTick);\n\t                // emit an event\n\t                if (currentState === Tone.State.Started) {\n\t                    //correct the time\n\t                    this._nextTick = event.time;\n\t                    if (!this.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this.emit('start', event.time, this.ticks);\n\t                } else if (currentState === Tone.State.Stopped) {\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                } else if (currentState === Tone.State.Paused) {\n\t                    this.emit('pause', event.time);\n\t                }\n\t            }\n\t            var tickTime = this._nextTick;\n\t            if (this.frequency) {\n\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t                if (currentState === Tone.State.Started) {\n\t                    this.callback(tickTime);\n\t                    this.ticks++;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            if (this._root !== null) {\n\t                this._root.traverse(function (node) {\n\t                    allNodes.push(node);\n\t                });\n\t            }\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized. \n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument. \n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tLOOPING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.loop = false;\n\t        /** \n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /** \n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tCLOCK/TEMPO\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t        /**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t        this._clock = new Tone.Clock({\n\t            'callback': this._processTick.bind(this),\n\t            'frequency': 0\n\t        });\n\t        this._bindClockEvents();\n\t        /**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t        this.bpm = this._clock.frequency;\n\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t        this.bpm.units = Tone.Type.BPM;\n\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t        this._readOnly('bpm');\n\t        /**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tTIMELINE EVENTS\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduledEvents = {};\n\t        /**\n\t\t\t *  The event ID counter\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eventID = 0;\n\t        /**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = new Tone.Timeline();\n\t        /**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t        /**\n\t\t\t *  Events that occur once\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._onceEvents = new Tone.Timeline();\n\t        /** \n\t\t\t *  All of the synced Signals\n\t\t\t *  @private \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._syncedSignals = [];\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tSWING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t        //8n\n\t        /**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingAmount = 0;\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks === this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //process the single occurrence events\n\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t            event.callback(tickTime);\n\t            //remove the event\n\t            delete this._scheduledEvents[event.id.toString()];\n\t        }.bind(this));\n\t        //and clear the single occurrence timeline\n\t        this._onceEvents.cancelBefore(ticks);\n\t        //fire the next tick events if their time has come\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.callback(tickTime);\n\t        });\n\t        //process the repeated events\n\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t            if ((ticks - event.time) % event.interval === 0) {\n\t                event.callback(tickTime);\n\t            }\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._timeline\n\t        };\n\t        this._timeline.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`. \n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event. \n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        if (interval <= 0) {\n\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t        }\n\t        var event = {\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t            'interval': this.toTicks(interval),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._repeatedEvents\n\t        };\n\t        this._repeatedEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t *  Note that if the given time is less than the current transport time, \n\t\t *  the event will be invoked immediately. \n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var id = this._eventID++;\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'id': id\n\t        };\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._onceEvents\n\t        };\n\t        this._onceEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = this.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._onceEvents.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!this.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (this.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time. \n\t\t *  @param {TransportTime} startPosition \n\t\t *  @param {TransportTime} endPosition   \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default value is an 8th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value \n\t\t *  after other objects have been created can cause problems. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds|String}\n\t\t *  @name latencyHint\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return Tone.Clock.latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            Tone.Clock.latencyHint = hint;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._onceEvents.dispose();\n\t        this._onceEvents = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t            //store the Transport on the context so it can be retrieved later\n\t            context.Transport = Tone.Transport;\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers). \n\t\t *          It provides useful conveniences such as the ability \n\t\t *          to set the volume and mute the entire application. \n\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume();\n\t        /**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //connections\n\t        this.input.chain(this.output, this.context.destination);\n\t    };\n\t    Tone.extend(Tone.Master);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t *  chained in the master effects chain. \n\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter \n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} this\n\t\t */\n\t    AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the \n\t\t *          start/stop of Tone.Transport. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t * \n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t * \n\t\t */\n\t    Tone.Source = function (options) {\n\t        // this.createInsOuts(0, 1);\n\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given, \n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = this.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given, \n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time. \n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this));\n\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        this._synced = false;\n\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now] \n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        this._oscillator.start(this.toSeconds(time));\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            this._oscillator.stop(this.toSeconds(time));\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240; \n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br> \n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t * PeriodicWave equations are from the \n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based \n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag \n\t\t *  @param  {NormalRange}  phase \n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Zero = function () {\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO.defaults);\n\t        /** \n\t\t\t *  The oscillator. \n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type} \n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t *         smooth gain reduction and almost completely prevent \n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback. \n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().start();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input\n\t\t * var level = meter.value;\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'smoothing'\n\t        ], Tone.Meter.defaults);\n\t        /**\n\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t *  the signal value of the input. \n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t        this._analyser.returnType = 'float';\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t        /**\n\t\t\t *  The last computed value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastValue = 0;\n\t    };\n\t    Tone.extend(Tone.Meter);\n\t    /**\n\t\t *  @private\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Meter.Type = {\n\t        Level: 'level',\n\t        Signal: 'signal'\n\t    };\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = {\n\t        'smoothing': 0.8,\n\t        'type': Tone.Meter.Type.Level\n\t    };\n\t    /**\n\t\t * The current value of the meter. A value of 1 is\n\t\t * \"unity\".\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t        get: function () {\n\t            var signal = this._analyser.analyse();\n\t            if (this.type === Tone.Meter.Type.Level) {\n\t                //rms\n\t                var sum = 0;\n\t                for (var i = 0; i < signal.length; i++) {\n\t                    sum += Math.pow(signal[i], 2);\n\t                }\n\t                var rms = Math.sqrt(sum / signal.length);\n\t                //smooth it\n\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t                this._lastValue = rms;\n\t                //scale it\n\t                var unity = 0.35;\n\t                var val = rms / unity;\n\t                //scale the output curve\n\t                return Math.sqrt(val);\n\t            } else {\n\t                return signal[0];\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        this.createInsOuts(0, 2);\n\t        /** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        /** \n\t\t\t *  Left channel output. \n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors. \n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful \n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = this.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t *  @example\n\t\t *  //pan the input signal hard right. \n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        if (this._hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner);\n\t    /**\n\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (this._hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D.defaults);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener, \n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume. \n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol.defaults);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0.5,\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate.defaults);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (this.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (this.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (this.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = this.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (this.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (this.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (this.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern.defaults);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom.defaults);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          <br><br>\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer.defaults);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (this.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._currentDownloads--;\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t *                               If the channel is more than 1, the input array\n\t\t *                               is expected to be a multidimensional array\n\t\t *                               with dimensions equal to the number of channels.\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (this.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (this.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = this.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  the total number of downloads\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._currentDownloads = 0;\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = onload || Tone.noOp;\n\t        function onError(e) {\n\t            if (onerror) {\n\t                onerror(e);\n\t                Tone.Buffer.emit('error', e);\n\t            } else {\n\t                throw new Error(e);\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._currentDownloads++;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._currentDownloads--;\n\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t                        // clear the downloads\n\t                        Tone.Buffer._downloadQueue = [];\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t            request.abort();\n\t        });\n\t        Tone.Buffer._currentDownloads = 0;\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \n\t\t */\n\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t        urls = this._flattenUrls(urls);\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (this.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Flatten an object into a single depth object. \n\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t        var toReturn = {};\n\t        for (var i in ob) {\n\t            if (!ob.hasOwnProperty(i))\n\t                continue;\n\t            if (this.isObject(ob[i])) {\n\t                var flatObject = this._flattenUrls(ob[i]);\n\t                for (var x in flatObject) {\n\t                    if (!flatObject.hasOwnProperty(x))\n\t                        continue;\n\t                    toReturn[i + '.' + x] = flatObject[x];\n\t                }\n\t            } else {\n\t                toReturn[i] = ob[i];\n\t            }\n\t        }\n\t        return toReturn;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = this.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, input) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        if (this.isUndef(input)) {\n\t            input = this.input;\n\t        }\n\t        Buses[channelName].connect(input);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Listener = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], ListenerConstructor.defaults);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.forwardX,\n\t            options.forwardY,\n\t            options.forwardZ,\n\t            options.upX,\n\t            options.upY,\n\t            options.upZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/forward\n\t        this.forwardX = options.forwardX;\n\t        this.forwardY = options.forwardY;\n\t        this.forwardZ = options.forwardZ;\n\t        this.upX = options.upX;\n\t        this.upY = options.upY;\n\t        this.upZ = options.upZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, offlineContext);\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t        //modify the lookAhead and updateInterval to one block\n\t        this.lookAhead = this.blockTime;\n\t        this.updateInterval = this.blockTime;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t *  @private\n\t\t */\n\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t        //dummy worker that does nothing\n\t        return {\n\t            postMessage: function () {\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += Tone.prototype.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t */\n\t    Tone.Effect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback']);\n\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (this.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t *                                 of the reverb. \n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        this.connectSeries.apply(this, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        this.connectSeries.apply(this, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event.defaults);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  The probability that the callback will be invoked\n\t\t\t *  at the scheduled time. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @example\n\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t * event.probability = 0.5;\n\t\t\t */\n\t        this.probability = options.probability;\n\t        /**\n\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t */\n\t        this.humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = this.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!this.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (this.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = this.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!this.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop.defaults);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t            return this._pattern.index;\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stoped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part.defaults);\n\t        /**\n\t\t\t *  If the part is looping or not\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  The playback rate of the part\n\t\t\t *  @type  {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  The start offset\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  Keeps track of the current state\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        /**\n\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //add the events\n\t        var events = this.defaultArg(options.events, []);\n\t        if (!this.isUndef(options.events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                if (Array.isArray(events[i])) {\n\t                    this.add(events[i][0], events[i][1]);\n\t                } else {\n\t                    this.add(events[i]);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!this.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!this.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        after = this.toTicks(after);\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        ctx = this.defaultArg(ctx, this);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var e = this._events[i];\n\t            if (e instanceof Tone.Part) {\n\t                e._forEach(callback, ctx);\n\t            } else {\n\t                callback.call(ctx, e);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern.defaults);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence.defaults);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!this.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (this.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (this.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now() + this.blockTime;\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime * 1000);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0. \n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the \n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start(0);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = this.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given \n\t\t *  duration. \n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'buffer',\n\t            'onended'\n\t        ], Tone.BufferSource.defaults);\n\t        /**\n\t\t\t *  The callback to invoke after the \n\t\t\t *  buffer source is done playing. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set the buffer initially\n\t        if (!this.isUndef(options.buffer)) {\n\t            this.buffer = options.buffer;\n\t        }\n\t        this.loop = options.loop;\n\t    };\n\t    Tone.extend(Tone.BufferSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t        }\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = this.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //the values in seconds\n\t            time = this.toSeconds(time);\n\t            this._source.start(time, offset);\n\t            gain = this.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            //the fadeIn time\n\t            if (this.isUndef(fadeInTime)) {\n\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t            } else {\n\t                fadeInTime = this.toSeconds(fadeInTime);\n\t            }\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time + fadeInTime;\n\t            if (!this.isUndef(duration)) {\n\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t                duration = this.toSeconds(duration);\n\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t *  buffer out. \n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //the fadeOut time\n\t            if (this.isUndef(fadeOutTime)) {\n\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t            } else {\n\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t            }\n\t            this._stopTime = time + fadeOutTime;\n\t            //cancel the end curve\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            //set a new one\n\t            if (fadeOutTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t                time += fadeOutTime;\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t            }\n\t            // fix for safari bug and old FF\n\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t                this._source.stop(time);\n\t            }\n\t            clearTimeout(this._onendedTimeout);\n\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended. \n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t        this.dispose();\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            if (this._source) {\n\t                return this._source.buffer;\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t        set: function (buffer) {\n\t            if (buffer instanceof Tone.Buffer) {\n\t                this._source.buffer = buffer.get();\n\t            } else {\n\t                this._source.buffer = buffer;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        this.onended = null;\n\t        if (this._source) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        if (this._gainNode) {\n\t            this._gainNode.dispose();\n\t            this._gainNode = null;\n\t        }\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        this.output = null;\n\t        clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now() + this.blockTime;\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tthe noise arrays. only generated once on init\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    createBuffers();\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        Tone.Instrument.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth.defaults);\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t        //set the volume initially\n\t        this.volume.value = options.volume;\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = this.optionsObject(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player.defaults);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        if (this._buffer.loaded) {\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //make sure it has a positive duration\n\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t            duration = this.toSeconds(duration);\n\t            //the values in seconds\n\t            startTime = this.toSeconds(startTime);\n\t            //make the source\n\t            this._source = this.context.createBufferSource();\n\t            this._source.buffer = this._buffer.get();\n\t            //set the looping properties\n\t            if (this._loop) {\n\t                this._source.loop = this._loop;\n\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t            } else if (!this._synced) {\n\t                //if it's not looping, set the state change at the end of the sample\n\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t            }\n\t            //and other properties\n\t            this._source.playbackRate.value = this._playbackRate;\n\t            this._source.connect(this.output);\n\t            //start it\n\t            if (this._loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t                var loopStart = this._source.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                if (offset > loopEnd) {\n\t                    //move the offset back\n\t                    while (offset > loopEnd) {\n\t                        offset -= loopDuration;\n\t                    }\n\t                }\n\t                this._source.start(startTime, offset);\n\t            } else {\n\t                this._source.start(startTime, offset, duration);\n\t            }\n\t        } else {\n\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {String} url the url of the audio file\n\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t *  @example\n\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t * \t//repitch the sample down a half step\n\t\t * \tsampler.triggerAttack(-1);\n\t\t * }).toMaster();\n\t\t */\n\t    Tone.Sampler = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Sampler.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The sample player.\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t        this.player = new Tone.Player(options.url, options.onload);\n\t        this.player.retrigger = true;\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        this.player.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.loop = options.loop;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'reverse': false,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.1\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the start of the sample. \n\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t *                              be repitched. \n\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t        this.player.start(time);\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t *  envelope has fully released. \n\t\t *  \n\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerRelease();\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t *                                  sample should be pitch shifted.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t *  @memberOf Tone.Sampler#\n\t\t *  @name triggerAttackRelease\n\t\t *  @method triggerAttackRelease\n\t\t */\n\t    /**\n\t\t * If the output sample should loop or not.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t        get: function () {\n\t            return this.player.loop;\n\t        },\n\t        set: function (loop) {\n\t            this.player.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.player.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.player.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The buffer to play.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t        get: function () {\n\t            return this.player.buffer;\n\t        },\n\t        set: function (buff) {\n\t            this.player.buffer = buff;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.player.dispose();\n\t        this.player = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t *                                                to the MultiPlayer\n\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var multiPlayer = new MultiPlayer({\n\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t * }, function(){\n\t\t * \tmultiPlayer.start(\"kick\");\n\t\t * });\n\t\t *  @example\n\t\t * //can also store the values in an array\n\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t * function(){\n\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t * \tmultiPlayer.start(1);\n\t\t * });\n\t\t */\n\t    Tone.MultiPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'urls',\n\t            'onload'\n\t        ], Tone.MultiPlayer.defaults);\n\t        if (options.urls instanceof Tone.Buffers) {\n\t            /**\n\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t */\n\t            this.buffers = options.urls;\n\t        } else {\n\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t        }\n\t        /**\n\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t *  The fade in envelope which is applied\n\t\t\t *  to the beginning of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fade out envelope which is applied\n\t\t\t *  to the end of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.MultiPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t * Make the source from the buffername\n\t\t * @param  {String} bufferName\n\t\t * @return {Tone.BufferSource}\n\t\t * @private\n\t\t */\n\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t        var buffer;\n\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t            buffer = this.buffers.get(bufferName).get();\n\t        } else if (bufferName instanceof Tone.Buffer) {\n\t            buffer = bufferName.get();\n\t        } else if (bufferName instanceof AudioBuffer) {\n\t            buffer = bufferName;\n\t        }\n\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t            this._activeSources[bufferName] = [];\n\t        }\n\t        this._activeSources[bufferName].push(source);\n\t        return source;\n\t    };\n\t    /**\n\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t        if (duration) {\n\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t        }\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.loop = true;\n\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the first played instance of the buffer name.\n\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t            time = this.toSeconds(time);\n\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t        } else {\n\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop all currently playing buffers at the given time.\n\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var bufferName in this._activeSources) {\n\t            var sources = this._activeSources[bufferName];\n\t            for (var i = 0; i < sources.length; i++) {\n\t                sources[i].stop(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add another buffer to the available buffers.\n\t\t *  @param {String} name The name to that the buffer is refered\n\t\t *                       to in start/stop methods. \n\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t *                                  or the buffer.\n\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t */\n\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t        this.buffers.add(name, url, callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source. \"started\"\n\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.MultiPlayer#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t        get: function () {\n\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.MultiPlayer#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        for (var bufferName in this._activeSources) {\n\t            this._activeSources[bufferName].forEach(function (source) {\n\t                source.dispose();\n\t            });\n\t        }\n\t        this.buffers.dispose();\n\t        this.buffers = null;\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.MultiPlayer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer.defaults);\n\t        Tone.Source.call(this);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Plays the buffer with a small envelope\n\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        /**\n\t\t\t *  The amount of time randomly added\n\t\t\t *  or subtracted from the grain's offset\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.drift = options.drift;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'drift': 0,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = this.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        //unmute the player\n\t        this._player.volume.setValueAtTime(0, time);\n\t        if (duration) {\n\t            this._stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t        //mute the player\n\t        this._player.volume.cancelScheduledValues(time);\n\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time \n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var bufferDuration = this.buffer.duration;\n\t        if (this.loop && this._loopEnd > 0) {\n\t            bufferDuration = this._loopEnd;\n\t        }\n\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t        var offset = this._offset - this._overlap + drift;\n\t        var detune = this.detune / 100;\n\t        //keep the offset within the limits of the buffer\n\t        offset = Math.max(offset, 0);\n\t        offset = Math.min(offset, bufferDuration);\n\t        var originalFadeIn = this._player.fadeIn;\n\t        if (this.loop && this._offset > bufferDuration) {\n\t            //play the end\n\t            var endSegmentDuration = this._offset - bufferDuration;\n\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t            //and play the beginning \n\t            offset = this._offset % bufferDuration;\n\t            this._offset = this._loopStart;\n\t            this._player.fadeIn = 0;\n\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t        } else if (this._offset > bufferDuration) {\n\t            //set the state to stopped. \n\t            this.stop(time);\n\t        } else {\n\t            if (offset === 0) {\n\t                this._player.fadeIn = 0;\n\t            }\n\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t        }\n\t        this._player.fadeIn = originalFadeIn;\n\t        //increment the offset\n\t        var duration = this._clock._nextTick - time;\n\t        this._offset += duration * this._playbackRate;\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {[type]}  [description]\n\t\t */\n\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the \n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between \n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            time = this.toSeconds(time);\n\t            this._overlap = time;\n\t            if (this._overlap < 0) {\n\t                this._player.fadeIn = 0.01;\n\t                this._player.fadeOut = 0.01;\n\t            } else {\n\t                this._player.fadeIn = time;\n\t                this._player.fadeOut = time;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._player.dispose();\n\t        this._player = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check \n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *         \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t * \n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t        /**\n\t\t\t *  The MediaStreamNode \n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t        return this.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (this.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                if (!device) {\n\t                    //otherwise just take the first one\n\t                    device = devices[0];\n\t                }\n\t            }\n\t            //didn't find a matching device\n\t            if (!device) {\n\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @example\n\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is \n\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the \n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n/***/ }),\n/* 376 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n\nWebMidi v2.0.0-rc.5\n\nWebMidi.js helps you tame the Web MIDI API. Send and receive MIDI messages with ease. Control instruments with user-friendly functions (playNote, sendPitchBend, etc.). React to MIDI input with simple event listeners (noteon, pitchbend, controlchange, etc.).\nhttps://github.com/cotejp/webmidi\n\n\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016, Jean-Philippe Côté\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n!function(scope){\"use strict\";function WebMidi(){if(WebMidi.prototype._singleton)throw new Error(\"WebMidi is a singleton, it cannot be instantiated directly.\");WebMidi.prototype._singleton=this,this._inputs=[],this._outputs=[],this._userHandlers={},this._stateChangeQueue=[],this._processingStateChange=!1,this._midiInterfaceEvents=[\"connected\",\"disconnected\"],this._notes=[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"],this._semitones={C:0,D:2,E:4,F:5,G:7,A:9,B:11},Object.defineProperties(this,{MIDI_SYSTEM_MESSAGES:{value:{sysex:240,timecode:241,songposition:242,songselect:243,tuningrequest:246,sysexend:247,clock:248,start:250,\"continue\":251,stop:252,activesensing:254,reset:255,unknownsystemmessage:-1},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MESSAGES:{value:{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,channelmode:11,programchange:12,channelaftertouch:13,pitchbend:14},writable:!1,enumerable:!0,configurable:!1},MIDI_REGISTERED_PARAMETER:{value:{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]},writable:!1,enumerable:!0,configurable:!1},MIDI_CONTROL_CHANGE_MESSAGES:{value:{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MODE_MESSAGES:{value:{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127},writable:!1,enumerable:!0,configurable:!1}}),Object.defineProperties(this,{supported:{enumerable:!0,get:function(){return\"requestMIDIAccess\"in navigator}},enabled:{enumerable:!0,get:function(){return void 0!==this[\"interface\"]}.bind(this)},inputs:{enumerable:!0,get:function(){return this._inputs}.bind(this)},outputs:{enumerable:!0,get:function(){return this._outputs}.bind(this)},sysexEnabled:{enumerable:!0,get:function(){return!(!this[\"interface\"]||!this[\"interface\"].sysexEnabled)}.bind(this)},time:{enumerable:!0,get:function(){return window.performance.now()}}})}function Input(midiInput){var that=this;this._userHandlers={channel:{},system:{}},this._midiInput=midiInput,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return that._midiInput.connection}},id:{enumerable:!0,get:function(){return that._midiInput.id}},manufacturer:{enumerable:!0,get:function(){return that._midiInput.manufacturer}},name:{enumerable:!0,get:function(){return that._midiInput.name}},state:{enumerable:!0,get:function(){return that._midiInput.state}}}),this._initializeUserHandlers()}function Output(midiOutput){var that=this;this._midiOutput=midiOutput,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return that._midiOutput.connection}},id:{enumerable:!0,get:function(){return that._midiOutput.id}},manufacturer:{enumerable:!0,get:function(){return that._midiOutput.manufacturer}},name:{enumerable:!0,get:function(){return that._midiOutput.name}},state:{enumerable:!0,get:function(){return that._midiOutput.state}}})}var wm=new WebMidi;WebMidi.prototype.enable=function(callback,sysex){return this.enabled?void 0:this.supported?void navigator.requestMIDIAccess({sysex:sysex}).then(function(midiAccess){this[\"interface\"]=midiAccess,this._resetInterfaceUserHandlers(),this[\"interface\"].onstatechange=this._onInterfaceStateChange.bind(this),this._onInterfaceStateChange(null),\"function\"==typeof callback&&callback.call(this)}.bind(this),function(err){\"function\"==typeof callback&&callback.call(this,err)}.bind(this)):void(\"function\"==typeof callback&&callback(new Error(\"The Web MIDI API is not supported by your browser.\")))},WebMidi.prototype.disable=function(){if(!this.supported)throw new Error(\"The Web MIDI API is not supported by your browser.\");this[\"interface\"]=void 0,this._inputs=[],this._outputs=[],this._resetInterfaceUserHandlers()},WebMidi.prototype.addListener=function(type,listener){if(!this.enabled)throw new Error(\"WebMidi must be enabled before adding event listeners.\");if(\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(!(this._midiInterfaceEvents.indexOf(type)>=0))throw new TypeError(\"The specified event type is not supported.\");return this._userHandlers[type].push(listener),this},WebMidi.prototype.hasListener=function(type,listener){if(!this.enabled)throw new Error(\"WebMidi must be enabled before checking event listeners.\");if(\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(!(this._midiInterfaceEvents.indexOf(type)>=0))throw new TypeError(\"The specified event type is not supported.\");for(var o=0;o<this._userHandlers[type].length;o++)if(this._userHandlers[type][o]===listener)return!0;return!1},WebMidi.prototype.removeListener=function(type,listener){if(!this.enabled)throw new Error(\"WebMidi must be enabled before removing event listeners.\");if(void 0!==listener&&\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(this._midiInterfaceEvents.indexOf(type)>=0)if(listener)for(var o=0;o<this._userHandlers[type].length;o++)this._userHandlers[type][o]===listener&&this._userHandlers[type].splice(o,1);else this._userHandlers[type]=[];else{if(void 0!==type)throw new TypeError(\"The specified event type is not supported.\");this._resetInterfaceUserHandlers()}return this},WebMidi.prototype.getInputById=function(id){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.inputs.length;i++)if(this.inputs[i].id===id)return this.inputs[i];return!1},WebMidi.prototype.getOutputById=function(id){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.outputs.length;i++)if(this.outputs[i].id===id)return this.outputs[i];return!1},WebMidi.prototype.getInputByName=function(name){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.inputs.length;i++)if(~this.inputs[i].name.indexOf(name))return this.inputs[i];return!1},WebMidi.prototype.getOutputByName=function(name){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.outputs.length;i++)if(~this.outputs[i].name.indexOf(name))return this.outputs[i];return!1},WebMidi.prototype.guessNoteNumber=function(input){var output=!1;if(input&&input.toFixed&&input>=0&&127>=input?output=Math.round(input):parseInt(input)>=0&&parseInt(input)<=127?output=parseInt(input):(\"string\"==typeof input||input instanceof String)&&(output=this.noteNameToNumber(input)),output===!1)throw new Error(\"Invalid note number (\"+input+\").\");return output},WebMidi.prototype.noteNameToNumber=function(name){\"string\"!=typeof name&&(name=\"\");var matches=name.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)/i);if(!matches)throw new RangeError(\"Invalid note name.\");var semitones=wm._semitones[matches[1].toUpperCase()],octave=parseInt(matches[3]),result=12*(octave+2)+semitones;if(matches[2].toLowerCase().indexOf(\"b\")>-1?result-=matches[2].length:matches[2].toLowerCase().indexOf(\"#\")>-1&&(result+=matches[2].length),0>semitones||-2>octave||octave>8||0>result||result>127)throw new RangeError(\"Invalid note name or note outside valid range.\");return result},WebMidi.prototype._updateInputsAndOutputs=function(){this._updateInputs(),this._updateOutputs()},WebMidi.prototype._updateInputs=function(){for(var i=0;i<this._inputs.length;i++){for(var remove=!0,updated=this[\"interface\"].inputs.values(),input=updated.next();input&&!input.done;input=updated.next())if(this._inputs[i]._midiInput===input.value){remove=!1;break}remove&&this._inputs.splice(i,1)}this[\"interface\"].inputs.forEach(function(nInput){for(var add=!0,j=0;j<this._inputs.length;j++)this._inputs[j]._midiInput===nInput&&(add=!1);add&&this._inputs.push(this._createInput(nInput))}.bind(this))},WebMidi.prototype._updateOutputs=function(){for(var i=0;i<this._outputs.length;i++){for(var remove=!0,updated=this[\"interface\"].outputs.values(),output=updated.next();output&&!output.done;output=updated.next())if(this._outputs[i]._midiOutput===output.value){remove=!1;break}remove&&this._outputs.splice(i,1)}this[\"interface\"].outputs.forEach(function(nOutput){for(var add=!0,j=0;j<this._outputs.length;j++)this._outputs[j]._midiOutput===nOutput&&(add=!1);add&&this._outputs.push(this._createOutput(nOutput))}.bind(this))},WebMidi.prototype._createInput=function(midiInput){var input=new Input(midiInput);return input._midiInput.onmidimessage=input._onMidiMessage.bind(input),input},WebMidi.prototype._createOutput=function(midiOutput){var output=new Output(midiOutput);return output._midiOutput.onmidimessage=output._onMidiMessage.bind(output),output},WebMidi.prototype._onInterfaceStateChange=function(e){if(this._stateChangeQueue.push(e),!this._processingStateChange){for(this._processingStateChange=!0;this._stateChangeQueue.length>0;)this._processStateChange(this._stateChangeQueue.shift());this._processingStateChange=!1}},WebMidi.prototype._processStateChange=function(e){if(this._updateInputsAndOutputs(),null!==e){var event={timestamp:e.timeStamp,type:e.port.state,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name};\"connected\"===e.port.state&&(\"output\"===e.port.type?event.output=this.getOutputById(e.port.id):\"input\"===e.port.type&&(event.input=this.getInputById(e.port.id))),this._userHandlers[e.port.state].forEach(function(handler){handler(event)})}},WebMidi.prototype._resetInterfaceUserHandlers=function(){for(var i=0;i<this._midiInterfaceEvents.length;i++)this._userHandlers[this._midiInterfaceEvents[i]]=[]},Input.prototype.addListener=function(type,channel,listener){var that=this;if(void 0===channel&&(channel=\"all\"),Array.isArray(channel)||(channel=[channel]),channel.forEach(function(item){if(\"all\"!==item&&!(item>=1&&16>=item))throw new RangeError(\"The 'channel' parameter is invalid.\")}),\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(wm.MIDI_SYSTEM_MESSAGES[type])this._userHandlers.system[type]||(this._userHandlers.system[type]=[]),this._userHandlers.system[type].push(listener);else{if(!wm.MIDI_CHANNEL_MESSAGES[type])throw new TypeError(\"The specified event type is not supported.\");if(channel.indexOf(\"all\")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}this._userHandlers.channel[type]||(this._userHandlers.channel[type]=[]),channel.forEach(function(ch){that._userHandlers.channel[type][ch]||(that._userHandlers.channel[type][ch]=[]),that._userHandlers.channel[type][ch].push(listener)})}return this},Input.prototype.on=Input.prototype.addListener,Input.prototype.hasListener=function(type,channel,listener){var that=this;if(\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(void 0===channel&&(channel=\"all\"),channel.constructor!==Array&&(channel=[channel]),wm.MIDI_SYSTEM_MESSAGES[type]){for(var o=0;o<this._userHandlers.system[type].length;o++)if(this._userHandlers.system[type][o]===listener)return!0}else if(wm.MIDI_CHANNEL_MESSAGES[type]){if(channel.indexOf(\"all\")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}return this._userHandlers.channel[type]?channel.every(function(chNum){var listeners=that._userHandlers.channel[type][chNum];return listeners&&listeners.indexOf(listener)>-1}):!1}return!1},Input.prototype.removeListener=function(type,channel,listener){var that=this;if(void 0!==listener&&\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(void 0===channel&&(channel=\"all\"),channel.constructor!==Array&&(channel=[channel]),wm.MIDI_SYSTEM_MESSAGES[type])if(void 0===listener)this._userHandlers.system[type]=[];else for(var o=0;o<this._userHandlers.system[type].length;o++)this._userHandlers.system[type][o]===listener&&this._userHandlers.system[type].splice(o,1);else if(wm.MIDI_CHANNEL_MESSAGES[type]){if(channel.indexOf(\"all\")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}if(!this._userHandlers.channel[type])return this;channel.forEach(function(chNum){var listeners=that._userHandlers.channel[type][chNum];if(listeners)if(void 0===listener)that._userHandlers.channel[type][chNum]=[];else for(var l=0;l<listeners.length;l++)listeners[l]===listener&&listeners.splice(l,1)})}else{if(void 0!==type)throw new TypeError(\"The specified event type is not supported.\");this._initializeUserHandlers()}return this},Input.prototype._initializeUserHandlers=function(){for(var prop1 in wm.MIDI_CHANNEL_MESSAGES)wm.MIDI_CHANNEL_MESSAGES.hasOwnProperty(prop1)&&(this._userHandlers.channel[prop1]={});for(var prop2 in wm.MIDI_SYSTEM_MESSAGES)wm.MIDI_SYSTEM_MESSAGES.hasOwnProperty(prop2)&&(this._userHandlers.system[prop2]=[])},Input.prototype._onMidiMessage=function(e){e.data[0]<240?this._parseChannelEvent(e):e.data[0]<=255&&this._parseSystemEvent(e)},Input.prototype._parseChannelEvent=function(e){var data1,data2,command=e.data[0]>>4,channel=(15&e.data[0])+1;e.data.length>1&&(data1=e.data[1],data2=e.data.length>2?e.data[2]:void 0);var event={target:this,data:e.data,timestamp:e.timeStamp,channel:channel};command===wm.MIDI_CHANNEL_MESSAGES.noteoff||command===wm.MIDI_CHANNEL_MESSAGES.noteon&&0===data2?(event.type=\"noteoff\",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.velocity=data2/127,event.rawVelocity=data2):command===wm.MIDI_CHANNEL_MESSAGES.noteon?(event.type=\"noteon\",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.velocity=data2/127,event.rawVelocity=data2):command===wm.MIDI_CHANNEL_MESSAGES.keyaftertouch?(event.type=\"keyaftertouch\",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.value=data2/127):command===wm.MIDI_CHANNEL_MESSAGES.controlchange&&data1>=0&&119>=data1?(event.type=\"controlchange\",event.controller={number:data1,name:this.getCcNameByNumber(data1)},event.value=data2):command===wm.MIDI_CHANNEL_MESSAGES.channelmode&&data1>=120&&127>=data1?(event.type=\"channelmode\",event.controller={number:data1,name:this.getChannelModeByNumber(data1)},event.value=data2):command===wm.MIDI_CHANNEL_MESSAGES.programchange?(event.type=\"programchange\",event.value=data1):command===wm.MIDI_CHANNEL_MESSAGES.channelaftertouch?(event.type=\"channelaftertouch\",event.value=data1/127):command===wm.MIDI_CHANNEL_MESSAGES.pitchbend?(event.type=\"pitchbend\",event.value=((data2<<7)+data1-8192)/8192):event.type=\"unknownchannelmessage\",this._userHandlers.channel[event.type]&&this._userHandlers.channel[event.type][channel]&&this._userHandlers.channel[event.type][channel].forEach(function(callback){callback(event)})},Input.prototype.getCcNameByNumber=function(number){if(number=parseInt(number),!(number>=0&&119>=number))throw new RangeError(\"The control change number must be between 0 and 119.\");for(var cc in wm.MIDI_CONTROL_CHANGE_MESSAGES)if(number===wm.MIDI_CONTROL_CHANGE_MESSAGES[cc])return cc;return void 0},Input.prototype.getChannelModeByNumber=function(number){if(number=parseInt(number),!(number>=120&&status<=127))throw new RangeError(\"The control change number must be between 120 and 127.\");for(var cm in wm.MIDI_CHANNEL_MODE_MESSAGES)if(number===wm.MIDI_CHANNEL_MODE_MESSAGES[cm])return cm},Input.prototype._parseSystemEvent=function(e){var command=e.data[0],event={target:this,data:e.data,timestamp:e.timeStamp};command===wm.MIDI_SYSTEM_MESSAGES.sysex?event.type=\"sysex\":command===wm.MIDI_SYSTEM_MESSAGES.timecode?event.type=\"timecode\":command===wm.MIDI_SYSTEM_MESSAGES.songposition?event.type=\"songposition\":command===wm.MIDI_SYSTEM_MESSAGES.songselect?(event.type=\"songselect\",event.song=e.data[1]):command===wm.MIDI_SYSTEM_MESSAGES.tuningrequest?event.type=\"tuningrequest\":command===wm.MIDI_SYSTEM_MESSAGES.clock?event.type=\"clock\":command===wm.MIDI_SYSTEM_MESSAGES.start?event.type=\"start\":command===wm.MIDI_SYSTEM_MESSAGES[\"continue\"]?event.type=\"continue\":command===wm.MIDI_SYSTEM_MESSAGES.stop?event.type=\"stop\":command===wm.MIDI_SYSTEM_MESSAGES.activesensing?event.type=\"activesensing\":command===wm.MIDI_SYSTEM_MESSAGES.reset?event.type=\"reset\":event.type=\"unknownsystemmessage\",this._userHandlers.system[event.type]&&this._userHandlers.system[event.type].forEach(function(callback){callback(event)})},Output.prototype.send=function(status,data,timestamp){if(!(status>=128&&255>=status))throw new RangeError(\"The status byte must be an integer between 128 (0x80) and 255 (0xFF).\");Array.isArray(data)||(data=parseInt(data)>=0&&parseInt(data)<=127?[parseInt(data)]:[]);var message=[status];return data.forEach(function(item){if(!(item>=0&&255>=item))throw new RangeError(\"The data bytes must be integers between 0 (0x00) and 255 (0xFF).\");message.push(item)}),this._midiOutput.send(message,parseFloat(timestamp)||0),this},Output.prototype.sendSysex=function(manufacturer,data,options){if(!wm.sysexEnabled)throw new Error(\"SysEx message support must first be activated.\");return options=options||{},manufacturer=[].concat(manufacturer),data.forEach(function(item){if(0>item||item>127)throw new RangeError(\"The data bytes of a SysEx message must be integers between 0 (0x00) and 127 (0x7F).\")}),data=manufacturer.concat(data,wm.MIDI_SYSTEM_MESSAGES.sysexend),this.send(wm.MIDI_SYSTEM_MESSAGES.sysex,data,this._parseTimeParameter(options.time)),this},Output.prototype.sendTimecodeQuarterFrame=function(value,options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.timecode,value,this._parseTimeParameter(options.time)),this},Output.prototype.sendSongPosition=function(value,options){value=parseInt(value)||0,options=options||{};var msb=value>>7&127,lsb=127&value;return this.send(wm.MIDI_SYSTEM_MESSAGES.songposition,[msb,lsb],this._parseTimeParameter(options.time)),this},Output.prototype.sendSongSelect=function(value,options){if(value=parseInt(value),options=options||{},!(value>=0&&127>=value))throw new RangeError(\"The song number must be between 0 and 127.\");return this.send(wm.MIDI_SYSTEM_MESSAGES.songselect,[value],this._parseTimeParameter(options.time)),this},Output.prototype.sendTuningRequest=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.tuningrequest,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendClock=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.clock,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendStart=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.start,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendContinue=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES[\"continue\"],void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendStop=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.stop,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendActiveSensing=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.activesensing,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendReset=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.reset,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.stopNote=function(note,channel,options){if(\"all\"===note)return this.sendChannelMode(\"allnotesoff\",0,channel,options);var nVelocity=64;return options=options||{},options.velocity=parseFloat(options.velocity),options.rawVelocity?!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=127&&(nVelocity=options.velocity):!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=1&&(nVelocity=127*options.velocity),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(ch-1),[item,Math.round(nVelocity)],this._parseTimeParameter(options.time))}.bind(this))}.bind(this)),this},Output.prototype.playNote=function(note,channel,options){var nVelocity=64;if(options=options||{},options.velocity=parseFloat(options.velocity),options.rawVelocity?!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=127&&(nVelocity=options.velocity):!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=1&&(nVelocity=127*options.velocity),options.time=this._parseTimeParameter(options.time),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteon<<4)+(ch-1),[item,Math.round(nVelocity)],options.time)}.bind(this))}.bind(this)),options.duration=parseFloat(options.duration),options.duration){options.duration<=0&&(options.duration=0);var nRelease=64;options.release=parseFloat(options.release),options.rawVelocity?!isNaN(options.release)&&options.release>=0&&options.release<=127&&(nRelease=options.release):!isNaN(options.release)&&options.release>=0&&options.release<=1&&(nRelease=127*options.release),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(ch-1),[item,Math.round(nRelease)],(options.time||wm.time)+options.duration)}.bind(this))}.bind(this))}return this},Output.prototype.sendKeyAftertouch=function(note,channel,pressure,options){var that=this;if(options=options||{},1>channel||channel>16)throw new RangeError(\"The channel must be between 1 and 16.\");pressure=parseFloat(pressure),(isNaN(pressure)||0>pressure||pressure>1)&&(pressure=.5);var nPressure=Math.round(127*pressure);return this._convertNoteToArray(note).forEach(function(item){that._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(ch-1),[item,nPressure],that._parseTimeParameter(options.time))})}),this},Output.prototype.sendControlChange=function(controller,value,channel,options){if(options=options||{},\"string\"==typeof controller){if(controller=wm.MIDI_CONTROL_CHANGE_MESSAGES[controller],!controller)throw new TypeError(\"Invalid controller name.\")}else if(controller=parseInt(controller),!(controller>=0&&119>=controller))throw new RangeError(\"Controller numbers must be between 0 and 119.\");if(value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError(\"Controller value must be between 0 and 127.\");return this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(ch-1),[controller,value],this._parseTimeParameter(options.time))}.bind(this)),this},Output.prototype._selectRegisteredParameter=function(parameter,channel,time){var that=this;if(parameter[0]=parseInt(parameter[0]),!(parameter[0]>=0&&parameter[0]<=127))throw new RangeError(\"The control65 value must be between 0 and 127\");if(parameter[1]=parseInt(parameter[1]),!(parameter[1]>=0&&parameter[1]<=127))throw new RangeError(\"The control64 value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(101,parameter[0],channel,{time:time}),that.sendControlChange(100,parameter[1],channel,{time:time})}),this},Output.prototype._selectNonRegisteredParameter=function(parameter,channel,time){var that=this;if(parameter[0]=parseInt(parameter[0]),!(parameter[0]>=0&&parameter[0]<=127))throw new RangeError(\"The control63 value must be between 0 and 127\");if(parameter[1]=parseInt(parameter[1]),!(parameter[1]>=0&&parameter[1]<=127))throw new RangeError(\"The control62 value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(99,parameter[0],channel,{time:time}),that.sendControlChange(98,parameter[1],channel,{time:time})}),this},Output.prototype._setCurrentRegisteredParameter=function(data,channel,time){var that=this;if(data=[].concat(data),data[0]=parseInt(data[0]),!(data[0]>=0&&data[0]<=127))throw new RangeError(\"The msb value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(6,data[0],channel,{time:time})}),data[1]=parseInt(data[1]),data[1]>=0&&data[1]<=127&&this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(38,data[1],channel,{time:time})}),this},Output.prototype._deselectRegisteredParameter=function(channel,time){var that=this;return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(101,127,channel,{time:time}),that.sendControlChange(100,127,channel,{time:time})}),this},Output.prototype.setRegisteredParameter=function(parameter,data,channel,options){var that=this;if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new Error(\"The specified parameter is not available.\");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){that._selectRegisteredParameter(parameter,channel,options.time),that._setCurrentRegisteredParameter(data,channel,options.time),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.setNonRegisteredParameter=function(parameter,data,channel,options){var that=this;if(options=options||{},!(parameter[0]>=0&&parameter[0]<=127&&parameter[1]>=0&&parameter[1]<=127))throw new Error(\"Position 0 and 1 of the 2-position parameter array must both be between 0 and 127.\");return data=[].concat(data),this._convertChannelToArray(channel).forEach(function(ch){that._selectNonRegisteredParameter(parameter,channel,options.time),that._setCurrentRegisteredParameter(data,channel,options.time),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.incrementRegisteredParameter=function(parameter,channel,options){var that=this;if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new Error(\"The specified parameter is not available.\");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){that._selectRegisteredParameter(parameter,channel,options.time),that.sendControlChange(96,0,channel,{time:options.time}),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.decrementRegisteredParameter=function(parameter,channel,options){if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new TypeError(\"The specified parameter is not available.\");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){this._selectRegisteredParameter(parameter,channel,options.time),this.sendControlChange(97,0,channel,{time:options.time}),this._deselectRegisteredParameter(channel,options.time)}.bind(this)),this},Output.prototype.setPitchBendRange=function(semitones,cents,channel,options){var that=this;if(options=options||{},semitones=parseInt(semitones)||0,!(semitones>=0&&127>=semitones))throw new RangeError(\"The semitones value must be between 0 and 127\");if(cents=parseInt(cents)||0,!(cents>=0&&127>=cents))throw new RangeError(\"The cents value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"pitchbendrange\",[semitones,cents],channel,{time:options.time})}),this},Output.prototype.setModulationRange=function(semitones,cents,channel,options){var that=this;if(options=options||{},semitones=parseInt(semitones)||0,!(semitones>=0&&127>=semitones))throw new RangeError(\"The semitones value must be between 0 and 127\");if(cents=parseInt(cents)||0,!(cents>=0&&127>=cents))throw new RangeError(\"The cents value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"modulationrange\",[semitones,cents],channel,{time:options.time})}),this},Output.prototype.setMasterTuning=function(value,channel,options){var that=this;if(options=options||{},value=parseFloat(value)||0,-65>=value||value>=64)throw new RangeError(\"The value must be a decimal number larger than -65 and smaller than 64.\");var coarse=parseInt(value)+64,fine=value-parseInt(value);fine=Math.round((fine+1)/2*16383);var msb=fine>>7&127,lsb=127&fine;return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"channelcoarsetuning\",coarse,channel,{time:options.time}),that.setRegisteredParameter(\"channelfinetuning\",[msb,lsb],channel,{time:options.time})}),this},Output.prototype.setTuningProgram=function(value,channel,options){var that=this;if(options=options||{},value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError(\"The program value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"tuningprogram\",value,channel,{time:options.time})}),this},Output.prototype.setTuningBank=function(value,channel,options){var that=this;if(options=options||{},value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError(\"The bank value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"tuningbank\",value,channel,{time:options.time})}),this},Output.prototype.sendChannelMode=function(command,value,channel,options){var that=this;if(options=options||{},\"string\"==typeof command){if(command=wm.MIDI_CHANNEL_MODE_MESSAGES[command],!command)throw new TypeError(\"Invalid channel mode message name.\")}else if(command=parseInt(command),!(command>=120&&127>=command))throw new RangeError(\"Channel mode numerical identifiers must be between 120 and 127.\");if(value=parseInt(value),isNaN(value)||0>value||value>127)throw new RangeError(\"Value must be integers between 0 and 127.\");return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.channelmode<<4)+(ch-1),[command,value],that._parseTimeParameter(options.time))}),this},Output.prototype.sendProgramChange=function(program,channel,options){var that=this;if(options=options||{},program=parseInt(program),isNaN(program)||0>program||program>127)throw new RangeError(\"Program numbers must be between 0 and 127.\");return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.programchange<<4)+(ch-1),[program],that._parseTimeParameter(options.time))}),this},Output.prototype.sendChannelAftertouch=function(pressure,channel,options){var that=this;options=options||{},pressure=parseFloat(pressure),(isNaN(pressure)||0>pressure||pressure>1)&&(pressure=.5);var nPressure=Math.round(127*pressure);return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(ch-1),[nPressure],that._parseTimeParameter(options.time))}),this},Output.prototype.sendPitchBend=function(bend,channel,options){var that=this;if(options=options||{},bend=parseFloat(bend),isNaN(bend)||-1>bend||bend>1)throw new RangeError(\"Pitch bend value must be between -1 and 1.\");\nvar nLevel=Math.round((bend+1)/2*16383),msb=nLevel>>7&127,lsb=127&nLevel;return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(ch-1),[lsb,msb],that._parseTimeParameter(options.time))}),this},Output.prototype._parseTimeParameter=function(time){var parsed,value;return\"string\"==typeof time&&\"+\"===time.substring(0,1)?(parsed=parseFloat(time),parsed&&parsed>0&&(value=wm.time+parsed)):(parsed=parseFloat(time),parsed>wm.time&&(value=parsed)),value},Output.prototype._convertNoteToArray=function(note){var notes=[];return Array.isArray(note)||(note=[note]),note.forEach(function(item){notes.push(wm.guessNoteNumber(item))}),notes},Output.prototype._convertChannelToArray=function(channel){if((\"all\"===channel||void 0===channel)&&(channel=[\"all\"]),Array.isArray(channel)||(channel=[channel]),channel.indexOf(\"all\")>-1){channel=[];for(var i=1;16>=i;i++)channel.push(i)}return channel.forEach(function(ch){if(!(ch>=1&&16>=ch))throw new RangeError(\"MIDI channels must be between 1 and 16.\")}),channel},Output.prototype._onMidiMessage=function(e){}, true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return wm}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):\"undefined\"!=typeof module&&module.exports?module.exports=wm:scope.WebMidi||(scope.WebMidi=wm)}(this);\n\n/***/ }),\n/* 377 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(127);\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// client.14939104.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 377);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c6d11d4d263669a0a586","var _curry1 = require('./_curry1');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curry2.js\n// module id = 0\n// module chunks = 0","var _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curry1.js\n// module id = 1\n// module chunks = 0","var _curry1 = require('./_curry1');\nvar _curry2 = require('./_curry2');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curry3.js\n// module id = 2\n// module chunks = 0","var _isArray = require('./_isArray');\nvar _isTransformer = require('./_isTransformer');\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodNames, xf, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_dispatchable.js\n// module id = 3\n// module chunks = 0","module.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xfBase.js\n// module id = 4\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar _curry2 = require('./internal/_curry2');\nvar _curryN = require('./internal/_curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/curryN.js\n// module id = 5\n// module chunks = 0","module.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_has.js\n// module id = 6\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _map = require('./internal/_map');\nvar _reduce = require('./internal/_reduce');\nvar _xmap = require('./internal/_xmap');\nvar curryN = require('./curryN');\nvar keys = require('./keys');\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nmodule.exports = _curry2(_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/map.js\n// module id = 7\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _equals = require('./internal/_equals');\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/equals.js\n// module id = 8\n// module chunks = 0","var _isArrayLike = require('./_isArrayLike');\nvar _xwrap = require('./_xwrap');\nvar bind = require('../bind');\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj, methodName) {\n    return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (_isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list['fantasy-land/reduce'] === 'function') {\n      return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list, 'reduce');\n    }\n\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_reduce.js\n// module id = 9\n// module chunks = 0","/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nmodule.exports = function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_concat.js\n// module id = 10\n// module chunks = 0","module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/component-normalizer.js\n// module id = 11\n// module chunks = 0","module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_arity.js\n// module id = 12\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar _isArguments = require('./internal/_isArguments');\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/keys.js\n// module id = 13\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar _reduce = require('./internal/_reduce');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *                -               -10\n *               / \\              / \\\n *              -   4           -6   4\n *             / \\              / \\\n *            -   3   ==>     -3   3\n *           / \\              / \\\n *          -   2           -1   2\n *         / \\              / \\\n *        0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nmodule.exports = _curry3(_reduce);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reduce.js\n// module id = 14\n// module chunks = 0","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isArray.js\n// module id = 15\n// module chunks = 0","module.exports = function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_reduced.js\n// module id = 16\n// module chunks = 0","/**\n * vuex v2.3.0\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;\n    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: {} };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  var this$1 = this;\n\n  // register root module (Vuex.Store options)\n  this.root = new Module(rawRootModule, false);\n\n  // register all nested modules\n  if (rawRootModule.modules) {\n    forEachValue(rawRootModule.modules, function (rawModule, key) {\n      this$1.register([key], rawModule, false);\n    });\n  }\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update(this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  var parent = this.get(path.slice(0, -1));\n  var newModule = new Module(rawModule, runtime);\n  parent.addChild(path[path.length - 1], newModule);\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (targetModule, newModule) {\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        console.warn(\n          \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n          'manual reload is needed'\n        );\n        return\n      }\n      update(targetModule.getChild(key), newModule.modules[key]);\n    }\n  }\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n  assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.concat(devtoolPlugin).forEach(function (plugin) { return plugin(this$1); });\n};\n\nvar prototypeAccessors = { state: {} };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  assert(false, \"Use store.replaceState() to explicit replace store state.\");\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    console.error((\"[vuex] unknown mutation type: \" + type));\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (options && options.silent) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var entry = this._actions[type];\n  if (!entry) {\n    console.error((\"[vuex] unknown action type: \" + type));\n    return\n  }\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  var subs = this._subscribers;\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule) {\n  if (typeof path === 'string') { path = [path]; }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path));\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var namespacedType = namespace + key;\n    registerAction(store, namespacedType, action, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (!store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (!store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler(local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler({\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    console.error((\"[vuex] duplicate getter key: \" + type));\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue) {\n    console.error(\n      '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n    );\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\n// auto install in dist mode\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      if (namespace && !getModuleByNamespace(this.$store, 'mapMutations', namespace)) {\n        return\n      }\n      return this.$store.commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if (!(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      if (namespace && !getModuleByNamespace(this.$store, 'mapActions', namespace)) {\n        return\n      }\n      return this.$store.dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if (!module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '2.3.0',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions\n};\n\nexport { Store, mapState, mapMutations, mapGetters, mapActions };export default index_esm;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vuex/dist/vuex.esm.js\n// module id = 17\n// module chunks = 0","module.exports = {\n  F: require('./src/F'),\n  T: require('./src/T'),\n  __: require('./src/__'),\n  add: require('./src/add'),\n  addIndex: require('./src/addIndex'),\n  adjust: require('./src/adjust'),\n  all: require('./src/all'),\n  allPass: require('./src/allPass'),\n  always: require('./src/always'),\n  and: require('./src/and'),\n  any: require('./src/any'),\n  anyPass: require('./src/anyPass'),\n  ap: require('./src/ap'),\n  aperture: require('./src/aperture'),\n  append: require('./src/append'),\n  apply: require('./src/apply'),\n  applySpec: require('./src/applySpec'),\n  ascend: require('./src/ascend'),\n  assoc: require('./src/assoc'),\n  assocPath: require('./src/assocPath'),\n  binary: require('./src/binary'),\n  bind: require('./src/bind'),\n  both: require('./src/both'),\n  call: require('./src/call'),\n  chain: require('./src/chain'),\n  clamp: require('./src/clamp'),\n  clone: require('./src/clone'),\n  comparator: require('./src/comparator'),\n  complement: require('./src/complement'),\n  compose: require('./src/compose'),\n  composeK: require('./src/composeK'),\n  composeP: require('./src/composeP'),\n  concat: require('./src/concat'),\n  cond: require('./src/cond'),\n  construct: require('./src/construct'),\n  constructN: require('./src/constructN'),\n  contains: require('./src/contains'),\n  converge: require('./src/converge'),\n  countBy: require('./src/countBy'),\n  curry: require('./src/curry'),\n  curryN: require('./src/curryN'),\n  dec: require('./src/dec'),\n  defaultTo: require('./src/defaultTo'),\n  descend: require('./src/descend'),\n  difference: require('./src/difference'),\n  differenceWith: require('./src/differenceWith'),\n  dissoc: require('./src/dissoc'),\n  dissocPath: require('./src/dissocPath'),\n  divide: require('./src/divide'),\n  drop: require('./src/drop'),\n  dropLast: require('./src/dropLast'),\n  dropLastWhile: require('./src/dropLastWhile'),\n  dropRepeats: require('./src/dropRepeats'),\n  dropRepeatsWith: require('./src/dropRepeatsWith'),\n  dropWhile: require('./src/dropWhile'),\n  either: require('./src/either'),\n  empty: require('./src/empty'),\n  endsWith: require('./src/endsWith'),\n  eqBy: require('./src/eqBy'),\n  eqProps: require('./src/eqProps'),\n  equals: require('./src/equals'),\n  evolve: require('./src/evolve'),\n  filter: require('./src/filter'),\n  find: require('./src/find'),\n  findIndex: require('./src/findIndex'),\n  findLast: require('./src/findLast'),\n  findLastIndex: require('./src/findLastIndex'),\n  flatten: require('./src/flatten'),\n  flip: require('./src/flip'),\n  forEach: require('./src/forEach'),\n  forEachObjIndexed: require('./src/forEachObjIndexed'),\n  fromPairs: require('./src/fromPairs'),\n  groupBy: require('./src/groupBy'),\n  groupWith: require('./src/groupWith'),\n  gt: require('./src/gt'),\n  gte: require('./src/gte'),\n  has: require('./src/has'),\n  hasIn: require('./src/hasIn'),\n  head: require('./src/head'),\n  identical: require('./src/identical'),\n  identity: require('./src/identity'),\n  ifElse: require('./src/ifElse'),\n  inc: require('./src/inc'),\n  indexBy: require('./src/indexBy'),\n  indexOf: require('./src/indexOf'),\n  init: require('./src/init'),\n  innerJoin: require('./src/innerJoin'),\n  insert: require('./src/insert'),\n  insertAll: require('./src/insertAll'),\n  intersection: require('./src/intersection'),\n  intersectionWith: require('./src/intersectionWith'),\n  intersperse: require('./src/intersperse'),\n  into: require('./src/into'),\n  invert: require('./src/invert'),\n  invertObj: require('./src/invertObj'),\n  invoker: require('./src/invoker'),\n  is: require('./src/is'),\n  isEmpty: require('./src/isEmpty'),\n  isNil: require('./src/isNil'),\n  join: require('./src/join'),\n  juxt: require('./src/juxt'),\n  keys: require('./src/keys'),\n  keysIn: require('./src/keysIn'),\n  last: require('./src/last'),\n  lastIndexOf: require('./src/lastIndexOf'),\n  length: require('./src/length'),\n  lens: require('./src/lens'),\n  lensIndex: require('./src/lensIndex'),\n  lensPath: require('./src/lensPath'),\n  lensProp: require('./src/lensProp'),\n  lift: require('./src/lift'),\n  liftN: require('./src/liftN'),\n  lt: require('./src/lt'),\n  lte: require('./src/lte'),\n  map: require('./src/map'),\n  mapAccum: require('./src/mapAccum'),\n  mapAccumRight: require('./src/mapAccumRight'),\n  mapObjIndexed: require('./src/mapObjIndexed'),\n  match: require('./src/match'),\n  mathMod: require('./src/mathMod'),\n  max: require('./src/max'),\n  maxBy: require('./src/maxBy'),\n  mean: require('./src/mean'),\n  median: require('./src/median'),\n  memoize: require('./src/memoize'),\n  memoizeWith: require('./src/memoizeWith'),\n  merge: require('./src/merge'),\n  mergeAll: require('./src/mergeAll'),\n  mergeDeepLeft: require('./src/mergeDeepLeft'),\n  mergeDeepRight: require('./src/mergeDeepRight'),\n  mergeDeepWith: require('./src/mergeDeepWith'),\n  mergeDeepWithKey: require('./src/mergeDeepWithKey'),\n  mergeWith: require('./src/mergeWith'),\n  mergeWithKey: require('./src/mergeWithKey'),\n  min: require('./src/min'),\n  minBy: require('./src/minBy'),\n  modulo: require('./src/modulo'),\n  multiply: require('./src/multiply'),\n  nAry: require('./src/nAry'),\n  negate: require('./src/negate'),\n  none: require('./src/none'),\n  not: require('./src/not'),\n  nth: require('./src/nth'),\n  nthArg: require('./src/nthArg'),\n  o: require('./src/o'),\n  objOf: require('./src/objOf'),\n  of: require('./src/of'),\n  omit: require('./src/omit'),\n  once: require('./src/once'),\n  or: require('./src/or'),\n  over: require('./src/over'),\n  pair: require('./src/pair'),\n  partial: require('./src/partial'),\n  partialRight: require('./src/partialRight'),\n  partition: require('./src/partition'),\n  path: require('./src/path'),\n  pathEq: require('./src/pathEq'),\n  pathOr: require('./src/pathOr'),\n  pathSatisfies: require('./src/pathSatisfies'),\n  pick: require('./src/pick'),\n  pickAll: require('./src/pickAll'),\n  pickBy: require('./src/pickBy'),\n  pipe: require('./src/pipe'),\n  pipeK: require('./src/pipeK'),\n  pipeP: require('./src/pipeP'),\n  pluck: require('./src/pluck'),\n  prepend: require('./src/prepend'),\n  product: require('./src/product'),\n  project: require('./src/project'),\n  prop: require('./src/prop'),\n  propEq: require('./src/propEq'),\n  propIs: require('./src/propIs'),\n  propOr: require('./src/propOr'),\n  propSatisfies: require('./src/propSatisfies'),\n  props: require('./src/props'),\n  range: require('./src/range'),\n  reduce: require('./src/reduce'),\n  reduceBy: require('./src/reduceBy'),\n  reduceRight: require('./src/reduceRight'),\n  reduceWhile: require('./src/reduceWhile'),\n  reduced: require('./src/reduced'),\n  reject: require('./src/reject'),\n  remove: require('./src/remove'),\n  repeat: require('./src/repeat'),\n  replace: require('./src/replace'),\n  reverse: require('./src/reverse'),\n  scan: require('./src/scan'),\n  sequence: require('./src/sequence'),\n  set: require('./src/set'),\n  slice: require('./src/slice'),\n  sort: require('./src/sort'),\n  sortBy: require('./src/sortBy'),\n  sortWith: require('./src/sortWith'),\n  split: require('./src/split'),\n  splitAt: require('./src/splitAt'),\n  splitEvery: require('./src/splitEvery'),\n  splitWhen: require('./src/splitWhen'),\n  startsWith: require('./src/startsWith'),\n  subtract: require('./src/subtract'),\n  sum: require('./src/sum'),\n  symmetricDifference: require('./src/symmetricDifference'),\n  symmetricDifferenceWith: require('./src/symmetricDifferenceWith'),\n  tail: require('./src/tail'),\n  take: require('./src/take'),\n  takeLast: require('./src/takeLast'),\n  takeLastWhile: require('./src/takeLastWhile'),\n  takeWhile: require('./src/takeWhile'),\n  tap: require('./src/tap'),\n  test: require('./src/test'),\n  times: require('./src/times'),\n  toLower: require('./src/toLower'),\n  toPairs: require('./src/toPairs'),\n  toPairsIn: require('./src/toPairsIn'),\n  toString: require('./src/toString'),\n  toUpper: require('./src/toUpper'),\n  transduce: require('./src/transduce'),\n  transpose: require('./src/transpose'),\n  traverse: require('./src/traverse'),\n  trim: require('./src/trim'),\n  tryCatch: require('./src/tryCatch'),\n  type: require('./src/type'),\n  unapply: require('./src/unapply'),\n  unary: require('./src/unary'),\n  uncurryN: require('./src/uncurryN'),\n  unfold: require('./src/unfold'),\n  union: require('./src/union'),\n  unionWith: require('./src/unionWith'),\n  uniq: require('./src/uniq'),\n  uniqBy: require('./src/uniqBy'),\n  uniqWith: require('./src/uniqWith'),\n  unless: require('./src/unless'),\n  unnest: require('./src/unnest'),\n  until: require('./src/until'),\n  update: require('./src/update'),\n  useWith: require('./src/useWith'),\n  values: require('./src/values'),\n  valuesIn: require('./src/valuesIn'),\n  view: require('./src/view'),\n  when: require('./src/when'),\n  where: require('./src/where'),\n  whereEq: require('./src/whereEq'),\n  without: require('./src/without'),\n  xprod: require('./src/xprod'),\n  zip: require('./src/zip'),\n  zipObj: require('./src/zipObj'),\n  zipWith: require('./src/zipWith')\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/index.js\n// module id = 18\n// module chunks = 0","var _indexOf = require('./_indexOf');\n\n\nmodule.exports = function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_contains.js\n// module id = 19\n// module chunks = 0","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/slice.js\n// module id = 20\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nmodule.exports = _curry1(function always(val) {\n  return function() {\n    return val;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/always.js\n// module id = 21\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nmodule.exports = _curry2(function max(a, b) { return b > a ? b : a; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/max.js\n// module id = 22\n// module chunks = 0","/*!\n * Vue.js v2.3.4\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\n\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid$1++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production') {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.4';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\n\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (process.env.NODE_ENV !== 'production' &&\n              typeof console !== 'undefined' &&\n              !bailed\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\n\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\n\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\n\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar str;\nvar index$1;\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\nexport default Vue$3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue/dist/vue.runtime.esm.js\n// module id = 23\n// module chunks = 0","var _isArray = require('./_isArray');\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_checkForMethod.js\n// module id = 24\n// module chunks = 0","module.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isString.js\n// module id = 25\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isFunction = require('./internal/_isFunction');\nvar curryN = require('./curryN');\nvar toString = require('./toString');\n\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nmodule.exports = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/invoker.js\n// module id = 26\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nmodule.exports = _curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/nth.js\n// module id = 27\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nmodule.exports = _curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/path.js\n// module id = 28\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar map = require('./map');\nvar prop = require('./prop');\n\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nmodule.exports = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pluck.js\n// module id = 29\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _toString = require('./internal/_toString');\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nmodule.exports = _curry1(function toString(val) { return _toString(val, []); });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/toString.js\n// module id = 30\n// module chunks = 0","import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nimport state from './state'\nimport * as getters from './getters'\nimport * as actions from './actions'\nimport * as mutations from './mutations'\n\nconst store = new Vuex.Store({\n    state,\n    getters,\n    actions,\n    mutations\n})\n\nexport default store\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/index.js","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nmodule.exports = _curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/add.js\n// module id = 32\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/assoc.js\n// module id = 33\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/curry.js\n// module id = 34\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar curry = require('./curry');\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nmodule.exports = _curry1(function flip(fn) {\n  return curry(function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/flip.js\n// module id = 35\n// module chunks = 0","module.exports = function _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_containsWith.js\n// module id = 36\n// module chunks = 0","var _arity = require('./_arity');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curryN.js\n// module id = 37\n// module chunks = 0","var _curry1 = require('./_curry1');\nvar _isArray = require('./_isArray');\nvar _isString = require('./_isString');\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isArrayLike.js\n// module id = 38\n// module chunks = 0","module.exports = function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isFunction.js\n// module id = 39\n// module chunks = 0","module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isPlaceholder.js\n// module id = 40\n// module chunks = 0","module.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_map.js\n// module id = 41\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar map = require('./map');\n\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry2(function lens(getter, setter) {\n  return function(toFunctorFn) {\n    return function(target) {\n      return map(\n        function(focus) {\n          return setter(focus, target);\n        },\n        toFunctorFn(getter(target))\n      );\n    };\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lens.js\n// module id = 42\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar liftN = require('./liftN');\n\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nmodule.exports = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lift.js\n// module id = 43\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar _isObject = require('./internal/_isObject');\nvar mergeWithKey = require('./mergeWithKey');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nmodule.exports = _curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function(k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeDeepWithKey.js\n// module id = 44\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      var takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nmodule.exports = _curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0: return function() {return fn.call(this);};\n    case 1: return function(a0) {return fn.call(this, a0);};\n    case 2: return function(a0, a1) {return fn.call(this, a0, a1);};\n    case 3: return function(a0, a1, a2) {return fn.call(this, a0, a1, a2);};\n    case 4: return function(a0, a1, a2, a3) {return fn.call(this, a0, a1, a2, a3);};\n    case 5: return function(a0, a1, a2, a3, a4) {return fn.call(this, a0, a1, a2, a3, a4);};\n    case 6: return function(a0, a1, a2, a3, a4, a5) {return fn.call(this, a0, a1, a2, a3, a4, a5);};\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6);};\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);};\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);};\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);};\n    default: throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/nAry.js\n// module id = 45\n// module chunks = 0","var _curryN = require('./internal/_curryN');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _has = require('./internal/_has');\nvar _reduce = require('./internal/_reduce');\nvar _xreduceBy = require('./internal/_xreduceBy');\n\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nmodule.exports = _curryN(4, [], _dispatchable([], _xreduceBy,\n  function reduceBy(valueFn, valueAcc, keyFn, list) {\n    return _reduce(function(acc, elt) {\n      var key = keyFn(elt);\n      acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n      return acc;\n    }, {}, list);\n  }));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reduceBy.js\n// module id = 46\n// module chunks = 0","var _complement = require('./internal/_complement');\nvar _curry2 = require('./internal/_curry2');\nvar filter = require('./filter');\n\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reject.js\n// module id = 47\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reverse.js\n// module id = 48\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar map = require('./map');\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nmodule.exports = _curry2(function ap(applyF, applyX) {\n  return (\n    typeof applyX['fantasy-land/ap'] === 'function' ?\n      applyX['fantasy-land/ap'](applyF) :\n    typeof applyF.ap === 'function' ?\n      applyF.ap(applyX) :\n    typeof applyF === 'function' ?\n      function(x) { return applyF(x)(applyX(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, applyX)); }, [], applyF)\n  );\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/ap.js\n// module id = 49\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _makeFlat = require('./internal/_makeFlat');\nvar _xchain = require('./internal/_xchain');\nvar map = require('./map');\n\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nmodule.exports = _curry2(_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function(x) { return fn(monad(x))(x); };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/chain.js\n// module id = 50\n// module chunks = 0","var pipe = require('./pipe');\nvar reverse = require('./reverse');\n\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nmodule.exports = function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/compose.js\n// module id = 51\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isArray = require('./internal/_isArray');\nvar _isFunction = require('./internal/_isFunction');\nvar _isString = require('./internal/_isString');\nvar toString = require('./toString');\n\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nmodule.exports = _curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/concat.js\n// module id = 52\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _filter = require('./internal/_filter');\nvar _isObject = require('./internal/_isObject');\nvar _reduce = require('./internal/_reduce');\nvar _xfilter = require('./internal/_xfilter');\nvar keys = require('./keys');\n\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/filter.js\n// module id = 53\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _identity = require('./internal/_identity');\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nmodule.exports = _curry1(_identity);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/identity.js\n// module id = 54\n// module chunks = 0","var _objectAssign = require('./_objectAssign');\n\nmodule.exports =\n  typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_assign.js\n// module id = 55\n// module chunks = 0","module.exports = function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_filter.js\n// module id = 56\n// module chunks = 0","module.exports = function _identity(x) { return x; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_identity.js\n// module id = 57\n// module chunks = 0","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nmodule.exports = Number.isInteger || function _isInteger(n) {\n  return (n << 0) === n;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isInteger.js\n// module id = 58\n// module chunks = 0","module.exports = function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isObject.js\n// module id = 59\n// module chunks = 0","module.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isTransformer.js\n// module id = 60\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeWithKey.js\n// module id = 61\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/prop.js\n// module id = 62\n// module chunks = 0","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry1 = require('./internal/_curry1');\nvar slice = require('./slice');\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/tail.js\n// module id = 63\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xtake = require('./internal/_xtake');\nvar slice = require('./slice');\n\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      var personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      var takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nmodule.exports = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/take.js\n// module id = 64\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/type.js\n// module id = 65\n// module chunks = 0","var identity = require('./identity');\nvar uniqBy = require('./uniqBy');\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nmodule.exports = uniqBy(identity);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/uniq.js\n// module id = 66\n// module chunks = 0","var _containsWith = require('./internal/_containsWith');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      var strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nmodule.exports = _curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_containsWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/uniqWith.js\n// module id = 67\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar adjust = require('./adjust');\nvar always = require('./always');\n\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nmodule.exports = _curry3(function update(idx, x, list) {\n  return adjust(always(x), idx, list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/update.js\n// module id = 68\n// module chunks = 0","const noteStrings = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nexport function noteFrequency ( note ) {\n\treturn 440 * Math.pow(2,(note-69)/12);\n}\n\nexport function noteName (note) {\n\treturn noteStrings[note % 12] + (Math.floor(note / 12) - 2)\n}\n\nexport const keyToNote = {\n    a: 0, // C\n    w: 1,\n\ts: 2,\n\te: 3,\n\td: 4,\n\tf: 5,\n\tt: 6,\n\tg: 7,\n\ty: 8,\n\th: 9,\n\tu: 10,\n\tj: 11,\n\tk: 12,\n\to: 13,\n\tl: 14\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/notes.js","import Vue from 'vue'\n\nexport const types = {\n    MIDI_CONNECT_INPUT: 'MIDI_CONNECT_INPUT',\n    MIDI_DISCONNECT_INPUT: 'MIDI_DISCONNECT_INPUT',\n    MIDI_CONNECT_OUTPUT: 'MIDI_CONNECT_OUTPUT',\n    MIDI_DISCONNECT_OUTPUT: 'MIDI_DISCONNECT_OUTPUT',\n    MIDI_NOTE_SET: 'MIDI_NOTE_SET',\n    MIDI_NOTE_END: 'MIDI_NOTE_END',\n    UPDATE_UI_MEASURES: 'UPDATE_UI_MEASURES',\n    UPDATE_TEMPO: 'UPDATE_TEMPO',\n    UPDATE_METRE: 'UPDATE_METRE'\n}\n\nexport const MIDI_CONNECT_INPUT = (state, {id, name, virtual}) => {\n    state.midi.inputs.push({\n        id,\n        name,\n        virtual,\n        notes: []\n    })\n}\n\nexport const MIDI_CONNECT_OUTPUT = (state, {id, name, virtual}) => {\n    state.midi.outputs.push({\n        id,\n        name,\n        virtual\n    })\n}\n\nexport const MIDI_DISCONNECT_INPUT = (state, {id}) => {\n    const index = state.midi.inputs.findIndex(i => i.id === id)\n    if (index >= 0) state.midi.inputs.splice(index, 1)\n}\n\nexport const MIDI_DISCONNECT_OUTPUT = (state, {id}) => {\n    const index = state.midi.outputs.findIndex(o => o.id === id)\n    if (index >= 0) state.midi.outputs.splice(index, 1)\n}\n\nexport const MIDI_NOTE_SET = (state, {inputId, noteNumber, velocity}) => {\n    const input = state.midi.inputs.find(input => input.id === inputId)\n    if (input) {\n        const existingNote = input.notes.find(note => note.number === noteNumber)\n        if (existingNote) {\n            existingNote.velocity = velocity\n        }\n        else {\n            input.notes.push({\n                number: noteNumber,\n                velocity\n            })\n        }\n    }\n}\n\nexport const MIDI_NOTE_END = (state, {inputId, channel, noteNumber}) => {\n    const input = state.midi.inputs.find(input => input.id === inputId)\n    if (input) {\n        const index = input.notes.findIndex(note => note.number === noteNumber)\n        if (index >= 0) input.notes.splice(index, 1)\n    }\n}\n\nexport const UPDATE_UI_MEASURES = (state, {pixelsPerBeat, panBeats}) => {\n    state.ui.pixelsPerBeat = pixelsPerBeat\n    state.ui.panBeats = panBeats\n}\n\nexport const UPDATE_TEMPO = (state, tempo) => {\n    state.tempo = tempo\n}\n\nexport const UPDATE_METRE = (state, metre) => {\n    Vue.set(state.metre, 0, metre[0])\n    Vue.set(state.metre, 1, metre[1])\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/mutations.js","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-224a5a52!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./Tape.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./Tape.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-224a5a52!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./Tape.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Tape.vue\n// module id = 71\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\nmodule.exports = _curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n  var start = idx < 0 ? list.length : 0;\n  var _idx = start + idx;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/adjust.js\n// module id = 72\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nmodule.exports = _curry2(function and(a, b) {\n  return a && b;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/and.js\n// module id = 73\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xany = require('./internal/_xany');\n\n\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      var lessThan0 = R.flip(R.lt)(0);\n *      var lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nmodule.exports = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/any.js\n// module id = 74\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nmodule.exports = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/apply.js\n// module id = 75\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\nvar _isArray = require('./internal/_isArray');\nvar _isInteger = require('./internal/_isInteger');\nvar assoc = require('./assoc');\nvar isNil = require('./isNil');\n\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nmodule.exports = _curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = (!isNil(obj) && _has(idx, obj)) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/assocPath.js\n// module id = 76\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/bind.js\n// module id = 77\n// module chunks = 0","var chain = require('./chain');\nvar compose = require('./compose');\nvar map = require('./map');\n\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nmodule.exports = function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/composeK.js\n// module id = 78\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar curry = require('./curry');\nvar nAry = require('./nAry');\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      };\n *      Salad.prototype.recipe = function() {\n *        var instructions = R.map((ingredient) => (\n *          'Add a whollop of ' + ingredient, this.ingredients)\n *        )\n *        return R.join('\\n', instructions)\n *      }\n *\n *      var ThreeLayerSalad = R.constructN(3, Salad)\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup')\n *      console.log(salad.recipe());\n *      // Add a whollop of Mayonnaise\n *      // Add a whollop of Potato Chips\n *      // Add a whollop of Potato Ketchup\n */\nmodule.exports = _curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function() { return new Fn(); };\n  }\n  return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case  1: return new Fn($0);\n      case  2: return new Fn($0, $1);\n      case  3: return new Fn($0, $1, $2);\n      case  4: return new Fn($0, $1, $2, $3);\n      case  5: return new Fn($0, $1, $2, $3, $4);\n      case  6: return new Fn($0, $1, $2, $3, $4, $5);\n      case  7: return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case  8: return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case  9: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/constructN.js\n// module id = 79\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _map = require('./internal/_map');\nvar curryN = require('./curryN');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\n\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nmodule.exports = _curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function() {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function(fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/converge.js\n// module id = 80\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nmodule.exports = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/defaultTo.js\n// module id = 81\n// module chunks = 0","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nmodule.exports = _curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/difference.js\n// module id = 82\n// module chunks = 0","var _containsWith = require('./internal/_containsWith');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nmodule.exports = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) &&\n        !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/differenceWith.js\n// module id = 83\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nmodule.exports = _curry2(function dissoc(prop, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dissoc.js\n// module id = 84\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdrop = require('./internal/_xdrop');\nvar slice = require('./slice');\n\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nmodule.exports = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/drop.js\n// module id = 85\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropRepeatsWith = require('./internal/_xdropRepeatsWith');\nvar last = require('./last');\n\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dropRepeatsWith.js\n// module id = 86\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _isArguments = require('./internal/_isArguments');\nvar _isArray = require('./internal/_isArray');\nvar _isObject = require('./internal/_isObject');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty` and/or\n * `<Type>.prototype.empty`.\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nmodule.exports = _curry1(function empty(x) {\n  return (\n    (x != null && typeof x['fantasy-land/empty'] === 'function') ?\n      x['fantasy-land/empty']() :\n    (x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function') ?\n      x.constructor['fantasy-land/empty']() :\n    (x != null && typeof x.empty === 'function') ?\n      x.empty() :\n    (x != null && x.constructor != null && typeof x.constructor.empty === 'function') ?\n      x.constructor.empty() :\n    _isArray(x) ?\n      [] :\n    _isString(x) ?\n      '' :\n    _isObject(x) ?\n      {} :\n    _isArguments(x) ?\n      (function() { return arguments; }()) :\n    // else\n      void 0\n  );\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/empty.js\n// module id = 87\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/identical.js\n// module id = 88\n// module chunks = 0","var _cloneRegExp = require('./_cloneRegExp');\nvar type = require('../type');\n\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nmodule.exports = function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ?\n        _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':  return copy({});\n    case 'Array':   return copy([]);\n    case 'Date':    return new Date(value.valueOf());\n    case 'RegExp':  return _cloneRegExp(value);\n    default:        return value;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_clone.js\n// module id = 89\n// module chunks = 0","module.exports = function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +\n                                    (pattern.ignoreCase ? 'i' : '') +\n                                    (pattern.multiline  ? 'm' : '') +\n                                    (pattern.sticky     ? 'y' : '') +\n                                    (pattern.unicode    ? 'u' : ''));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_cloneRegExp.js\n// module id = 90\n// module chunks = 0","module.exports = function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_complement.js\n// module id = 91\n// module chunks = 0","var _arity = require('./_arity');\nvar _curry2 = require('./_curry2');\n\n\nmodule.exports = function _createPartialApplicator(concat) {\n  return _curry2(function(fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function() {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_createPartialApplicator.js\n// module id = 92\n// module chunks = 0","var equals = require('../equals');\n\n\nmodule.exports = function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_indexOf.js\n// module id = 93\n// module chunks = 0","var _has = require('./_has');\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isArguments.js\n// module id = 94\n// module chunks = 0","module.exports = function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isNumber.js\n// module id = 95\n// module chunks = 0","var _isArrayLike = require('./_isArrayLike');\n\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nmodule.exports = function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_makeFlat.js\n// module id = 96\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XAny(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.any = false;\n  }\n  XAny.prototype['@@transducer/init'] = _xfBase.init;\n  XAny.prototype['@@transducer/result'] = function(result) {\n    if (!this.any) {\n      result = this.xf['@@transducer/step'](result, false);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAny.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.any = true;\n      result = _reduced(this.xf['@@transducer/step'](result, true));\n    }\n    return result;\n  };\n\n  return _curry2(function _xany(f, xf) { return new XAny(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xany.js\n// module id = 97\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDropRepeatsWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.lastValue = undefined;\n    this.seenFirstValue = false;\n  }\n\n  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\n  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\n  XDropRepeatsWith.prototype['@@transducer/step'] = function(result, input) {\n    var sameAsLast = false;\n    if (!this.seenFirstValue) {\n      this.seenFirstValue = true;\n    } else if (this.pred(this.lastValue, input)) {\n      sameAsLast = true;\n    }\n    this.lastValue = input;\n    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdropRepeatsWith(pred, xf) { return new XDropRepeatsWith(pred, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xdropRepeatsWith.js\n// module id = 98\n// module chunks = 0","module.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xwrap.js\n// module id = 99\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nmodule.exports = _curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/is.js\n// module id = 100\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nmodule.exports = _curry1(function isNil(x) { return x == null; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/isNil.js\n// module id = 101\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar converge = require('./converge');\n\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nmodule.exports = _curry1(function juxt(fns) {\n  return converge(function() { return Array.prototype.slice.call(arguments, 0); }, fns);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/juxt.js\n// module id = 102\n// module chunks = 0","var nth = require('./nth');\n\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nmodule.exports = nth(-1);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/last.js\n// module id = 103\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _isNumber = require('./internal/_isNumber');\n\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nmodule.exports = _curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/length.js\n// module id = 104\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar ap = require('./ap');\nvar curryN = require('./curryN');\nvar map = require('./map');\n\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nmodule.exports = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/liftN.js\n// module id = 105\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar sum = require('./sum');\n\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nmodule.exports = _curry1(function mean(list) {\n  return sum(list) / list.length;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mean.js\n// module id = 106\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _curry2 = require('./internal/_curry2');\nvar _has = require('./internal/_has');\n\n\n/**\n * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n * additional function that will be applied to a given argument set and used to\n * create the cache key under which the results of the function to be memoized\n * will be stored. Care must be taken when implementing key generation to avoid\n * clashes that may overwrite previous entries erroneously.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoize\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nmodule.exports = _curry2(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return _arity(fn.length, function() {\n    var key = mFn.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/memoizeWith.js\n// module id = 107\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      var double = R.multiply(2);\n *      var triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nmodule.exports = _curry2(function multiply(a, b) { return a * b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/multiply.js\n// module id = 108\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nmodule.exports = _curry1(function not(a) {\n  return !a;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/not.js\n// module id = 109\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nmodule.exports = _curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/objOf.js\n// module id = 110\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nmodule.exports = _curry2(function or(a, b) {\n  return a || b;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/or.js\n// module id = 111\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nmodule.exports = (function() {\n  // `Identity` is a functor that holds a single value, where `map` simply\n  // transforms the held value with the provided function.\n  var Identity = function(x) {\n    return {value: x, map: function(f) { return Identity(f(x)); }};\n  };\n\n  return _curry3(function over(lens, f, x) {\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    return lens(function(y) { return Identity(f(y)); })(x).value;\n  });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/over.js\n// module id = 112\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nmodule.exports = _curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pickAll.js\n// module id = 113\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _pipe = require('./internal/_pipe');\nvar reduce = require('./reduce');\nvar tail = require('./tail');\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pipe.js\n// module id = 114\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _pipeP = require('./internal/_pipeP');\nvar reduce = require('./reduce');\nvar tail = require('./tail');\n\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\nmodule.exports = function pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipeP, arguments[0], tail(arguments)));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pipeP.js\n// module id = 115\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nmodule.exports = _curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/prepend.js\n// module id = 116\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a, b -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *          -               -2\n *         / \\              / \\\n *        1   -            1   3\n *           / \\              / \\\n *          2   -     ==>    2  -1\n *             / \\              / \\\n *            3   -            3   4\n *               / \\              / \\\n *              4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nmodule.exports = _curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reduceRight.js\n// module id = 117\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nmodule.exports = _curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/remove.js\n// module id = 118\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar ap = require('./ap');\nvar map = require('./map');\nvar prepend = require('./prepend');\nvar reduceRight = require('./reduceRight');\n\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nmodule.exports = _curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ?\n    traversable.sequence(of) :\n    reduceRight(function(x, acc) { return ap(map(prepend, x), acc); },\n                of([]),\n                traversable);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/sequence.js\n// module id = 119\n// module chunks = 0","var add = require('./add');\nvar reduce = require('./reduce');\n\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nmodule.exports = reduce(add, 0);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/sum.js\n// module id = 120\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar drop = require('./drop');\n\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nmodule.exports = _curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/takeLast.js\n// module id = 121\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nmodule.exports = _curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/times.js\n// module id = 122\n// module chunks = 0","var _Set = require('./internal/_Set');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nmodule.exports = _curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/uniqBy.js\n// module id = 123\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar curryN = require('./curryN');\n\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nmodule.exports = _curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function() {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/useWith.js\n// module id = 124\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar keys = require('./keys');\n\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nmodule.exports = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/values.js\n// module id = 125\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _has = require('./internal/_has');\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nmodule.exports = _curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/where.js\n// module id = 126\n// module chunks = 0","import Vue from 'vue'\nimport App from './App'\n\nimport './mixins'\nimport './store'\nimport './audio/MidiCtx'\nimport './audio/audioCtx'\n\nnew Vue({\n    el: '#app',\n    render (h) {\n        return h(App)\n    }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","<template lang=\"html\">\n    <div layout=\"column u1\">\n        <SettingsPanel />\n        <ArrangementPanel />\n        <KeyboardController />\n    </div>\n</template>\n\n<script>\nimport store from './store'\nimport SettingsPanel from './components/SettingsPanel'\nimport ArrangementPanel from './components/ArrangementPanel'\nimport KeyboardController from './components/KeyboardController'\n\nexport default {\n    store,\n    components: {\n        SettingsPanel,\n        ArrangementPanel,\n        KeyboardController\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n@import \"./core\";\n@import \"./layout\";\n\nhtml, body {\n    margin: 0;\n    width: 100%;\n    height: 100%;\n    font-size: 9px;\n    font-family: Arial, sans-serif;\n    background: black;\n    overflow: hidden;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// App.vue?32ab069a","<template lang=\"html\">\n    <div layout=\"column u1\">\n        <ViewSlider\n            :region=\"region\"\n            :totalBeats=\"showBeats\"\n            :tapes=\"tapes\"\n            @updateRegion=\"updateRegion\"\n        />\n        <BarMarks :region=\"region\" />\n        <Tapes\n            :region=\"region\"\n            :totalBeats=\"showBeats\"\n            :tapes=\"tapes\"\n            @updateRegion=\"updateRegion\"\n        />\n    </div>\n</template>\n\n<script>\nimport R from 'ramda'\nimport {mapGetters, mapActions} from 'vuex'\nimport Tapes from './Tapes'\nimport ViewSlider from './ViewSlider'\nimport BarMarks from './BarMarks'\nexport default {\n    components: {\n        Tapes,\n        ViewSlider,\n        BarMarks\n    },\n    data () {\n        return {\n            elWidth: 0,\n            caret: 0,\n            showBeats: 50\n        }\n    },\n    computed: {\n        ...mapGetters(['tapes', 'uiMeasures', 'secondsToBeats']),\n        region () {\n            const {\n                pixelsPerBeat,\n                panBeats\n            } = this.uiMeasures\n            return [panBeats, panBeats + this.elWidth / pixelsPerBeat]\n        },\n        maxClipRange () {\n            const secondsToBeats = this.secondsToBeats\n            return R.pipe(\n                R.chain(R.prop('clips'), this.tapes),\n                R.map(clip => clip.beat + secondsToBeats(clip.duration)),\n                R.max\n            )\n        },\n        minBeatsToShow () {\n            return Math.ceil(Math.min(this.caret, this.maxClipRange)) + 8\n        }\n    },\n    watch: {\n        minBeatsToShow (value) {\n            if (value < this.showBeats) {\n                this.showBeats = value\n            }\n        }\n    },\n    methods: {\n        ...mapActions(['updateUiMeasures']),\n        gatherMeasures () {\n            const rect = this.$el.getBoundingClientRect()\n            this.elWidth = rect.right - rect.left\n        },\n        updateRegion (newRegion) {\n            const {\n                pixelsPerBeat,\n                panBeats\n            } = this.uiMeasures\n            const newPan = newRegion[0]\n            const totalBeats = newRegion[1] - newRegion[0]\n\n            const newPixelsPerBeat = this.elWidth / totalBeats\n            this.updateUiMeasures({\n                pixelsPerBeat: newPixelsPerBeat,\n                panBeats: newPan\n            })\n        }\n    },\n    docEvents: {\n        resize () {\n            this.gatherMeasures()\n        }\n    },\n    mounted () {\n        this.gatherMeasures()\n    }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ArrangementPanel.vue?03f217bd","<template lang=\"html\">\n    <div class=\"marks-bar\" :style=\"{transform}\">\n        <div class=\"bar\" v-for=\"bar in bars\" :key=\"bar.value\" :style=\"{left: bar.left}\">{{ bar.value }}</div>\n    </div>\n</template>\n\n<script>\nimport {mapGetters} from 'vuex'\nexport default {\n    props: {\n        region: {\n            type: Array,\n            required: true\n        },\n    },\n    computed: {\n        ...mapGetters(['beatsPerBar']),\n        bars () {\n            const barsInView = (this.region[1] - this.region[0]) / this.beatsPerBar\n            const min = Math.floor(this.region[0] / this.beatsPerBar)\n            const max = Math.ceil(this.region[1] / this.beatsPerBar)\n            const bars = []\n            for (let i = min; i <= max; i++) {\n                bars.push({\n                    left: `${100 * i / barsInView}%`,\n                    value: i\n                })\n            }\n            return bars\n\n        },\n        transform () {\n            const offscreenRatio = this.region[0] / (this.region[1] - this.region[0])\n            return `translate(${-offscreenRatio * 100}%, 0)`\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../core\";\n\n.marks-bar {\n    height: $unit-x3;\n    position: relative;\n}\n\n.bar {\n    position: absolute;\n    bottom: 0;\n    height: $unit-x2;\n    width: 1px;\n    border-left: 1px solid $detail;\n    color: white;\n    padding-left: 2px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// BarMarks.vue?2e8ccf84","<template lang=\"html\">\n    <div class=\"clip\" :style=\"style\"></div>\n</template>\n\n<script>\nimport {mapGetters} from 'vuex'\nexport default {\n    props: {\n        clip: {\n            type: Object,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        }\n    },\n    computed: {\n        ...mapGetters(['secondsToBeats']),\n        style () {\n            const [startBeat, endBeat] = this.region\n            const regionLength = endBeat - startBeat\n\n            const clip = this.clip\n            const offsetBeatStart = clip.beat - startBeat\n            const offsetBeatLength = this.secondsToBeats(clip.duration)\n            return {\n                left: `${(offsetBeatStart / regionLength) * 100}%`,\n                width: `${(offsetBeatLength / regionLength) * 100}%`\n            }\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../core\";\n\n.clip {\n    position: absolute;\n    height: 100%;\n    background-color: $tape-active;\n    border-radius: 4px;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// Clip.vue?1a4c8e9a","<script>\nimport {mapActions} from 'vuex'\nimport {keyToNote} from '../notes'\nimport {isDef} from '../util'\nimport R from 'ramda'\n\nexport default {\n    render: () => null,\n    data () {\n        return {\n            octave: 5,\n            keyboardState: {}\n        }\n    },\n    computed: {\n        inputId () {\n            return '_KEYBOARD_' + this._uid\n        },\n        playingNotes () {\n            const oct = this.octave * 12\n            return Object.keys(this.keyboardState)\n                .filter(k => !!this.keyboardState[k])\n                .map(k => keyToNote[k])\n                .filter(isDef)\n                .map(n => n + oct)\n                .filter(n => n < 128 && n >= 0)\n        }\n    },\n    docEvents: {\n        keydown (event) {\n            if (event.shiftKey || event.altKey || event.metaKey) return;\n\n            const key = event.key.toLowerCase()\n            switch (key) {\n            case 'z':\n                this.octave = Math.max(0, this.octave - 1)\n                break\n            case 'x':\n                this.octave = Math.min(10, this.octave + 1)\n                break\n            default:\n                this.$set(this.keyboardState, key, true)\n                break\n            }\n        },\n        keyup () {\n            const key = event.key.toLowerCase()\n            switch (key) {\n                case 'z':\n                case 'x':\n                    break\n                default:\n                    this.$set(this.keyboardState, key, false)\n            }\n        }\n    },\n    watch: {\n        playingNotes (newNotes, oldNotes) {\n            const addedNotes = R.difference(newNotes, oldNotes)\n            const removedNotes = R.difference(oldNotes, newNotes)\n            addedNotes.forEach(n => {\n                this.midiNoteon({inputId: this.inputId, noteNumber: n, velocity: 127})\n            })\n            removedNotes.forEach(n => {\n            this.midiNoteoff({inputId: this.inputId, noteNumber: n})\n            })\n        }\n    },\n    methods: {\n        ...mapActions(['midiNoteon', 'midiNoteoff', 'midiConnectVirtualInput', 'midiDisconnectVirtualInput'])\n    },\n    mounted () {\n        this.midiConnectVirtualInput({id: this.inputId, name: 'Keyboard'})\n    },\n    destroy () {\n        this.midiDisconnectVirtualInput({id: this.inputId})\n    }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// KeyboardController.vue?cd2cb8ce","<template lang=\"html\">\n    <div v-if=\"!editing\" @click=\"startEdit\" class=\"value\" @wheel.prevent.stop=\"handleWheel\">{{formattedValue}}</div>\n    <form v-else @submit.prevent.stop=\"applyEdit\">\n        <input\n            @keydown.stop @keyup.stop v-focus @blur=\"cancelEdit\" class=\"input\" v-model=\"internalValue\" />\n    </form>\n</template>\n\n<script>\nimport R from 'ramda'\nexport default {\n    props: {\n        value: {\n            required: true,\n            type: Number\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        sensitivity: {\n            type: Number,\n            default: 10\n        },\n        min: {\n            type: Number,\n            default: 0\n        },\n        max: {\n            type: Number,\n            default: 100\n        }\n    },\n    data () {\n        return {\n            editing: false,\n            internalValue: 0,\n            accumulator: 0\n        }\n    },\n    computed: {\n        numDecimals () {\n            return (this.step.toString().split('.')[1] || '').length;\n        },\n        formattedValue () {\n            return this.value.toFixed(this.numDecimals)\n        }\n    },\n    methods: {\n        handleWheel(e) {\n            this.accumulator += e.deltaY\n            const scale = 10\n            const scaledValue = this.accumulator / this.sensitivity\n            const valueChange = scaledValue > 0 ? Math.floor(scaledValue) : Math.ceil(scaledValue)\n            if (valueChange !== 0) {\n                this.accumulator -= Math.round(valueChange * this.sensitivity)\n                const newVal = Math.round((this.value / this.step) + valueChange) * this.step\n                const boundVal = Math.max(this.min, Math.min(this.max, newVal))\n                this.$emit('update', boundVal)\n            }\n        },\n\n        applyEdit () {\n            this.editing = false\n            const newVal = Math.round(parseFloat(this.internalValue) / this.step) * this.step\n            const boundVal = Math.max(this.min, Math.min(this.max, newVal))\n            this.$emit('update', boundVal)\n        },\n\n        startEdit () {\n            this.editing = true\n            this.internalValue = this.formattedValue\n        },\n\n        cancelEdit () {\n            this.editing = false\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../core\";\n\n\n.value, input {\n    color: $theme-3;\n    border: none;\n    background: none;\n    height: $unit-x3;\n    line-height: $unit-x3;\n    font-size: $unit-x2;\n    color: white;\n    text-align: center;\n}\n\n.value {\n    cursor: row-resize;\n}\ninput {\n    background: $detail;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: $unit-x2;\n    line-height: $unit-x2;\n    display: block;\n    outline: none;\n}\n\nform {\n    color: $theme-3;\n    margin: 0;\n    padding: $unit-half 0;\n    display: block;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// NumberSlider.vue?a4ef7514","<template lang=\"html\">\n    <div class=\"settings\" layout=\"row u1\">\n        <div class=\"framed\">\n            <NumberSlider class=\"tempo\"\n                :value=\"tempo\" :step=\"0.1\" :min=\"0\" :max=\"999\"\n                @update=\"updateTempo\" />\n        </div>\n        <div class=\"framed\" layout=\"row center u05\">\n            <NumberSlider class=\"metre\"\n                :value=\"metre[0]\" :min=\"1\" :max=\"16\"\n                @update=\"updateMetre([$event, metre[1]])\" />\n            <span>/</span>\n            <NumberSlider class=\"metre\"\n                :value=\"metre[1]\":step=\"2\" :min=\"2\" :max=\"16\"\n                @update=\"updateMetre([metre[0], $event])\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport {mapGetters, mapActions} from 'vuex'\nimport NumberSlider from './NumberSlider'\n\nexport default {\n    components: {\n        NumberSlider\n    },\n    data () {\n        return {\n            elWidth: 0,\n            caret: 0,\n            showBeats: 50\n        }\n    },\n    computed: {\n        ...mapGetters(['tempo', 'metre'])\n    },\n    methods: {\n        ...mapActions(['updateTempo', 'updateMetre'])\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../core\";\n\n.framed {\n    border: 1px solid $detail;\n    color: $detail;\n    font-size: $unit-x2;\n    text-align: center;\n    padding: 0 $unit-half;\n    border-radius: $unit-half;\n}\n\n.tempo {\n    width: $unit-x6;\n}\n\n.metre {\n    width: $unit-x3;\n}\n\n.settings {\n    padding: $unit $unit-x2;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// SettingsPanel.vue?090450c0","<template lang=\"html\">\n    <div class=\"tape\">\n        <Clip v-for=\"clip in clipsInRegion\" :key=\"clip.id\" :clip=\"clip\" :region=\"region\"/>\n    </div>\n</template>\n\n<script>\nimport {mapGetters} from 'vuex'\nimport Clip from './Clip'\nexport default {\n    components: {\n        Clip\n    },\n    computed: {\n        ...mapGetters(['secondsToBeats']),\n        clipsInRegion () {\n            const secondsToBeats = this.secondsToBeats\n            const [startBeat, endBeat] = this.region\n            const clipInRegion = clip =>\n                clip.beat < endBeat &&\n                (clip.beat + secondsToBeats(clip.duration)) > startBeat\n\n            return this.tape.clips.filter(clipInRegion)\n        }\n    },\n    props: {\n        tape: {\n            type: Object,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../core\";\n\n.tape {\n    height: $unit-x2;\n    position: relative;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// Tape.vue?15a3248c","<template lang=\"html\">\n    <div\n        layout=\"column u1\"\n        @wheel.prevent.stop=\"handleWheel\"\n    >\n        <Tape v-for=\"(tape, index) in tapes\" :key=\"tape.id\" :tape=\"tape\" :region=\"region\"/>\n    </div>\n</template>\n\n<script>\nimport Tape from './Tape'\nexport default {\n    components: {\n        Tape\n    },\n    props: {\n        tapes: {\n            type: Array,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        },\n        totalBeats: {\n            type: Number,\n            required: true\n        }\n    },\n    methods: {\n        handleWheel (e) {\n            const bounds = this.$el.getBoundingClientRect()\n            const elWidth = bounds.right - bounds.left\n\n            const [regionStart, regionEnd] = this.region\n            const regionLen = regionEnd - regionStart\n\n            const moveX = e.deltaX * regionLen / elWidth\n\n            const newStart = Math.max(0, Math.min(this.totalBeats - regionLen, regionStart + moveX))\n\n            this.$emit('updateRegion', [newStart, newStart + regionLen])\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../core\";\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// Tapes.vue?3a574282","<template lang=\"html\">\n    <div\n        class=\"viewSlider\"\n        @wheel.prevent.stop=\"handleWheel\"\n        @mousedown.prevent.stop=\"handleDown\"\n        layout=\"column\"\n    >\n        <div class=\"tape\" v-for=\"tape in tapes\">\n            <div class=\"clip\" v-for=\"clip in tape.clips\" :style=\"clipStyle(clip)\"></div>\n        </div>\n        <div class=\"window\" :style=\"windowStyle\"/>\n    </div>\n</template>\n\n<script>\nimport {mapGetters} from 'vuex'\nimport Tape from './Tape'\nexport default {\n    components: {\n        Tape\n    },\n    props: {\n        totalBeats: {\n            type: Number,\n            required: true\n        },\n        region: {\n            type: Array,\n            required: true\n        },\n        tapes: {\n            type: Array,\n            required: true\n        }\n    },\n    computed: {\n        ...mapGetters(['secondsToBeats']),\n        windowStyle () {\n            const start = this.region[0]\n            const length = this.region[1] - start\n            return {\n                left: `${100 * start / this.totalBeats}%`,\n                width: `${100 * length / this.totalBeats}%`\n            }\n        }\n    },\n    mounted () {\n        this._dragLast = null\n    },\n    docEvents: {\n        mouseup (e) {\n            if (this._dragLast !== null) {\n                e.preventDefault()\n                this.handleUp(e)\n            }\n        },\n        mousemove (e) {\n            if (this._dragLast !== null) {\n                e.preventDefault()\n                this.handleDrag(e)\n            }\n        }\n    },\n    methods: {\n        handleDown (e) {\n            this._dragLast = e.pageX\n        },\n        handleUp (e) {\n            this._dragLast = null\n        },\n        handleDrag (e) {\n            const delta = e.pageX - this._dragLast\n            this._dragLast = e.pageX\n\n            const bounds = this.$el.getBoundingClientRect()\n            const elWidth = bounds.right - bounds.left\n            const moveX = delta * this.totalBeats / elWidth\n\n            const width = this.region[1] - this.region[0]\n            const start = Math.min(\n                this.totalBeats - width,\n                Math.max(0, this.region[0] + moveX)\n            )\n\n            this.$emit('updateRegion', [start, start + width])\n        },\n        handleWheel (e) {\n            const bounds = this.$el.getBoundingClientRect()\n            const elWidth = bounds.right - bounds.left\n\n            const moveX = -e.deltaX * this.totalBeats / elWidth\n\n            const adjDeltaY = e.deltaY > 0 ? Math.max(0, e.deltaY - 2) : Math.min(0, e.deltaY + 2)\n            const zoomY = Math.pow(1.05, adjDeltaY)\n            const regionStart = this.region[0]\n            const regionEnd = this.region[1]\n\n            const regionMid = (regionStart + regionEnd) / 2\n            const regionLen = regionEnd - regionStart\n\n            const newLen = Math.min(Math.max(1, regionLen * zoomY), this.totalBeats)\n            const lenShift = regionLen - newLen\n\n            const newStart = Math.min(\n                this.totalBeats - newLen,\n                Math.max(0, regionStart + moveX + lenShift / 2)\n            )\n\n            this.$emit('updateRegion', [newStart, newStart + newLen])\n        },\n        clipStyle (clip) {\n            const total = this.totalBeats\n            const beatStart = clip.beat\n            const beatWidth = this.secondsToBeats(clip.duration)\n            return {\n                left: `${100 * beatStart / total}%`,\n                width: `${100 * beatWidth / total}%`\n            }\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../core\";\n\n.viewSlider {\n    position: relative;\n    padding: $unit-half 0;\n    border-bottom: 1px solid $detail;\n}\n\n.window {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    box-shadow: 0 0 0 1px white;\n}\n\n.tape {\n    height: $unit-half;\n}\n\n.clip {\n    position: absolute;\n    top: 1px;\n    bottom: 1px;\n    background: $tape-active;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ViewSlider.vue?27523992","import webmidi from 'webmidi'\nimport R from 'ramda'\n\nimport drivers from '../drivers'\nimport store from '../store'\n\nwindow.webmidi = webmidi\n\nconst handleInput = i => {\n    const driver = drivers.find(d => d.type === 'input' && d.match(i))\n    if (driver) driver.init(i)\n\n    i.addListener('')\n}\n\nconst handleOutput = o => {\n    const driver = drivers.find(d => d.type === 'output' && d.match(o))\n    if (driver) driver.init(o)\n}\n\nconst updateStore = () => {\n    const outputs = webmidi.outputs.map(R.prop('id'))\n    const inputs = webmidi.inputs.map(R.prop('id'))\n    store.dispatch('midiUpdateDevices', {inputs, outputs})\n}\n\nwebmidi.enable(() => {\n    webmidi.outputs.forEach(handleOutput)\n    webmidi.inputs.forEach(handleInput)\n    updateStore()\n\n    webmidi.addListener('connected', (e) => {\n        if (e.input) handleInput(e.input)\n        if (e.output) handleOutput(e.output)\n        updateStore()\n    })\n    webmidi.addListener('disconnected', (e) => {\n        updateStore()\n    })\n})\n\nexport default {\n    getOutput: (id) => webmidi.outputs.find(o => o.id === id),\n    getInput: (id) => webmidi.inputs.find(i => i.id === id)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/audio/MidiCtx.js","import store from '../store'\nimport Tone from 'tone'\nimport {noteFrequency} from '../notes'\nimport R from 'ramda'\n\nconst recordClip = ''\n\nconst clipsBackingStore = {\n\n}\n\nvar synth = new Tone.PolySynth(4, Tone.Synth).toMaster();\n\n\nstore.watch((_, g) => g.allActiveNotes, (notes, oldNotes) => {\n    const release = R.difference(R.pluck('number', oldNotes), R.pluck('number', notes))\n\n    notes.forEach(note => {\n        const oldNote = oldNotes.find(R.propEq('number', note.number))\n        if (oldNote && oldNote.velocity !== note.velocity) {\n            synth.triggerRelease(noteFrequency(number))\n            synth.triggerAttack(noteFrequency(note.number), null, note.velocity / 127)\n        }\n        if (!oldNote) {\n            synth.triggerAttack(noteFrequency(note.number), null, note.velocity / 127)\n        }\n    })\n    release.forEach((n) => {\n        synth.triggerRelease(noteFrequency(n))\n    })\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/audio/audioCtx.js","export default {\n    type: 'output',\n    match (e) {\n        return e.name.indexOf('Launchpad') >= 0\n    },\n    init (e) {\n        e.sendControlChange(0, 0)\n        e.sendControlChange(0, 2)\n        this.input = e\n\n        return {\n\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/LaunchpadOutput.js","import LaunchpadOutput from './LaunchpadOutput'\n\nexport default [LaunchpadOutput]\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/index.js","export const beatsPerBar = (metre) => {\n    return 4 * metre[0] / metre[1]\n}\n\nexport const barsPerMinute = (tempo, metre) => {\n    return tempo / beatsPerBar(metre)\n}\n\nexport const secondsPerBar = (tempo, metre) => {\n    return 60 * beatsPerBar(metre) / tempo\n}\n\nexport const secondsPerBeat = (tempo) => {\n    return 60 / tempo\n}\n\nexport const secondsToBeats = (seconds, tempo) => {\n    return seconds * tempo / 60\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/measures.js","import Vue from 'vue'\n\nVue.mixin({\n    beforeCreate () {\n        const evs = this.$options.docEvents\n        if (evs) {\n            this._boundDocEvents = []\n            for (const eventName in evs) {\n               const bound = evs[eventName].bind(this)\n               this._boundDocEvents.push([eventName, bound])\n               document.addEventListener(eventName, bound, false)\n           }\n        }\n    },\n    desroyed () {\n        if (this._boundDocEvents) {\n            this._boundDocEvents.forEach(([eventName, bound]) => {\n                document.removeEventListener(eventName, bound, false)\n            })\n        }\n    }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/docEvents.js","import Vue from 'vue'\n\nVue.directive('focus', {\n  inserted: function (el) {\n    el.focus()\n  }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/focus.js","import './docEvents'\nimport './focus'\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/index.js","import {types} from './mutations'\nimport R from 'ramda'\n\nconst getName = id => R.pipe(\n    R.find(R.propEq('id', id)),\n    R.prop('name')\n)\n\nexport const midiUpdateDevices = ({commit, state}, {inputs, outputs}) => {\n    const oldIns = state.midi.inputs.filter(i => i.virtual === false)\n    const oldOuts = state.midi.outputs.filter(i => i.virtual === false)\n\n    const addedIns = R.difference(inputs, oldIns)\n    const removedIns = R.difference(oldIns, inputs)\n    const addedOuts = R.difference(outputs, oldOuts)\n    const removedOuts = R.difference(oldOuts, outputs)\n\n    removedIns.forEach(id => commit(types.MIDI_DISCONNECT_INPUT, {id}))\n    removedOuts.forEach(id => commit(types.MIDI_DISCONNECT_OUTPUT, {id}))\n\n    addedIns.forEach(id => commit(types.MIDI_CONNECT_INPUT, {\n        id,\n        name: getName(id)(inputs),\n        virtual: false\n    }))\n\n    addedOuts.forEach(id => commit(types.MIDI_CONNECT_OUTPUT, {\n        id,\n        name: getName(id)(inputs),\n        virtual: false\n    }))\n}\n\nexport const midiConnectVirtualInput = ({commit, state}, {id, name}) => {\n    commit(types.MIDI_CONNECT_INPUT, {id, name, virtual: true})\n}\n\nexport const midiDisconnectVirtualInput = ({commit, state}, {id}) => {\n    if (state.midi.inputs.find(i => i.id === id && i.virtual === true)) {\n        commit(types.MIDI_DISCONNECT_INPUT, {id})\n    }\n}\n\nexport const updateUiMeasures = ({commit}, newMeasures) => {\n    commit(types.UPDATE_UI_MEASURES, newMeasures)\n}\n\nexport const updateTempo = ({commit}, tempo) => {\n    commit(types.UPDATE_TEMPO, tempo)\n}\n\nexport const updateMetre = ({commit}, metre) => {\n    commit(types.UPDATE_METRE, metre)\n}\n\nexport const midiNoteon = ({commit}, {inputId, noteNumber, velocity}) => {\n    commit(types.MIDI_NOTE_SET, {inputId, noteNumber, velocity})\n}\n\nexport const midiNoteoff = ({commit}, {inputId, noteNumber}) => {\n    commit(types.MIDI_NOTE_END, {inputId, noteNumber})\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/actions.js","import R from 'ramda'\n\nimport {\n    secondsToBeats as rawSecondsToBeats,\n    beatsPerBar as rawBeatsPerBar\n} from '../measures'\n\nexport const tapes = (state) => {\n    const clips = state.clips\n    return R.map(\n        R.evolve({\n            clips: R.map(\n                R.pipe(\n                    R.propEq('id'),\n                    R.find(R.__, state.clips)\n                )\n            )\n        }),\n        state.tapes\n    )\n}\n\nexport const uiMeasures = (state) => {\n    const {\n        pixelsPerBeat,\n        panBeats\n    } = state.ui\n\n    return {\n        pixelsPerBeat,\n        panBeats\n    }\n}\n\nexport const secondsToBeats = state => {\n    const metre = state.metre\n    const tempo = state.tempo\n    return seconds => rawSecondsToBeats(seconds, tempo, metre)\n}\n\nexport const beatsPerBar = state => rawBeatsPerBar(state.metre)\n\nexport const metre = state => state.metre\nexport const tempo = state => state.tempo\n\nexport const allActiveNotes = state => {\n    return R.pipe(\n        R.chain(R.prop('notes')),\n        R.groupBy(R.prop('number')),\n        R.map(R.reduce(R.maxBy(R.prop('velocity')), {velocity: -1})),\n        R.values,\n        R.sortBy(R.prop('number'))\n    )(state.midi.inputs)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/getters.js","export default {\n    ui: {\n        panBeats: 0,\n        pixelsPerBeat: 40,\n        cursorPosition: 0\n    },\n    tempo: 120,\n    metre: [4, 4],\n    playback: {\n        recording: false,\n        playTimestamp: null,\n        playOffset: 0\n    },\n    tapes: [{\n        id: '4F4F0BC1-9465-4786-8800-A575BB3D911A',\n        name: 'Tape 1',\n        clips: ['E133493E-6EF6-432D-9E05-5F08DEFD95C1', 'BFB8988D-9C1A-49E4-BDD8-1CE586ED4319']\n    }, {\n        id: '83658428-AF69-4867-94DC-E74D944313A7',\n        name: \"Tape 2\",\n        clips: ['8F3ABBD8-3BC6-4F32-ACDD-2FBC4E4A6133', '61B59978-08C6-4CC0-A118-B3965D156E71']\n    }],\n    clips: [\n        {\n            id: 'E133493E-6EF6-432D-9E05-5F08DEFD95C1',\n            beat: 0, // start time in beats, float\n            duration: 0.5 // duration time in seconds, float\n        },\n        {\n            id: '8F3ABBD8-3BC6-4F32-ACDD-2FBC4E4A6133',\n            beat: 1,\n            duration: 0.5\n        },\n        {\n            id: 'BFB8988D-9C1A-49E4-BDD8-1CE586ED4319',\n            beat: 2,\n            duration: 0.5\n        },\n        {\n            id: '61B59978-08C6-4CC0-A118-B3965D156E71',\n            beat: 4,\n            duration: 0.5\n        }\n    ],\n    midi: {\n        inputs: [],\n        outputs: []\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/state.js","export const isDef = x => x !== null && x !== undefined\nexport const isUndef = x => x === null || x === undefined\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.js","\n/* styles */\nrequire(\"!!../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-defb5986!postcss-loader?sourceMap!sass-loader?sourceMap!../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n\nvar Component = require(\"!../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"),\n  /* template */\n  require(\"!!../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-defb5986!../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = 158\n// module chunks = 0","var Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./ArrangementPanel.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-4b828b4f!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./ArrangementPanel.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/ArrangementPanel.vue\n// module id = 159\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-5a9e1cb0&scoped=true!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./BarMarks.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./BarMarks.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-5a9e1cb0!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./BarMarks.vue\"),\n  /* scopeId */\n  \"data-v-5a9e1cb0\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/BarMarks.vue\n// module id = 160\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-43747a05&scoped=true!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./Clip.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./Clip.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-43747a05!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./Clip.vue\"),\n  /* scopeId */\n  \"data-v-43747a05\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Clip.vue\n// module id = 161\n// module chunks = 0","var Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./KeyboardController.vue\"),\n  /* template */\n  null,\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/KeyboardController.vue\n// module id = 162\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-4fafa23f&scoped=true!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./NumberSlider.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./NumberSlider.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-4fafa23f!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./NumberSlider.vue\"),\n  /* scopeId */\n  \"data-v-4fafa23f\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/NumberSlider.vue\n// module id = 163\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-79157a3c&scoped=true!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./SettingsPanel.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./SettingsPanel.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-79157a3c!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./SettingsPanel.vue\"),\n  /* scopeId */\n  \"data-v-79157a3c\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/SettingsPanel.vue\n// module id = 164\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-1fa9ada8&scoped=true!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./Tapes.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./Tapes.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-1fa9ada8!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./Tapes.vue\"),\n  /* scopeId */\n  \"data-v-1fa9ada8\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Tapes.vue\n// module id = 165\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../../../.config/yarn/global/node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?-autoprefixer&sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/style-rewriter?id=data-v-a86abc4a&scoped=true!postcss-loader?sourceMap!sass-loader?sourceMap!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=styles&index=0!./ViewSlider.vue\")\n\nvar Component = require(\"!../../../../.config/yarn/global/node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=script&index=0!./ViewSlider.vue\"),\n  /* template */\n  require(\"!!../../../../.config/yarn/global/node_modules/vue-loader/lib/template-compiler?id=data-v-a86abc4a!../../../../.config/yarn/global/node_modules/vue-loader/lib/selector?type=template&index=0!./ViewSlider.vue\"),\n  /* scopeId */\n  \"data-v-a86abc4a\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/ViewSlider.vue\n// module id = 166\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"layout\": \"column u1\"\n    },\n    on: {\n      \"wheel\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleWheel($event)\n      }\n    }\n  }, _vm._l((_vm.tapes), function(tape, index) {\n    return _c('Tape', {\n      key: tape.id,\n      attrs: {\n        \"tape\": tape,\n        \"region\": _vm.region\n      }\n    })\n  }))\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-1fa9ada8!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Tapes.vue\n// module id = 167\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"tape\"\n  }, _vm._l((_vm.clipsInRegion), function(clip) {\n    return _c('Clip', {\n      key: clip.id,\n      attrs: {\n        \"clip\": clip,\n        \"region\": _vm.region\n      }\n    })\n  }))\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-224a5a52!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Tape.vue\n// module id = 168\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"clip\",\n    style: (_vm.style)\n  })\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-43747a05!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Clip.vue\n// module id = 169\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"layout\": \"column u1\"\n    }\n  }, [_c('ViewSlider', {\n    attrs: {\n      \"region\": _vm.region,\n      \"totalBeats\": _vm.showBeats,\n      \"tapes\": _vm.tapes\n    },\n    on: {\n      \"updateRegion\": _vm.updateRegion\n    }\n  }), _vm._v(\" \"), _c('BarMarks', {\n    attrs: {\n      \"region\": _vm.region\n    }\n  }), _vm._v(\" \"), _c('Tapes', {\n    attrs: {\n      \"region\": _vm.region,\n      \"totalBeats\": _vm.showBeats,\n      \"tapes\": _vm.tapes\n    },\n    on: {\n      \"updateRegion\": _vm.updateRegion\n    }\n  })], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-4b828b4f!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/ArrangementPanel.vue\n// module id = 170\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return (!_vm.editing) ? _c('div', {\n    staticClass: \"value\",\n    on: {\n      \"click\": _vm.startEdit,\n      \"wheel\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleWheel($event)\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.formattedValue))]) : _c('form', {\n    on: {\n      \"submit\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.applyEdit($event)\n      }\n    }\n  }, [_c('input', {\n    directives: [{\n      name: \"focus\",\n      rawName: \"v-focus\"\n    }, {\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.internalValue),\n      expression: \"internalValue\"\n    }],\n    staticClass: \"input\",\n    domProps: {\n      \"value\": (_vm.internalValue)\n    },\n    on: {\n      \"keydown\": function($event) {\n        $event.stopPropagation();\n      },\n      \"keyup\": function($event) {\n        $event.stopPropagation();\n      },\n      \"blur\": _vm.cancelEdit,\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.internalValue = $event.target.value\n      }\n    }\n  })])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-4fafa23f!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/NumberSlider.vue\n// module id = 171\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"marks-bar\",\n    style: ({\n      transform: _vm.transform\n    })\n  }, _vm._l((_vm.bars), function(bar) {\n    return _c('div', {\n      key: bar.value,\n      staticClass: \"bar\",\n      style: ({\n        left: bar.left\n      })\n    }, [_vm._v(_vm._s(bar.value))])\n  }))\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-5a9e1cb0!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/BarMarks.vue\n// module id = 172\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"settings\",\n    attrs: {\n      \"layout\": \"row u1\"\n    }\n  }, [_c('div', {\n    staticClass: \"framed\"\n  }, [_c('NumberSlider', {\n    staticClass: \"tempo\",\n    attrs: {\n      \"value\": _vm.tempo,\n      \"step\": 0.1,\n      \"min\": 0,\n      \"max\": 999\n    },\n    on: {\n      \"update\": _vm.updateTempo\n    }\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"framed\",\n    attrs: {\n      \"layout\": \"row center u05\"\n    }\n  }, [_c('NumberSlider', {\n    staticClass: \"metre\",\n    attrs: {\n      \"value\": _vm.metre[0],\n      \"min\": 1,\n      \"max\": 16\n    },\n    on: {\n      \"update\": function($event) {\n        _vm.updateMetre([$event, _vm.metre[1]])\n      }\n    }\n  }), _vm._v(\" \"), _c('span', [_vm._v(\"/\")]), _vm._v(\" \"), _c('NumberSlider', {\n    staticClass: \"metre\",\n    attrs: {\n      \"value\": _vm.metre[1],\n      \"step\": 2,\n      \"min\": 2,\n      \"max\": 16\n    },\n    on: {\n      \"update\": function($event) {\n        _vm.updateMetre([_vm.metre[0], $event])\n      }\n    }\n  })], 1)])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-79157a3c!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/SettingsPanel.vue\n// module id = 173\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"viewSlider\",\n    attrs: {\n      \"layout\": \"column\"\n    },\n    on: {\n      \"wheel\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleWheel($event)\n      },\n      \"mousedown\": function($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        _vm.handleDown($event)\n      }\n    }\n  }, [_vm._l((_vm.tapes), function(tape) {\n    return _c('div', {\n      staticClass: \"tape\"\n    }, _vm._l((tape.clips), function(clip) {\n      return _c('div', {\n        staticClass: \"clip\",\n        style: (_vm.clipStyle(clip))\n      })\n    }))\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"window\",\n    style: (_vm.windowStyle)\n  })], 2)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-a86abc4a!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/components/ViewSlider.vue\n// module id = 174\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"layout\": \"column u1\"\n    }\n  }, [_c('SettingsPanel'), _vm._v(\" \"), _c('ArrangementPanel'), _vm._v(\" \"), _c('KeyboardController')], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/frizi/.config/yarn/global/~/vue-loader/lib/template-compiler.js?id=data-v-defb5986!/Users/frizi/.config/yarn/global/~/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = 175\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 176\n// module chunks = 0","var always = require('./always');\n\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.T\n * @example\n *\n *      R.F(); //=> false\n */\nmodule.exports = always(false);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/F.js\n// module id = 177\n// module chunks = 0","var always = require('./always');\n\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.F\n * @example\n *\n *      R.T(); //=> true\n */\nmodule.exports = always(true);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/T.js\n// module id = 178\n// module chunks = 0","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nmodule.exports = {'@@functional/placeholder': true};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/__.js\n// module id = 179\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      var mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nmodule.exports = _curry1(function addIndex(fn) {\n  return curryN(fn.length, function() {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function() {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/addIndex.js\n// module id = 180\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xall = require('./internal/_xall');\n\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      var equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nmodule.exports = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/all.js\n// module id = 181\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      var isQueen = R.propEq('rank', 'Q');\n *      var isSpade = R.propEq('suit', '♠︎');\n *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nmodule.exports = _curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/allPass.js\n// module id = 182\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      var isClub = R.propEq('suit', '♣');\n *      var isSpade = R.propEq('suit', '♠');\n *      var isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nmodule.exports = _curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/anyPass.js\n// module id = 183\n// module chunks = 0","var _aperture = require('./internal/_aperture');\nvar _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xaperture = require('./internal/_xaperture');\n\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nmodule.exports = _curry2(_dispatchable([], _xaperture, _aperture));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/aperture.js\n// module id = 184\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nmodule.exports = _curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/append.js\n// module id = 185\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar apply = require('./apply');\nvar curryN = require('./curryN');\nvar map = require('./map');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\nvar values = require('./values');\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/applySpec.js\n// module id = 186\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      var byAge = R.ascend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByYoungestFirst = R.sort(byAge, people);\n */\nmodule.exports = _curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/ascend.js\n// module id = 187\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar nAry = require('./nAry');\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nmodule.exports = _curry1(function binary(fn) {\n  return nAry(2, fn);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/binary.js\n// module id = 188\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isFunction = require('./internal/_isFunction');\nvar and = require('./and');\nvar lift = require('./lift');\n\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nmodule.exports = _curry2(function both(f, g) {\n  return _isFunction(f) ?\n    function _both() {\n      return f.apply(this, arguments) && g.apply(this, arguments);\n    } :\n    lift(and)(f, g);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/both.js\n// module id = 189\n// module chunks = 0","var curry = require('./curry');\n\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      var indentN = R.pipe(R.times(R.always(' ')),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      var format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nmodule.exports = curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/call.js\n// module id = 190\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nmodule.exports = _curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min :\n         value > max ? max :\n         value;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/clamp.js\n// module id = 191\n// module chunks = 0","var _clone = require('./internal/_clone');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Creates a deep copy of the value which may contain (nested) `Array`s and\n * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\n * assigned by reference rather than copied\n *\n * Dispatches to a `clone` method if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      var objects = [{}, {}, {}];\n *      var objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nmodule.exports = _curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ?\n    value.clone() :\n    _clone(value, [], [], true);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/clone.js\n// module id = 192\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a, b -> Boolean) -> (a, b -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      var byAge = R.comparator((a, b) => a.age < b.age);\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByIncreasingAge = R.sort(byAge, people);\n */\nmodule.exports = _curry1(function comparator(pred) {\n  return function(a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/comparator.js\n// module id = 193\n// module chunks = 0","var lift = require('./lift');\nvar not = require('./not');\n\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      var isNotNil = R.complement(R.isNil);\n *      isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nmodule.exports = lift(not);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/complement.js\n// module id = 194\n// module chunks = 0","var pipeP = require('./pipeP');\nvar reverse = require('./reverse');\n\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nmodule.exports = function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/composeP.js\n// module id = 195\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar map = require('./map');\nvar max = require('./max');\nvar reduce = require('./reduce');\n\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nmodule.exports = _curry1(function cond(pairs) {\n  var arity = reduce(max,\n                     0,\n                     map(function(pair) { return pair[0].length; }, pairs));\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/cond.js\n// module id = 196\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar constructN = require('./constructN');\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      var AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      var animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      var animalSighting = R.invoker(0, 'sighting');\n *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nmodule.exports = _curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/construct.js\n// module id = 197\n// module chunks = 0","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.contains(3, [1, 2, 3]); //=> true\n *      R.contains(4, [1, 2, 3]); //=> false\n *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.contains([42], [[42]]); //=> true\n */\nmodule.exports = _curry2(_contains);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/contains.js\n// module id = 198\n// module chunks = 0","var reduceBy = require('./reduceBy');\n\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nmodule.exports = reduceBy(function(acc, elem) { return acc + 1; }, 0);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/countBy.js\n// module id = 199\n// module chunks = 0","var add = require('./add');\n\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nmodule.exports = add(-1);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dec.js\n// module id = 200\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      var byAge = R.descend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByOldestFirst = R.sort(byAge, people);\n */\nmodule.exports = _curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/descend.js\n// module id = 201\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isInteger = require('./internal/_isInteger');\nvar assoc = require('./assoc');\nvar dissoc = require('./dissoc');\nvar remove = require('./remove');\nvar update = require('./update');\n\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nmodule.exports = _curry2(function dissocPath(path, obj) {\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return _isInteger(path[0]) ? remove(path[0], 1, obj) : dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      if (obj[head] == null) {\n        return obj;\n      } else if (_isInteger(path[0])) {\n        return update(head, dissocPath(tail, obj[head]), obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dissocPath.js\n// module id = 202\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      var half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      var reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nmodule.exports = _curry2(function divide(a, b) { return a / b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/divide.js\n// module id = 203\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _dropLast = require('./internal/_dropLast');\nvar _xdropLast = require('./internal/_xdropLast');\n\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nmodule.exports = _curry2(_dispatchable([], _xdropLast, _dropLast));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dropLast.js\n// module id = 204\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _dropLastWhile = require('./internal/_dropLastWhile');\nvar _xdropLastWhile = require('./internal/_xdropLastWhile');\n\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} predicate The function to be called on each element\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      var lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dropLastWhile.js\n// module id = 205\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropRepeatsWith = require('./internal/_xdropRepeatsWith');\nvar dropRepeatsWith = require('./dropRepeatsWith');\nvar equals = require('./equals');\n\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nmodule.exports = _curry1(_dispatchable([], _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dropRepeats.js\n// module id = 206\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropWhile = require('./internal/_xdropWhile');\n\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      var lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n */\nmodule.exports = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len && pred(list[idx])) {\n    idx += 1;\n  }\n  return Array.prototype.slice.call(list, idx);\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/dropWhile.js\n// module id = 207\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isFunction = require('./internal/_isFunction');\nvar lift = require('./lift');\nvar or = require('./or');\n\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nmodule.exports = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/either.js\n// module id = 208\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar equals = require('./equals');\nvar takeLast = require('./takeLast');\n\n/**\n * Checks if a list ends with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nmodule.exports = _curry2(function(suffix, list) {\n  return equals(takeLast(suffix.length, list), suffix);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/endsWith.js\n// module id = 209\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nmodule.exports = _curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/eqBy.js\n// module id = 210\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nmodule.exports = _curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/eqProps.js\n// module id = 211\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      var transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nmodule.exports = _curry2(function evolve(transformations, object) {\n  var result = {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function'                 ? transformation(object[key])\n                : transformation && type === 'object' ? evolve(transformation, object[key])\n                                                      : object[key];\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/evolve.js\n// module id = 212\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfind = require('./internal/_xfind');\n\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/find.js\n// module id = 213\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfindIndex = require('./internal/_xfindIndex');\n\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n */\nmodule.exports = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/findIndex.js\n// module id = 214\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfindLast = require('./internal/_xfindLast');\n\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/findLast.js\n// module id = 215\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfindLastIndex = require('./internal/_xfindLastIndex');\n\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n */\nmodule.exports = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/findLastIndex.js\n// module id = 216\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _makeFlat = require('./internal/_makeFlat');\n\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nmodule.exports = _curry1(_makeFlat(true));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/flatten.js\n// module id = 217\n// module chunks = 0","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nmodule.exports = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/forEach.js\n// module id = 218\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar keys = require('./keys');\n\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nmodule.exports = _curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/forEachObjIndexed.js\n// module id = 219\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/fromPairs.js\n// module id = 220\n// module chunks = 0","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry2 = require('./internal/_curry2');\nvar reduceBy = require('./reduceBy');\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a String-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> String) -> [a] -> {String: [a]}\n * @param {Function} fn Function :: a -> String\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.transduce\n * @example\n *\n *      var byGrade = R.groupBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nmodule.exports = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\n  if (acc == null) {\n    acc = [];\n  }\n  acc.push(item);\n  return acc;\n}, null)));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/groupBy.js\n// module id = 221\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nmodule.exports = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/groupWith.js\n// module id = 222\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nmodule.exports = _curry2(function gt(a, b) { return a > b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/gt.js\n// module id = 223\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nmodule.exports = _curry2(function gte(a, b) { return a >= b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/gte.js\n// module id = 224\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _has = require('./internal/_has');\n\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      var hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      var point = {x: 0, y: 0};\n *      var pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nmodule.exports = _curry2(_has);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/has.js\n// module id = 225\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      var square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nmodule.exports = _curry2(function hasIn(prop, obj) {\n  return prop in obj;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/hasIn.js\n// module id = 226\n// module chunks = 0","var nth = require('./nth');\n\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nmodule.exports = nth(0);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/head.js\n// module id = 227\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar curryN = require('./curryN');\n\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nmodule.exports = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/ifElse.js\n// module id = 228\n// module chunks = 0","var add = require('./add');\n\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nmodule.exports = add(1);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/inc.js\n// module id = 229\n// module chunks = 0","var reduceBy = require('./reduceBy');\n\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n * @param {Function} fn Function :: a -> String\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @example\n *\n *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nmodule.exports = reduceBy(function(acc, elem) { return elem; }, null);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/indexBy.js\n// module id = 230\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _indexOf = require('./internal/_indexOf');\nvar _isArray = require('./internal/_isArray');\n\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nmodule.exports = _curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ?\n    xs.indexOf(target) :\n    _indexOf(xs, target, 0);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/indexOf.js\n// module id = 231\n// module chunks = 0","var slice = require('./slice');\n\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nmodule.exports = slice(0, -1);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/init.js\n// module id = 232\n// module chunks = 0","var _containsWith = require('./internal/_containsWith');\nvar _curry3 = require('./internal/_curry3');\nvar _filter = require('./internal/_filter');\n\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig (a -> b -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nmodule.exports = _curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function(x) { return _containsWith(pred, x, ys); }, xs);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/innerJoin.js\n// module id = 233\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nmodule.exports = _curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/insert.js\n// module id = 234\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nmodule.exports = _curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(Array.prototype.slice.call(list, 0, idx),\n                   elts,\n                   Array.prototype.slice.call(list, idx));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/insertAll.js\n// module id = 235\n// module chunks = 0","var _contains = require('./_contains');\n\n\n// A simple Set type that honours R.equals semantics\nmodule.exports = (function() {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function(item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function(item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  function hasOrAdd(item, shouldAdd, set) {\n    var type = typeof item;\n    var prevSize, newSize;\n    switch (type) {\n      case 'string':\n      case 'number':\n        // distinguish between +0 and -0\n        if (item === 0 && 1 / item === -Infinity) {\n          if (set._items['-0']) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items['-0'] = true;\n            }\n            return false;\n          }\n        }\n        // these types can all utilise the native Set\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = {};\n              set._items[type][item] = true;\n            }\n            return false;\n          } else if (item in set._items[type]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][item] = true;\n            }\n            return false;\n          }\n        }\n\n      case 'boolean':\n        // set._items['boolean'] holds a two element array\n        // representing [ falseExists, trueExists ]\n        if (type in set._items) {\n          var bIdx = item ? 1 : 0;\n          if (set._items[type][bIdx]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][bIdx] = true;\n            }\n            return false;\n          }\n        } else {\n          if (shouldAdd) {\n            set._items[type] = item ? [false, true] : [true, false];\n          }\n          return false;\n        }\n\n      case 'function':\n        // compare functions for reference equality\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = [item];\n            }\n            return false;\n          }\n          if (!_contains(item, set._items[type])) {\n            if (shouldAdd) {\n              set._items[type].push(item);\n            }\n            return false;\n          }\n          return true;\n        }\n\n      case 'undefined':\n        if (set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type] = true;\n          }\n          return false;\n        }\n\n      case 'object':\n        if (item === null) {\n          if (!set._items['null']) {\n            if (shouldAdd) {\n              set._items['null'] = true;\n            }\n            return false;\n          }\n          return true;\n        }\n      /* falls through */\n      default:\n        // reduce the search size of heterogeneous sets by creating buckets\n        // for each type.\n        type = Object.prototype.toString.call(item);\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        // scan through all previously applied items\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n    }\n  }\n  return _Set;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_Set.js\n// module id = 236\n// module chunks = 0","module.exports = function _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_aperture.js\n// module id = 237\n// module chunks = 0","module.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_arrayFromIterator.js\n// module id = 238\n// module chunks = 0","var take = require('../take');\n\nmodule.exports = function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_dropLast.js\n// module id = 239\n// module chunks = 0","module.exports = function dropLastWhile(pred, list) {\n  var idx = list.length - 1;\n  while (idx >= 0 && pred(list[idx])) {\n    idx -= 1;\n  }\n  return Array.prototype.slice.call(list, 0, idx + 1);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_dropLastWhile.js\n// module id = 240\n// module chunks = 0","var _arrayFromIterator = require('./_arrayFromIterator');\nvar _functionName = require('./_functionName');\nvar _has = require('./_has');\nvar identical = require('../identical');\nvar keys = require('../keys');\nvar type = require('../type');\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) &&\n           typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_equals.js\n// module id = 241\n// module chunks = 0","var _forceReduced = require('./_forceReduced');\nvar _isArrayLike = require('./_isArrayLike');\nvar _reduce = require('./_reduce');\nvar _xfBase = require('./_xfBase');\n\nmodule.exports = (function() {\n  var preservingReduced = function(xf) {\n    return {\n      '@@transducer/init': _xfBase.init,\n      '@@transducer/result': function(result) {\n        return xf['@@transducer/result'](result);\n      },\n      '@@transducer/step': function(result, input) {\n        var ret = xf['@@transducer/step'](result, input);\n        return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n      }\n    };\n  };\n\n  return function _xcat(xf) {\n    var rxf = preservingReduced(xf);\n    return {\n      '@@transducer/init': _xfBase.init,\n      '@@transducer/result': function(result) {\n        return rxf['@@transducer/result'](result);\n      },\n      '@@transducer/step': function(result, input) {\n        return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n      }\n    };\n  };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_flatCat.js\n// module id = 242\n// module chunks = 0","module.exports = function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_forceReduced.js\n// module id = 243\n// module chunks = 0","module.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_functionName.js\n// module id = 244\n// module chunks = 0","module.exports = function _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isRegExp.js\n// module id = 245\n// module chunks = 0","var _has = require('./_has');\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nmodule.exports = function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_objectAssign.js\n// module id = 246\n// module chunks = 0","module.exports = function _of(x) { return [x]; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_of.js\n// module id = 247\n// module chunks = 0","module.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_pipe.js\n// module id = 248\n// module chunks = 0","module.exports = function _pipeP(f, g) {\n  return function() {\n    var ctx = this;\n    return f.apply(ctx, arguments).then(function(x) {\n      return g.call(ctx, x);\n    });\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_pipeP.js\n// module id = 249\n// module chunks = 0","module.exports = function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_quote.js\n// module id = 250\n// module chunks = 0","var _assign = require('./_assign');\nvar _identity = require('./_identity');\nvar _isArrayLike = require('./_isArrayLike');\nvar _isTransformer = require('./_isTransformer');\nvar objOf = require('../objOf');\n\n\nmodule.exports = (function() {\n  var _stepCatArray = {\n    '@@transducer/init': Array,\n    '@@transducer/step': function(xs, x) {\n      xs.push(x);\n      return xs;\n    },\n    '@@transducer/result': _identity\n  };\n  var _stepCatString = {\n    '@@transducer/init': String,\n    '@@transducer/step': function(a, b) { return a + b; },\n    '@@transducer/result': _identity\n  };\n  var _stepCatObject = {\n    '@@transducer/init': Object,\n    '@@transducer/step': function(result, input) {\n      return _assign(\n        result,\n        _isArrayLike(input) ? objOf(input[0], input[1]) : input\n      );\n    },\n    '@@transducer/result': _identity\n  };\n\n  return function _stepCat(obj) {\n    if (_isTransformer(obj)) {\n      return obj;\n    }\n    if (_isArrayLike(obj)) {\n      return _stepCatArray;\n    }\n    if (typeof obj === 'string') {\n      return _stepCatString;\n    }\n    if (typeof obj === 'object') {\n      return _stepCatObject;\n    }\n    throw new Error('Cannot create transformer for ' + obj);\n  };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_stepCat.js\n// module id = 251\n// module chunks = 0","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nmodule.exports = (function() {\n  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\n  return typeof Date.prototype.toISOString === 'function' ?\n    function _toISOString(d) {\n      return d.toISOString();\n    } :\n    function _toISOString(d) {\n      return (\n        d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + '.' +\n        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n      );\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_toISOString.js\n// module id = 252\n// module chunks = 0","var _contains = require('./_contains');\nvar _map = require('./_map');\nvar _quote = require('./_quote');\nvar _toISOString = require('./_toISOString');\nvar keys = require('../keys');\nvar reject = require('../reject');\n\n\nmodule.exports = function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_toString.js\n// module id = 253\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XAll(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.all = true;\n  }\n  XAll.prototype['@@transducer/init'] = _xfBase.init;\n  XAll.prototype['@@transducer/result'] = function(result) {\n    if (this.all) {\n      result = this.xf['@@transducer/step'](result, true);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAll.prototype['@@transducer/step'] = function(result, input) {\n    if (!this.f(input)) {\n      this.all = false;\n      result = _reduced(this.xf['@@transducer/step'](result, false));\n    }\n    return result;\n  };\n\n  return _curry2(function _xall(f, xf) { return new XAll(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xall.js\n// module id = 254\n// module chunks = 0","var _concat = require('./_concat');\nvar _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XAperture(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XAperture.prototype['@@transducer/init'] = _xfBase.init;\n  XAperture.prototype['@@transducer/result'] = function(result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XAperture.prototype['@@transducer/step'] = function(result, input) {\n    this.store(input);\n    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n  };\n  XAperture.prototype.store = function(input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n  XAperture.prototype.getCopy = function() {\n    return _concat(Array.prototype.slice.call(this.acc, this.pos),\n                   Array.prototype.slice.call(this.acc, 0, this.pos));\n  };\n\n  return _curry2(function _xaperture(n, xf) { return new XAperture(n, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xaperture.js\n// module id = 255\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _flatCat = require('./_flatCat');\nvar map = require('../map');\n\n\nmodule.exports = _curry2(function _xchain(f, xf) {\n  return map(f, _flatCat(xf));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xchain.js\n// module id = 256\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function(result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdrop(n, xf) { return new XDrop(n, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xdrop.js\n// module id = 257\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDropLast(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLast.prototype['@@transducer/result'] =  function(result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLast.prototype['@@transducer/step'] = function(result, input) {\n    if (this.full) {\n      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n    }\n    this.store(input);\n    return result;\n  };\n  XDropLast.prototype.store = function(input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n\n  return _curry2(function _xdropLast(n, xf) { return new XDropLast(n, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xdropLast.js\n// module id = 258\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduce = require('./_reduce');\nvar _xfBase = require('./_xfBase');\n\nmodule.exports = (function() {\n  function XDropLastWhile(fn, xf) {\n    this.f = fn;\n    this.retained = [];\n    this.xf = xf;\n  }\n  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLastWhile.prototype['@@transducer/result'] = function(result) {\n    this.retained = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLastWhile.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.retain(result, input)\n                         : this.flush(result, input);\n  };\n  XDropLastWhile.prototype.flush = function(result, input) {\n    result = _reduce(\n      this.xf['@@transducer/step'],\n      result,\n      this.retained\n    );\n    this.retained = [];\n    return this.xf['@@transducer/step'](result, input);\n  };\n  XDropLastWhile.prototype.retain = function(result, input) {\n    this.retained.push(input);\n    return result;\n  };\n\n  return _curry2(function _xdropLastWhile(fn, xf) { return new XDropLastWhile(fn, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xdropLastWhile.js\n// module id = 259\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDropWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XDropWhile.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f) {\n      if (this.f(input)) {\n        return result;\n      }\n      this.f = null;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdropWhile(f, xf) { return new XDropWhile(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xdropWhile.js\n// module id = 260\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xfilter.js\n// module id = 261\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfind(f, xf) { return new XFind(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xfind.js\n// module id = 262\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFindIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.found = false;\n  }\n  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindIndex.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, -1);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFindIndex.prototype['@@transducer/step'] = function(result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindIndex(f, xf) { return new XFindIndex(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xfindIndex.js\n// module id = 263\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFindLast(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLast.prototype['@@transducer/result'] = function(result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n  };\n  XFindLast.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.last = input;\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindLast(f, xf) { return new XFindLast(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xfindLast.js\n// module id = 264\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFindLastIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.lastIdx = -1;\n  }\n  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLastIndex.prototype['@@transducer/result'] = function(result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n  };\n  XFindLastIndex.prototype['@@transducer/step'] = function(result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.lastIdx = this.idx;\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindLastIndex(f, xf) { return new XFindLastIndex(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xfindLastIndex.js\n// module id = 265\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xmap.js\n// module id = 266\n// module chunks = 0","var _curryN = require('./_curryN');\nvar _has = require('./_has');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n    this.valueFn = valueFn;\n    this.valueAcc = valueAcc;\n    this.keyFn = keyFn;\n    this.xf = xf;\n    this.inputs = {};\n  }\n  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n  XReduceBy.prototype['@@transducer/result'] = function(result) {\n    var key;\n    for (key in this.inputs) {\n      if (_has(key, this.inputs)) {\n        result = this.xf['@@transducer/step'](result, this.inputs[key]);\n        if (result['@@transducer/reduced']) {\n          result = result['@@transducer/value'];\n          break;\n        }\n      }\n    }\n    this.inputs = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XReduceBy.prototype['@@transducer/step'] = function(result, input) {\n    var key = this.keyFn(input);\n    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n    return result;\n  };\n\n  return _curryN(4, [],\n                 function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n                   return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n                 });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xreduceBy.js\n// module id = 267\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\nmodule.exports = (function() {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function(result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return _curry2(function _xtake(n, xf) { return new XTake(n, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xtake.js\n// module id = 268\n// module chunks = 0","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XTakeWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XTakeWhile.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n  };\n\n  return _curry2(function _xtakeWhile(f, xf) { return new XTakeWhile(f, xf); });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_xtakeWhile.js\n// module id = 269\n// module chunks = 0","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\nvar _filter = require('./internal/_filter');\nvar flip = require('./flip');\nvar uniq = require('./uniq');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nmodule.exports = _curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return uniq(_filter(flip(_contains)(lookupList), filteredList));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/intersection.js\n// module id = 270\n// module chunks = 0","var _containsWith = require('./internal/_containsWith');\nvar _curry3 = require('./internal/_curry3');\nvar uniqWith = require('./uniqWith');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate function that determines whether\n *        the two supplied elements are equal.\n * @param {Array} list1 One list of items to compare\n * @param {Array} list2 A second list of items to compare\n * @return {Array} A new list containing those elements common to both lists.\n * @see R.innerJoin\n * @deprecated since v0.24.0\n * @example\n *\n *      var buffaloSpringfield = [\n *        {id: 824, name: 'Richie Furay'},\n *        {id: 956, name: 'Dewey Martin'},\n *        {id: 313, name: 'Bruce Palmer'},\n *        {id: 456, name: 'Stephen Stills'},\n *        {id: 177, name: 'Neil Young'}\n *      ];\n *      var csny = [\n *        {id: 204, name: 'David Crosby'},\n *        {id: 456, name: 'Stephen Stills'},\n *        {id: 539, name: 'Graham Nash'},\n *        {id: 177, name: 'Neil Young'}\n *      ];\n *\n *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nmodule.exports = _curry3(function intersectionWith(pred, list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  var results = [];\n  var idx = 0;\n  while (idx < filteredList.length) {\n    if (_containsWith(pred, filteredList[idx], lookupList)) {\n      results[results.length] = filteredList[idx];\n    }\n    idx += 1;\n  }\n  return uniqWith(pred, results);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/intersectionWith.js\n// module id = 271\n// module chunks = 0","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nmodule.exports = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/intersperse.js\n// module id = 272\n// module chunks = 0","var _clone = require('./internal/_clone');\nvar _curry3 = require('./internal/_curry3');\nvar _isTransformer = require('./internal/_isTransformer');\nvar _reduce = require('./internal/_reduce');\nvar _stepCat = require('./internal/_stepCat');\n\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nmodule.exports = _curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ?\n    _reduce(xf(acc), acc['@@transducer/init'](), list) :\n    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/into.js\n// module id = 273\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar keys = require('./keys');\n\n\n/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nmodule.exports = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : (out[val] = []);\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/invert.js\n// module id = 274\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar keys = require('./keys');\n\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      var raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      var raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nmodule.exports = _curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/invertObj.js\n// module id = 275\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar empty = require('./empty');\nvar equals = require('./equals');\n\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\nmodule.exports = _curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/isEmpty.js\n// module id = 276\n// module chunks = 0","var invoker = require('./invoker');\n\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      var spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nmodule.exports = invoker(1, 'join');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/join.js\n// module id = 277\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nmodule.exports = _curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/keysIn.js\n// module id = 278\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isArray = require('./internal/_isArray');\nvar equals = require('./equals');\n\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nmodule.exports = _curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lastIndexOf.js\n// module id = 279\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar lens = require('./lens');\nvar nth = require('./nth');\nvar update = require('./update');\n\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nmodule.exports = _curry1(function lensIndex(n) {\n  return lens(nth(n), update(n));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lensIndex.js\n// module id = 280\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar assocPath = require('./assocPath');\nvar lens = require('./lens');\nvar path = require('./path');\n\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\nmodule.exports = _curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lensPath.js\n// module id = 281\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar assoc = require('./assoc');\nvar lens = require('./lens');\nvar prop = require('./prop');\n\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lensProp.js\n// module id = 282\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lt(a, b) { return a < b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lt.js\n// module id = 283\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lte(a, b) { return a <= b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/lte.js\n// module id = 284\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nmodule.exports = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mapAccum.js\n// module id = 285\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nmodule.exports = _curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mapAccumRight.js\n// module id = 286\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar keys = require('./keys');\n\n\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      var values = { x: 1, y: 2, z: 3 };\n *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nmodule.exports = _curry2(function mapObjIndexed(fn, obj) {\n  return _reduce(function(acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mapObjIndexed.js\n// module id = 287\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nmodule.exports = _curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/match.js\n// module id = 288\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isInteger = require('./internal/_isInteger');\n\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nmodule.exports = _curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) { return NaN; }\n  if (!_isInteger(p) || p < 1) { return NaN; }\n  return ((m % p) + p) % p;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mathMod.js\n// module id = 289\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nmodule.exports = _curry3(function maxBy(f, a, b) {\n  return f(b) > f(a) ? b : a;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/maxBy.js\n// module id = 290\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar mean = require('./mean');\n\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nmodule.exports = _curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/median.js\n// module id = 291\n// module chunks = 0","var memoizeWith = require('./memoizeWith');\nvar toString = require('./toString');\n\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoizeWith\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nmodule.exports = memoizeWith(function() {\n  return toString(arguments);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/memoize.js\n// module id = 292\n// module chunks = 0","var _assign = require('./internal/_assign');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nmodule.exports = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/merge.js\n// module id = 293\n// module chunks = 0","var _assign = require('./internal/_assign');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Merges a list of objects together into one object.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nmodule.exports = _curry1(function mergeAll(list) {\n  return _assign.apply(null, [{}].concat(list));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeAll.js\n// module id = 294\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar mergeDeepWithKey = require('./mergeDeepWithKey');\n\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */\nmodule.exports = _curry2(function mergeDeepLeft(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return lVal;\n  }, lObj, rObj);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeDeepLeft.js\n// module id = 295\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar mergeDeepWithKey = require('./mergeDeepWithKey');\n\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\nmodule.exports = _curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeDeepRight.js\n// module id = 296\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar mergeDeepWithKey = require('./mergeDeepWithKey');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\nmodule.exports = _curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeDeepWith.js\n// module id = 297\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar mergeWithKey = require('./mergeWithKey');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nmodule.exports = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/mergeWith.js\n// module id = 298\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nmodule.exports = _curry2(function min(a, b) { return b < a ? b : a; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/min.js\n// module id = 299\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nmodule.exports = _curry3(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/minBy.js\n// module id = 300\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nmodule.exports = _curry2(function modulo(a, b) { return a % b; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/modulo.js\n// module id = 301\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nmodule.exports = _curry1(function negate(n) { return -n; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/negate.js\n// module id = 302\n// module chunks = 0","var _complement = require('./internal/_complement');\nvar _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xany = require('./internal/_xany');\nvar any = require('./any');\n\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n */\nmodule.exports = _curry2(_complement(_dispatchable(['any'], _xany, any)));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/none.js\n// module id = 303\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\nvar nth = require('./nth');\n\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nmodule.exports = _curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function() {\n    return nth(n, arguments);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/nthArg.js\n// module id = 304\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      var classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + lastName\n *      var yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */\nmodule.exports = _curry3(function o(f, g, x) {\n  return f(g(x));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/o.js\n// module id = 305\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _of = require('./internal/_of');\n\n\n/**\n * Returns a singleton array containing the value provided.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> [a]\n * @param {*} x any value\n * @return {Array} An array wrapping `x`.\n * @example\n *\n *      R.of(null); //=> [null]\n *      R.of([42]); //=> [[42]]\n */\nmodule.exports = _curry1(_of);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/of.js\n// module id = 306\n// module chunks = 0","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nmodule.exports = _curry2(function omit(names, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (!_contains(prop, names)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/omit.js\n// module id = 307\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nmodule.exports = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function() {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/once.js\n// module id = 308\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nmodule.exports = _curry2(function pair(fst, snd) { return [fst, snd]; });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pair.js\n// module id = 309\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _createPartialApplicator = require('./internal/_createPartialApplicator');\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nmodule.exports = _createPartialApplicator(_concat);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/partial.js\n// module id = 310\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _createPartialApplicator = require('./internal/_createPartialApplicator');\nvar flip = require('./flip');\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nmodule.exports = _createPartialApplicator(flip(_concat));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/partialRight.js\n// module id = 311\n// module chunks = 0","var filter = require('./filter');\nvar juxt = require('./juxt');\nvar reject = require('./reject');\n\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nmodule.exports = juxt([filter, reject]);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/partition.js\n// module id = 312\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\nvar path = require('./path');\n\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nmodule.exports = _curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pathEq.js\n// module id = 313\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar defaultTo = require('./defaultTo');\nvar path = require('./path');\n\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nmodule.exports = _curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pathOr.js\n// module id = 314\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar path = require('./path');\n\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n */\nmodule.exports = _curry3(function pathSatisfies(pred, propPath, obj) {\n  return propPath.length > 0 && pred(path(propPath, obj));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pathSatisfies.js\n// module id = 315\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nmodule.exports = _curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pick.js\n// module id = 316\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nmodule.exports = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pickBy.js\n// module id = 317\n// module chunks = 0","var composeK = require('./composeK');\nvar reverse = require('./reverse');\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nmodule.exports = function pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n  return composeK.apply(this, reverse(arguments));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/pipeK.js\n// module id = 318\n// module chunks = 0","var multiply = require('./multiply');\nvar reduce = require('./reduce');\n\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nmodule.exports = reduce(multiply, 1);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/product.js\n// module id = 319\n// module chunks = 0","var _map = require('./internal/_map');\nvar identity = require('./identity');\nvar pickAll = require('./pickAll');\nvar useWith = require('./useWith');\n\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      var kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nmodule.exports = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/project.js\n// module id = 320\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.equals, R.propSatisfies\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nmodule.exports = _curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/propEq.js\n// module id = 321\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar is = require('./is');\n\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nmodule.exports = _curry3(function propIs(type, name, obj) {\n  return is(type, obj[name]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/propIs.js\n// module id = 322\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var favorite = R.prop('favoriteLibrary');\n *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nmodule.exports = _curry3(function propOr(val, p, obj) {\n  return (obj != null && _has(p, obj)) ? obj[p] : val;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/propOr.js\n// module id = 323\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nmodule.exports = _curry3(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/propSatisfies.js\n// module id = 324\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nmodule.exports = _curry2(function props(ps, obj) {\n  var len = ps.length;\n  var out = [];\n  var idx = 0;\n\n  while (idx < len) {\n    out[idx] = obj[ps[idx]];\n    idx += 1;\n  }\n\n  return out;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/props.js\n// module id = 325\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _isNumber = require('./internal/_isNumber');\n\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nmodule.exports = _curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/range.js\n// module id = 326\n// module chunks = 0","var _curryN = require('./internal/_curryN');\nvar _reduce = require('./internal/_reduce');\nvar _reduced = require('./internal/_reduced');\n\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nmodule.exports = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function(acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reduceWhile.js\n// module id = 327\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _reduced = require('./internal/_reduced');\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * Note: this optimization is unavailable to functions not explicitly listed\n * above. For instance, it is not currently supported by\n * [`reduceRight`](#reduceRight).\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */\n\nmodule.exports = _curry1(_reduced);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/reduced.js\n// module id = 328\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar always = require('./always');\nvar times = require('./times');\n\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      var obj = {};\n *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nmodule.exports = _curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/repeat.js\n// module id = 329\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nmodule.exports = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/replace.js\n// module id = 330\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a,b -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nmodule.exports = _curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/scan.js\n// module id = 331\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar always = require('./always');\nvar over = require('./over');\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nmodule.exports = _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/set.js\n// module id = 332\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,a -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @example\n *\n *      var diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nmodule.exports = _curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/sort.js\n// module id = 333\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      var people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nmodule.exports = _curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/sortBy.js\n// module id = 334\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [a -> a -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @example\n *\n *      var alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      var bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      var people = [clara, bob, alice];\n *      var ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nmodule.exports = _curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/sortWith.js\n// module id = 335\n// module chunks = 0","var invoker = require('./invoker');\n\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nmodule.exports = invoker(1, 'split');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/split.js\n// module id = 336\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar length = require('./length');\nvar slice = require('./slice');\n\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nmodule.exports = _curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/splitAt.js\n// module id = 337\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar slice = require('./slice');\n\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nmodule.exports = _curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/splitEvery.js\n// module id = 338\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nmodule.exports = _curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/splitWhen.js\n// module id = 339\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar equals = require('./equals');\nvar take = require('./take');\n\n/**\n * Checks if a list starts with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nmodule.exports = _curry2(function(prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/startsWith.js\n// module id = 340\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      var minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      var complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nmodule.exports = _curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/subtract.js\n// module id = 341\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar concat = require('./concat');\nvar difference = require('./difference');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nmodule.exports = _curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/symmetricDifference.js\n// module id = 342\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar concat = require('./concat');\nvar differenceWith = require('./differenceWith');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nmodule.exports = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/symmetricDifferenceWith.js\n// module id = 343\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n */\nmodule.exports = _curry2(function takeLastWhile(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0 && fn(list[idx])) {\n    idx -= 1;\n  }\n  return Array.prototype.slice.call(list, idx + 1);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/takeLastWhile.js\n// module id = 344\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xtakeWhile = require('./internal/_xtakeWhile');\n\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      var isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n */\nmodule.exports = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len && fn(list[idx])) {\n    idx += 1;\n  }\n  return Array.prototype.slice.call(list, 0, idx);\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/takeWhile.js\n// module id = 345\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nmodule.exports = _curry2(function tap(fn, x) {\n  fn(x);\n  return x;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/tap.js\n// module id = 346\n// module chunks = 0","var _cloneRegExp = require('./internal/_cloneRegExp');\nvar _curry2 = require('./internal/_curry2');\nvar _isRegExp = require('./internal/_isRegExp');\nvar toString = require('./toString');\n\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nmodule.exports = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/test.js\n// module id = 347\n// module chunks = 0","var invoker = require('./invoker');\n\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nmodule.exports = invoker(0, 'toLowerCase');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/toLower.js\n// module id = 348\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\n\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nmodule.exports = _curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/toPairs.js\n// module id = 349\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nmodule.exports = _curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/toPairsIn.js\n// module id = 350\n// module chunks = 0","var invoker = require('./invoker');\n\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nmodule.exports = invoker(0, 'toUpperCase');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/toUpper.js\n// module id = 351\n// module chunks = 0","var _reduce = require('./internal/_reduce');\nvar _xwrap = require('./internal/_xwrap');\nvar curryN = require('./curryN');\n\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      var isOdd = (x) => x % 2 === 1;\n *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nmodule.exports = curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/transduce.js\n// module id = 352\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nmodule.exports = _curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/transpose.js\n// module id = 353\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\nvar map = require('./map');\nvar sequence = require('./sequence');\n\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n * @param {Function} of\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Nothing` if the given divisor is `0`\n *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n */\nmodule.exports = _curry3(function traverse(of, f, traversable) {\n  return typeof traversable['fantasy-land/traverse'] === 'function' ?\n    traversable['fantasy-land/traverse'](f, of) :\n    sequence(of, map(f, traversable));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/traverse.js\n// module id = 354\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nmodule.exports = (function() {\n  var ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n           '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n           '\\u2029\\uFEFF';\n  var zeroWidth = '\\u200b';\n  var hasProtoTrim = (typeof String.prototype.trim === 'function');\n  if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n    return _curry1(function trim(str) {\n      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n      return str.replace(beginRx, '').replace(endRx, '');\n    });\n  } else {\n    return _curry1(function trim(str) {\n      return str.trim();\n    });\n  }\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/trim.js\n// module id = 355\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n */\nmodule.exports = _curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function() {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/tryCatch.js\n// module id = 356\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nmodule.exports = _curry1(function unapply(fn) {\n  return function() {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/unapply.js\n// module id = 357\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\nvar nAry = require('./nAry');\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      var takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nmodule.exports = _curry1(function unary(fn) {\n  return nAry(1, fn);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/unary.js\n// module id = 358\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      var addFour = a => b => c => d => a + b + c + d;\n *\n *      var uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nmodule.exports = _curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function() {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/uncurryN.js\n// module id = 359\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nmodule.exports = _curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/unfold.js\n// module id = 360\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\nvar compose = require('./compose');\nvar uniq = require('./uniq');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nmodule.exports = _curry2(compose(uniq, _concat));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/union.js\n// module id = 361\n// module chunks = 0","var _concat = require('./internal/_concat');\nvar _curry3 = require('./internal/_curry3');\nvar uniqWith = require('./uniqWith');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nmodule.exports = _curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/unionWith.js\n// module id = 362\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nmodule.exports = _curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/unless.js\n// module id = 363\n// module chunks = 0","var _identity = require('./internal/_identity');\nvar chain = require('./chain');\n\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nmodule.exports = chain(_identity);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/unnest.js\n// module id = 364\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nmodule.exports = _curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/until.js\n// module id = 365\n// module chunks = 0","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nmodule.exports = _curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/valuesIn.js\n// module id = 366\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nmodule.exports = (function() {\n  // `Const` is a functor that effectively ignores the function given to `map`.\n  var Const = function(x) {\n    return {value: x, 'fantasy-land/map': function() { return this; }};\n  };\n\n  return _curry2(function view(lens, x) {\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    return lens(Const)(x).value;\n  });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/view.js\n// module id = 367\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless\n * @example\n *\n *      // truncate :: String -> String\n *      var truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nmodule.exports = _curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/when.js\n// module id = 368\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\nvar equals = require('./equals');\nvar map = require('./map');\nvar where = require('./where');\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nmodule.exports = _curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/whereEq.js\n// module id = 369\n// module chunks = 0","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\nvar flip = require('./flip');\nvar reject = require('./reject');\n\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nmodule.exports = _curry2(function(xs, list) {\n  return reject(flip(_contains)(xs), list);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/without.js\n// module id = 370\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nmodule.exports = _curry2(function xprod(a, b) { // = xprodWith(prepend); (takes about 3 times as long...)\n  var idx = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = [];\n  while (idx < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[result.length] = [a[idx], b[j]];\n      j += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/xprod.js\n// module id = 371\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nmodule.exports = _curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/zip.js\n// module id = 372\n// module chunks = 0","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/zipObj.js\n// module id = 373\n// module chunks = 0","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,b -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      var f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nmodule.exports = _curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/zipWith.js\n// module id = 374\n// module chunks = 0","(function(root, factory){\n\n\t//UMD\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine(function() {\n\t\t\treturn factory();\n\t\t});\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t *          a lot of methods and functionality to all classes that extend\n\t\t *          it. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t    var Tone = function (inputs, outputs) {\n\t        /**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(inputs) || inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        /**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(outputs) || outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which \n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds. \n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (this.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (this.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (this.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (this.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (this.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (this.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (this.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!this.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!this.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCLASS VARS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (this.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (this.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        if (!this.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!this.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Array.isArray(this.output)) {\n\t            outputNum = this.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (this.isArray(this.output)) {\n\t            if (this.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = this.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connectSeries = function () {\n\t        if (arguments.length > 1) {\n\t            var currentUnit = arguments[0];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.chain = function () {\n\t        if (arguments.length > 0) {\n\t            var currentUnit = this;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.fan = function () {\n\t        if (arguments.length > 0) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.connect(arguments[i]);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    //give native nodes chain and fan methods\n\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUTILITIES / HELPERS / MATHS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both \n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property. \n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop.\n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return this.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    /**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t        var options = {};\n\t        if (values.length === 1 && this.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!this.isUndef(defaults)) {\n\t            return this.defaultArg(options, defaults);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t */\n\t    Tone.prototype.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t */\n\t    Tone.prototype.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t */\n\t    Tone.prototype.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t */\n\t    Tone.prototype.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t */\n\t    Tone.prototype.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states. \n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t */\n\t    Tone.prototype.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}   \n\t\t */\n\t    Tone.prototype.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}   \n\t\t */\n\t    Tone.prototype.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.prototype.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes. \n\t\t *  @private\n\t\t *  @type {Tone.Context|undefined}\n\t\t */\n\t    var audioContext;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            if (Tone.Context) {\n\t                Tone.Context.emit('init', audioContext);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    Tone.version = 'r10';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t    };\n\t    Tone.extend(Tone.SignalBase);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t        } else if (this.isFunction(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t                //default units\n\t                units = this.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (this.isString(val)) {\n\t                this.set(val);\n\t            } else if (this.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!this.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!this.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (this.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (this.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!this.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = this.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @override\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * this.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz. \n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value. \n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.prototype.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function (context) {\n\t        Tone.Emitter.call(this);\n\t        if (!context) {\n\t            context = new window.AudioContext();\n\t        }\n\t        this._context = context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = 'interactive';\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lookAhead = 0.1;\n\t        /**\n\t\t\t *  How often the update look runs\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._updateInterval = this._lookAhead / 3;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t *  @private\n\t\t\t *  @type  {WebWorker}\n\t\t\t */\n\t        this._worker = this._createWorker();\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (this.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime;\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.addEventListener('message', function () {\n\t            // tick the clock\n\t            this.emit('tick');\n\t        }.bind(this));\n\t        //lag compensation\n\t        worker.addEventListener('message', function () {\n\t            var now = this.now();\n\t            if (this.isNumber(this._lastUpdate)) {\n\t                var diff = now - this._lastUpdate;\n\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t            }\n\t            this._lastUpdate = now;\n\t        }.bind(this));\n\t        return worker;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  This is the time that the clock is falling behind\n\t\t *  the scheduled update interval. The Context automatically\n\t\t *  adjusts for the lag and schedules further in advance.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lag\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t        get: function () {\n\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t            diff = Math.max(diff, 0);\n\t            return diff;\n\t        }\n\t    });\n\t    /**\n\t\t *  The amount of time in advance that events are scheduled.\n\t\t *  The lookAhead will adjust slightly in response to the \n\t\t *  measured update time to try to avoid clicks.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lookAhead\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t        get: function () {\n\t            return this._lookAhead;\n\t        },\n\t        set: function (lA) {\n\t            this._lookAhead = lA;\n\t        }\n\t    });\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name updateInterval\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @static\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (this.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    function shimConnect() {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                if (Array.isArray(B.input)) {\n\t                    if (Tone.prototype.isUndef(inNum)) {\n\t                        inNum = 0;\n\t                    }\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Array.isArray(B.input)) {\n\t                if (Tone.prototype.isUndef(inNum)) {\n\t                    inNum = 0;\n\t                }\n\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    }\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        shimConnect();\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /** \n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  <ul>\n\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t *  </ul>\n\t\t\t *  \n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value. \n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /** \n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /** \n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /** \n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /** \n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t *  is twice is loud. \n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /** \n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /** \n\t\t\t *  Beats per minute. \n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /** \n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /** \n\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /** \n\t\t\t *  Angle between 0 and 360. \n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /** \n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /** \n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /** \n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /** \n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /** \n\t\t\t *  A frequency represented by a letter name, \n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /** \n\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /** \n\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /** \n\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t *  <ul>\n\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t *  </ul>\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time \n\t\t *  @return {Seconds} \n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (this.isNumber(time)) {\n\t            return time;\n\t        } else if (this.isUndef(time)) {\n\t            return this.now();\n\t        } else if (this.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq \n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (this.isNumber(freq)) {\n\t            return freq;\n\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (this.isNumber(time) || this.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (this.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter. \n\t\t *  @extends {Tone}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param.defaults);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by \n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = null;\n\t        if (this.isObject(options.lfo)) {\n\t            this.value = options.lfo;\n\t        } else if (!this.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter. \n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            if (this.isObject(value)) {\n\t                //throw an error if the LFO needs to be included\n\t                if (this.isUndef(Tone.LFO)) {\n\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t                }\n\t                //remove the old one\n\t                if (this._lfo) {\n\t                    this._lfo.dispose();\n\t                }\n\t                this._lfo = new Tone.LFO(value).start();\n\t                this._lfo.connect(this.input);\n\t            } else {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._param.cancelScheduledValues(0);\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return this.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return this.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        value = this._fromUnits(value);\n\t        time = this.toSeconds(time);\n\t        if (time <= this.now() + this.blockTime) {\n\t            this._param.value = value;\n\t        } else {\n\t            this._param.setValueAtTime(value, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to \n\t\t *  schedule changes from the current value. \n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = this.defaultArg(now, this.now());\n\t        var currentVal = this._param.value;\n\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t * signal.exponentialRampToValue(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t * signal.linearRampToValue(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Param} this \n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array} values    \n\t\t *  @param {Time} startTime \n\t\t *  @param {Time} duration  \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        for (var i = 0; i < values.length; i++) {\n\t            values[i] = this._fromUnits(values[i]);\n\t        }\n\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially \n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = this.defaultArg(rampTime, 0);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampToValue(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The LFO created by the signal instance. If none\n\t\t *  was created, this is null.\n\t\t *  @type {Tone.LFO}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Param#\n\t\t *  @name lfo\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t        get: function () {\n\t            return this._lfo;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param = null;\n\t        if (this._lfo) {\n\t            this._lfo.dispose();\n\t            this._lfo = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain.defaults);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    //STATIC///////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  input   The number of inputs\n\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t *  @return  {Tone}  this\n\t\t *  @internal\n\t\t */\n\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = new Tone.Gain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = new Tone.Gain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._gain = this.context.createGain();\n\t        options.param = this._gain.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this._gain.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).chain(this._gain);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._gain.disconnect();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t *         Internally, events are stored in time order for fast \n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list. \n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t *                           timeline. \n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (this.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._timeline.length) {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t        } else {\n\t            this._timeline.push(event);\n\t        }\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time) {\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t        var index = this._search(time);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        if (this._timeline.length) {\n\t            var index = this._search(time);\n\t            if (index >= 0) {\n\t                this._timeline = this._timeline.slice(index + 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Does a binary serach on the timeline array and returns the \n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time  \n\t\t *  @return  {Number} the index in the timeline array \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time) {\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event.time === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent.time === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event.time < time && nextEvent.time > time) {\n\t                return midPoint;\n\t            } else if (event.time > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else if (event.time < time) {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for \n\t\t *  removing items from the array. \n\t\t *  @param  {Function}  callback \n\t\t *  @param  {Number=}    lowerBound     \n\t\t *  @param  {Number=}    upperBound    \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback(this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        if (this._toRemove.length > 0) {\n\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t                if (index !== -1) {\n\t                    this._timeline.splice(index, 1);\n\t                }\n\t            }\n\t            this._toRemove = [];\n\t        }\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback(event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(10);\n\t        //constructors\n\t        Tone.Signal.apply(this, options);\n\t        options.param = this._param;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Curve: 'curve',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal. \n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._initial = convertedVal;\n\t            this.cancelScheduledValues();\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = this.defaultArg(scaling, 1);\n\t        //copy the array\n\t        var floats = new Array(values.length);\n\t        for (var i = 0; i < floats.length; i++) {\n\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        duration = this.toSeconds(duration);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Curve,\n\t            'value': floats,\n\t            'time': startTime,\n\t            'duration': duration\n\t        });\n\t        //set the first value\n\t        this._param.setValueAtTime(floats[0], startTime);\n\t        //schedule a lienar ramp for each of the segments\n\t        for (var j = 1; j < floats.length; j++) {\n\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after \n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t            //if the curve is still playing\n\t            //cancel the curve\n\t            this.cancelScheduledValues(time);\n\t            this.linearRampToValueAtTime(val, time);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t            this.setValueAtTime(val, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previouVal;\n\t            if (previous === null) {\n\t                previouVal = this._initial;\n\t            } else {\n\t                previouVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t        var len = curve.length;\n\t        // If time is after duration, return the last curve value\n\t        if (time >= start + duration) {\n\t            return curve[len - 1];\n\t        } else if (time <= start) {\n\t            return curve[0];\n\t        } else {\n\t            var progress = (time - start) / duration;\n\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t            var lowerVal = curve[lowerIndex];\n\t            var upperVal = curve[upperIndex];\n\t            if (upperIndex === lowerIndex) {\n\t                return lowerVal;\n\t            } else {\n\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = this.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t *                         0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        /** \n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value \n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for \n\t\t * syncronizing visual output to the envelope. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack. \n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (this.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (this.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (this.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (this.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = this.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampToValue(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampToValue(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.exponentialRampToValue(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (this.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease. \n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal. \n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves. \n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t *                               0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        this.input = null;\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's \n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser.defaults);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The return type of the analysis\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._returnType = options.returnType;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t        this.returnType = options.returnType;\n\t        this.minDecibels = options.minDecibels;\n\t        this.maxDecibels = options.maxDecibels;\n\t    };\n\t    Tone.extend(Tone.Analyser);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'returnType': 'byte',\n\t        'type': 'fft',\n\t        'smoothing': 0.8,\n\t        'maxDecibels': -30,\n\t        'minDecibels': -100\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t *  byte values are between [0,255]. float values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.ReturnType = {\n\t        Byte: 'byte',\n\t        Float: 'float'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the \n\t\t *  result as a TypedArray. \n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.analyse = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteFrequencyData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t            }\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t            }\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t *  are between 0-255. \"float\" values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t        get: function () {\n\t            return this._returnType;\n\t        },\n\t        set: function (type) {\n\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t            } else {\n\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t            }\n\t            this._returnType = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name minDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t        get: function () {\n\t            return this._analyser.minDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.minDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name maxDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t        get: function () {\n\t            return this._analyser.maxDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.maxDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor.defaults);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = this.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param.dispose();\n\t        this._param = null;\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = this.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!this.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (this.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (this.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return this.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t *          (default), -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter.defaults);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            this.connectSeries.apply(this, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit.defaults);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3.defaults);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay.defaults);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed. \n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t *          the amplitude of an incoming signal. \n\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known \n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack  \n\t\t *  @param   {Time} release \n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.Envelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming \n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return this.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = this.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock.defaults);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1,\n\t        'lookAhead': 'auto'\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'offset': offset\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t *                          when the page was loaded.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //get the frequency value to compute the value of the next loop\n\t        var now = this.now();\n\t        //if it's started\n\t        var lookAhead = this.context.lookAhead;\n\t        var updateInterval = this.context.updateInterval;\n\t        var lagCompensation = this.context.lag * 2;\n\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t        while (loopInterval > this._nextTick && this._state) {\n\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t            if (currentState !== this._lastState) {\n\t                this._lastState = currentState;\n\t                var event = this._state.get(this._nextTick);\n\t                // emit an event\n\t                if (currentState === Tone.State.Started) {\n\t                    //correct the time\n\t                    this._nextTick = event.time;\n\t                    if (!this.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this.emit('start', event.time, this.ticks);\n\t                } else if (currentState === Tone.State.Stopped) {\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                } else if (currentState === Tone.State.Paused) {\n\t                    this.emit('pause', event.time);\n\t                }\n\t            }\n\t            var tickTime = this._nextTick;\n\t            if (this.frequency) {\n\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t                if (currentState === Tone.State.Started) {\n\t                    this.callback(tickTime);\n\t                    this.ticks++;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            if (this._root !== null) {\n\t                this._root.traverse(function (node) {\n\t                    allNodes.push(node);\n\t                });\n\t            }\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized. \n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument. \n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tLOOPING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.loop = false;\n\t        /** \n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /** \n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tCLOCK/TEMPO\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t        /**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t        this._clock = new Tone.Clock({\n\t            'callback': this._processTick.bind(this),\n\t            'frequency': 0\n\t        });\n\t        this._bindClockEvents();\n\t        /**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t        this.bpm = this._clock.frequency;\n\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t        this.bpm.units = Tone.Type.BPM;\n\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t        this._readOnly('bpm');\n\t        /**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tTIMELINE EVENTS\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduledEvents = {};\n\t        /**\n\t\t\t *  The event ID counter\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eventID = 0;\n\t        /**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = new Tone.Timeline();\n\t        /**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t        /**\n\t\t\t *  Events that occur once\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._onceEvents = new Tone.Timeline();\n\t        /** \n\t\t\t *  All of the synced Signals\n\t\t\t *  @private \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._syncedSignals = [];\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tSWING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t        //8n\n\t        /**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingAmount = 0;\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks === this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //process the single occurrence events\n\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t            event.callback(tickTime);\n\t            //remove the event\n\t            delete this._scheduledEvents[event.id.toString()];\n\t        }.bind(this));\n\t        //and clear the single occurrence timeline\n\t        this._onceEvents.cancelBefore(ticks);\n\t        //fire the next tick events if their time has come\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.callback(tickTime);\n\t        });\n\t        //process the repeated events\n\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t            if ((ticks - event.time) % event.interval === 0) {\n\t                event.callback(tickTime);\n\t            }\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._timeline\n\t        };\n\t        this._timeline.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`. \n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event. \n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        if (interval <= 0) {\n\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t        }\n\t        var event = {\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t            'interval': this.toTicks(interval),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._repeatedEvents\n\t        };\n\t        this._repeatedEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t *  Note that if the given time is less than the current transport time, \n\t\t *  the event will be invoked immediately. \n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var id = this._eventID++;\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'id': id\n\t        };\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._onceEvents\n\t        };\n\t        this._onceEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = this.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._onceEvents.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!this.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (this.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time. \n\t\t *  @param {TransportTime} startPosition \n\t\t *  @param {TransportTime} endPosition   \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default value is an 8th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value \n\t\t *  after other objects have been created can cause problems. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds|String}\n\t\t *  @name latencyHint\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return Tone.Clock.latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            Tone.Clock.latencyHint = hint;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._onceEvents.dispose();\n\t        this._onceEvents = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t            //store the Transport on the context so it can be retrieved later\n\t            context.Transport = Tone.Transport;\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers). \n\t\t *          It provides useful conveniences such as the ability \n\t\t *          to set the volume and mute the entire application. \n\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume();\n\t        /**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //connections\n\t        this.input.chain(this.output, this.context.destination);\n\t    };\n\t    Tone.extend(Tone.Master);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t *  chained in the master effects chain. \n\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter \n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} this\n\t\t */\n\t    AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the \n\t\t *          start/stop of Tone.Transport. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t * \n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t * \n\t\t */\n\t    Tone.Source = function (options) {\n\t        // this.createInsOuts(0, 1);\n\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given, \n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = this.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given, \n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time. \n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this));\n\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        this._synced = false;\n\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now] \n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        this._oscillator.start(this.toSeconds(time));\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            this._oscillator.stop(this.toSeconds(time));\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240; \n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br> \n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t * PeriodicWave equations are from the \n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based \n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag \n\t\t *  @param  {NormalRange}  phase \n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Zero = function () {\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO.defaults);\n\t        /** \n\t\t\t *  The oscillator. \n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type} \n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t *         smooth gain reduction and almost completely prevent \n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback. \n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().start();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input\n\t\t * var level = meter.value;\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'smoothing'\n\t        ], Tone.Meter.defaults);\n\t        /**\n\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t *  the signal value of the input. \n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t        this._analyser.returnType = 'float';\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t        /**\n\t\t\t *  The last computed value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastValue = 0;\n\t    };\n\t    Tone.extend(Tone.Meter);\n\t    /**\n\t\t *  @private\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Meter.Type = {\n\t        Level: 'level',\n\t        Signal: 'signal'\n\t    };\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = {\n\t        'smoothing': 0.8,\n\t        'type': Tone.Meter.Type.Level\n\t    };\n\t    /**\n\t\t * The current value of the meter. A value of 1 is\n\t\t * \"unity\".\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t        get: function () {\n\t            var signal = this._analyser.analyse();\n\t            if (this.type === Tone.Meter.Type.Level) {\n\t                //rms\n\t                var sum = 0;\n\t                for (var i = 0; i < signal.length; i++) {\n\t                    sum += Math.pow(signal[i], 2);\n\t                }\n\t                var rms = Math.sqrt(sum / signal.length);\n\t                //smooth it\n\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t                this._lastValue = rms;\n\t                //scale it\n\t                var unity = 0.35;\n\t                var val = rms / unity;\n\t                //scale the output curve\n\t                return Math.sqrt(val);\n\t            } else {\n\t                return signal[0];\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        this.createInsOuts(0, 2);\n\t        /** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        /** \n\t\t\t *  Left channel output. \n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors. \n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful \n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = this.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t *  @example\n\t\t *  //pan the input signal hard right. \n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        if (this._hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner);\n\t    /**\n\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (this._hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D.defaults);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener, \n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume. \n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol.defaults);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0.5,\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate.defaults);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (this.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (this.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (this.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = this.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (this.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (this.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (this.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern.defaults);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom.defaults);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          <br><br>\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer.defaults);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (this.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._currentDownloads--;\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t *                               If the channel is more than 1, the input array\n\t\t *                               is expected to be a multidimensional array\n\t\t *                               with dimensions equal to the number of channels.\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (this.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (this.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = this.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  the total number of downloads\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._currentDownloads = 0;\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = onload || Tone.noOp;\n\t        function onError(e) {\n\t            if (onerror) {\n\t                onerror(e);\n\t                Tone.Buffer.emit('error', e);\n\t            } else {\n\t                throw new Error(e);\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._currentDownloads++;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._currentDownloads--;\n\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t                        // clear the downloads\n\t                        Tone.Buffer._downloadQueue = [];\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t            request.abort();\n\t        });\n\t        Tone.Buffer._currentDownloads = 0;\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \n\t\t */\n\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t        urls = this._flattenUrls(urls);\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (this.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Flatten an object into a single depth object. \n\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t        var toReturn = {};\n\t        for (var i in ob) {\n\t            if (!ob.hasOwnProperty(i))\n\t                continue;\n\t            if (this.isObject(ob[i])) {\n\t                var flatObject = this._flattenUrls(ob[i]);\n\t                for (var x in flatObject) {\n\t                    if (!flatObject.hasOwnProperty(x))\n\t                        continue;\n\t                    toReturn[i + '.' + x] = flatObject[x];\n\t                }\n\t            } else {\n\t                toReturn[i] = ob[i];\n\t            }\n\t        }\n\t        return toReturn;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = this.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, input) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        if (this.isUndef(input)) {\n\t            input = this.input;\n\t        }\n\t        Buses[channelName].connect(input);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Listener = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], ListenerConstructor.defaults);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.forwardX,\n\t            options.forwardY,\n\t            options.forwardZ,\n\t            options.upX,\n\t            options.upY,\n\t            options.upZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/forward\n\t        this.forwardX = options.forwardX;\n\t        this.forwardY = options.forwardY;\n\t        this.forwardZ = options.forwardZ;\n\t        this.upX = options.upX;\n\t        this.upY = options.upY;\n\t        this.upZ = options.upZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, offlineContext);\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t        //modify the lookAhead and updateInterval to one block\n\t        this.lookAhead = this.blockTime;\n\t        this.updateInterval = this.blockTime;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t *  @private\n\t\t */\n\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t        //dummy worker that does nothing\n\t        return {\n\t            postMessage: function () {\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += Tone.prototype.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t */\n\t    Tone.Effect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback']);\n\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (this.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t *                                 of the reverb. \n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        this.connectSeries.apply(this, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        this.connectSeries.apply(this, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event.defaults);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  The probability that the callback will be invoked\n\t\t\t *  at the scheduled time. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @example\n\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t * event.probability = 0.5;\n\t\t\t */\n\t        this.probability = options.probability;\n\t        /**\n\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t */\n\t        this.humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = this.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!this.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (this.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = this.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!this.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop.defaults);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t            return this._pattern.index;\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stoped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part.defaults);\n\t        /**\n\t\t\t *  If the part is looping or not\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  The playback rate of the part\n\t\t\t *  @type  {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  The start offset\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  Keeps track of the current state\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        /**\n\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //add the events\n\t        var events = this.defaultArg(options.events, []);\n\t        if (!this.isUndef(options.events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                if (Array.isArray(events[i])) {\n\t                    this.add(events[i][0], events[i][1]);\n\t                } else {\n\t                    this.add(events[i]);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!this.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!this.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        after = this.toTicks(after);\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        ctx = this.defaultArg(ctx, this);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var e = this._events[i];\n\t            if (e instanceof Tone.Part) {\n\t                e._forEach(callback, ctx);\n\t            } else {\n\t                callback.call(ctx, e);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern.defaults);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence.defaults);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!this.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (this.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (this.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now() + this.blockTime;\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime * 1000);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0. \n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the \n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start(0);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = this.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given \n\t\t *  duration. \n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'buffer',\n\t            'onended'\n\t        ], Tone.BufferSource.defaults);\n\t        /**\n\t\t\t *  The callback to invoke after the \n\t\t\t *  buffer source is done playing. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set the buffer initially\n\t        if (!this.isUndef(options.buffer)) {\n\t            this.buffer = options.buffer;\n\t        }\n\t        this.loop = options.loop;\n\t    };\n\t    Tone.extend(Tone.BufferSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t        }\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = this.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //the values in seconds\n\t            time = this.toSeconds(time);\n\t            this._source.start(time, offset);\n\t            gain = this.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            //the fadeIn time\n\t            if (this.isUndef(fadeInTime)) {\n\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t            } else {\n\t                fadeInTime = this.toSeconds(fadeInTime);\n\t            }\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time + fadeInTime;\n\t            if (!this.isUndef(duration)) {\n\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t                duration = this.toSeconds(duration);\n\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t *  buffer out. \n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //the fadeOut time\n\t            if (this.isUndef(fadeOutTime)) {\n\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t            } else {\n\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t            }\n\t            this._stopTime = time + fadeOutTime;\n\t            //cancel the end curve\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            //set a new one\n\t            if (fadeOutTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t                time += fadeOutTime;\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t            }\n\t            // fix for safari bug and old FF\n\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t                this._source.stop(time);\n\t            }\n\t            clearTimeout(this._onendedTimeout);\n\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended. \n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t        this.dispose();\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            if (this._source) {\n\t                return this._source.buffer;\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t        set: function (buffer) {\n\t            if (buffer instanceof Tone.Buffer) {\n\t                this._source.buffer = buffer.get();\n\t            } else {\n\t                this._source.buffer = buffer;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        this.onended = null;\n\t        if (this._source) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        if (this._gainNode) {\n\t            this._gainNode.dispose();\n\t            this._gainNode = null;\n\t        }\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        this.output = null;\n\t        clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now() + this.blockTime;\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tthe noise arrays. only generated once on init\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    createBuffers();\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        Tone.Instrument.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth.defaults);\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t        //set the volume initially\n\t        this.volume.value = options.volume;\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = this.optionsObject(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player.defaults);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        if (this._buffer.loaded) {\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //make sure it has a positive duration\n\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t            duration = this.toSeconds(duration);\n\t            //the values in seconds\n\t            startTime = this.toSeconds(startTime);\n\t            //make the source\n\t            this._source = this.context.createBufferSource();\n\t            this._source.buffer = this._buffer.get();\n\t            //set the looping properties\n\t            if (this._loop) {\n\t                this._source.loop = this._loop;\n\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t            } else if (!this._synced) {\n\t                //if it's not looping, set the state change at the end of the sample\n\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t            }\n\t            //and other properties\n\t            this._source.playbackRate.value = this._playbackRate;\n\t            this._source.connect(this.output);\n\t            //start it\n\t            if (this._loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t                var loopStart = this._source.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                if (offset > loopEnd) {\n\t                    //move the offset back\n\t                    while (offset > loopEnd) {\n\t                        offset -= loopDuration;\n\t                    }\n\t                }\n\t                this._source.start(startTime, offset);\n\t            } else {\n\t                this._source.start(startTime, offset, duration);\n\t            }\n\t        } else {\n\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {String} url the url of the audio file\n\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t *  @example\n\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t * \t//repitch the sample down a half step\n\t\t * \tsampler.triggerAttack(-1);\n\t\t * }).toMaster();\n\t\t */\n\t    Tone.Sampler = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Sampler.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The sample player.\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t        this.player = new Tone.Player(options.url, options.onload);\n\t        this.player.retrigger = true;\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        this.player.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.loop = options.loop;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'reverse': false,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.1\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the start of the sample. \n\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t *                              be repitched. \n\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t        this.player.start(time);\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t *  envelope has fully released. \n\t\t *  \n\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerRelease();\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t *                                  sample should be pitch shifted.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t *  @memberOf Tone.Sampler#\n\t\t *  @name triggerAttackRelease\n\t\t *  @method triggerAttackRelease\n\t\t */\n\t    /**\n\t\t * If the output sample should loop or not.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t        get: function () {\n\t            return this.player.loop;\n\t        },\n\t        set: function (loop) {\n\t            this.player.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.player.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.player.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The buffer to play.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t        get: function () {\n\t            return this.player.buffer;\n\t        },\n\t        set: function (buff) {\n\t            this.player.buffer = buff;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.player.dispose();\n\t        this.player = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t *                                                to the MultiPlayer\n\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var multiPlayer = new MultiPlayer({\n\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t * }, function(){\n\t\t * \tmultiPlayer.start(\"kick\");\n\t\t * });\n\t\t *  @example\n\t\t * //can also store the values in an array\n\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t * function(){\n\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t * \tmultiPlayer.start(1);\n\t\t * });\n\t\t */\n\t    Tone.MultiPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'urls',\n\t            'onload'\n\t        ], Tone.MultiPlayer.defaults);\n\t        if (options.urls instanceof Tone.Buffers) {\n\t            /**\n\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t */\n\t            this.buffers = options.urls;\n\t        } else {\n\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t        }\n\t        /**\n\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t *  The fade in envelope which is applied\n\t\t\t *  to the beginning of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fade out envelope which is applied\n\t\t\t *  to the end of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.MultiPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t * Make the source from the buffername\n\t\t * @param  {String} bufferName\n\t\t * @return {Tone.BufferSource}\n\t\t * @private\n\t\t */\n\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t        var buffer;\n\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t            buffer = this.buffers.get(bufferName).get();\n\t        } else if (bufferName instanceof Tone.Buffer) {\n\t            buffer = bufferName.get();\n\t        } else if (bufferName instanceof AudioBuffer) {\n\t            buffer = bufferName;\n\t        }\n\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t            this._activeSources[bufferName] = [];\n\t        }\n\t        this._activeSources[bufferName].push(source);\n\t        return source;\n\t    };\n\t    /**\n\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t        if (duration) {\n\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t        }\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.loop = true;\n\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the first played instance of the buffer name.\n\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t            time = this.toSeconds(time);\n\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t        } else {\n\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop all currently playing buffers at the given time.\n\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var bufferName in this._activeSources) {\n\t            var sources = this._activeSources[bufferName];\n\t            for (var i = 0; i < sources.length; i++) {\n\t                sources[i].stop(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add another buffer to the available buffers.\n\t\t *  @param {String} name The name to that the buffer is refered\n\t\t *                       to in start/stop methods. \n\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t *                                  or the buffer.\n\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t */\n\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t        this.buffers.add(name, url, callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source. \"started\"\n\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.MultiPlayer#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t        get: function () {\n\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.MultiPlayer#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        for (var bufferName in this._activeSources) {\n\t            this._activeSources[bufferName].forEach(function (source) {\n\t                source.dispose();\n\t            });\n\t        }\n\t        this.buffers.dispose();\n\t        this.buffers = null;\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.MultiPlayer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer.defaults);\n\t        Tone.Source.call(this);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Plays the buffer with a small envelope\n\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        /**\n\t\t\t *  The amount of time randomly added\n\t\t\t *  or subtracted from the grain's offset\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.drift = options.drift;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'drift': 0,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = this.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        //unmute the player\n\t        this._player.volume.setValueAtTime(0, time);\n\t        if (duration) {\n\t            this._stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t        //mute the player\n\t        this._player.volume.cancelScheduledValues(time);\n\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time \n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var bufferDuration = this.buffer.duration;\n\t        if (this.loop && this._loopEnd > 0) {\n\t            bufferDuration = this._loopEnd;\n\t        }\n\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t        var offset = this._offset - this._overlap + drift;\n\t        var detune = this.detune / 100;\n\t        //keep the offset within the limits of the buffer\n\t        offset = Math.max(offset, 0);\n\t        offset = Math.min(offset, bufferDuration);\n\t        var originalFadeIn = this._player.fadeIn;\n\t        if (this.loop && this._offset > bufferDuration) {\n\t            //play the end\n\t            var endSegmentDuration = this._offset - bufferDuration;\n\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t            //and play the beginning \n\t            offset = this._offset % bufferDuration;\n\t            this._offset = this._loopStart;\n\t            this._player.fadeIn = 0;\n\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t        } else if (this._offset > bufferDuration) {\n\t            //set the state to stopped. \n\t            this.stop(time);\n\t        } else {\n\t            if (offset === 0) {\n\t                this._player.fadeIn = 0;\n\t            }\n\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t        }\n\t        this._player.fadeIn = originalFadeIn;\n\t        //increment the offset\n\t        var duration = this._clock._nextTick - time;\n\t        this._offset += duration * this._playbackRate;\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {[type]}  [description]\n\t\t */\n\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the \n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between \n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            time = this.toSeconds(time);\n\t            this._overlap = time;\n\t            if (this._overlap < 0) {\n\t                this._player.fadeIn = 0.01;\n\t                this._player.fadeOut = 0.01;\n\t            } else {\n\t                this._player.fadeIn = time;\n\t                this._player.fadeOut = time;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._player.dispose();\n\t        this._player = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check \n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *         \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t * \n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t        /**\n\t\t\t *  The MediaStreamNode \n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t        return this.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (this.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                if (!device) {\n\t                    //otherwise just take the first one\n\t                    device = devices[0];\n\t                }\n\t            }\n\t            //didn't find a matching device\n\t            if (!device) {\n\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @example\n\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is \n\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the \n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tone/build/Tone.js\n// module id = 375\n// module chunks = 0","/*\n\nWebMidi v2.0.0-rc.5\n\nWebMidi.js helps you tame the Web MIDI API. Send and receive MIDI messages with ease. Control instruments with user-friendly functions (playNote, sendPitchBend, etc.). React to MIDI input with simple event listeners (noteon, pitchbend, controlchange, etc.).\nhttps://github.com/cotejp/webmidi\n\n\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016, Jean-Philippe Côté\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n!function(scope){\"use strict\";function WebMidi(){if(WebMidi.prototype._singleton)throw new Error(\"WebMidi is a singleton, it cannot be instantiated directly.\");WebMidi.prototype._singleton=this,this._inputs=[],this._outputs=[],this._userHandlers={},this._stateChangeQueue=[],this._processingStateChange=!1,this._midiInterfaceEvents=[\"connected\",\"disconnected\"],this._notes=[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"],this._semitones={C:0,D:2,E:4,F:5,G:7,A:9,B:11},Object.defineProperties(this,{MIDI_SYSTEM_MESSAGES:{value:{sysex:240,timecode:241,songposition:242,songselect:243,tuningrequest:246,sysexend:247,clock:248,start:250,\"continue\":251,stop:252,activesensing:254,reset:255,unknownsystemmessage:-1},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MESSAGES:{value:{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,channelmode:11,programchange:12,channelaftertouch:13,pitchbend:14},writable:!1,enumerable:!0,configurable:!1},MIDI_REGISTERED_PARAMETER:{value:{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]},writable:!1,enumerable:!0,configurable:!1},MIDI_CONTROL_CHANGE_MESSAGES:{value:{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MODE_MESSAGES:{value:{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127},writable:!1,enumerable:!0,configurable:!1}}),Object.defineProperties(this,{supported:{enumerable:!0,get:function(){return\"requestMIDIAccess\"in navigator}},enabled:{enumerable:!0,get:function(){return void 0!==this[\"interface\"]}.bind(this)},inputs:{enumerable:!0,get:function(){return this._inputs}.bind(this)},outputs:{enumerable:!0,get:function(){return this._outputs}.bind(this)},sysexEnabled:{enumerable:!0,get:function(){return!(!this[\"interface\"]||!this[\"interface\"].sysexEnabled)}.bind(this)},time:{enumerable:!0,get:function(){return window.performance.now()}}})}function Input(midiInput){var that=this;this._userHandlers={channel:{},system:{}},this._midiInput=midiInput,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return that._midiInput.connection}},id:{enumerable:!0,get:function(){return that._midiInput.id}},manufacturer:{enumerable:!0,get:function(){return that._midiInput.manufacturer}},name:{enumerable:!0,get:function(){return that._midiInput.name}},state:{enumerable:!0,get:function(){return that._midiInput.state}}}),this._initializeUserHandlers()}function Output(midiOutput){var that=this;this._midiOutput=midiOutput,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return that._midiOutput.connection}},id:{enumerable:!0,get:function(){return that._midiOutput.id}},manufacturer:{enumerable:!0,get:function(){return that._midiOutput.manufacturer}},name:{enumerable:!0,get:function(){return that._midiOutput.name}},state:{enumerable:!0,get:function(){return that._midiOutput.state}}})}var wm=new WebMidi;WebMidi.prototype.enable=function(callback,sysex){return this.enabled?void 0:this.supported?void navigator.requestMIDIAccess({sysex:sysex}).then(function(midiAccess){this[\"interface\"]=midiAccess,this._resetInterfaceUserHandlers(),this[\"interface\"].onstatechange=this._onInterfaceStateChange.bind(this),this._onInterfaceStateChange(null),\"function\"==typeof callback&&callback.call(this)}.bind(this),function(err){\"function\"==typeof callback&&callback.call(this,err)}.bind(this)):void(\"function\"==typeof callback&&callback(new Error(\"The Web MIDI API is not supported by your browser.\")))},WebMidi.prototype.disable=function(){if(!this.supported)throw new Error(\"The Web MIDI API is not supported by your browser.\");this[\"interface\"]=void 0,this._inputs=[],this._outputs=[],this._resetInterfaceUserHandlers()},WebMidi.prototype.addListener=function(type,listener){if(!this.enabled)throw new Error(\"WebMidi must be enabled before adding event listeners.\");if(\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(!(this._midiInterfaceEvents.indexOf(type)>=0))throw new TypeError(\"The specified event type is not supported.\");return this._userHandlers[type].push(listener),this},WebMidi.prototype.hasListener=function(type,listener){if(!this.enabled)throw new Error(\"WebMidi must be enabled before checking event listeners.\");if(\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(!(this._midiInterfaceEvents.indexOf(type)>=0))throw new TypeError(\"The specified event type is not supported.\");for(var o=0;o<this._userHandlers[type].length;o++)if(this._userHandlers[type][o]===listener)return!0;return!1},WebMidi.prototype.removeListener=function(type,listener){if(!this.enabled)throw new Error(\"WebMidi must be enabled before removing event listeners.\");if(void 0!==listener&&\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(this._midiInterfaceEvents.indexOf(type)>=0)if(listener)for(var o=0;o<this._userHandlers[type].length;o++)this._userHandlers[type][o]===listener&&this._userHandlers[type].splice(o,1);else this._userHandlers[type]=[];else{if(void 0!==type)throw new TypeError(\"The specified event type is not supported.\");this._resetInterfaceUserHandlers()}return this},WebMidi.prototype.getInputById=function(id){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.inputs.length;i++)if(this.inputs[i].id===id)return this.inputs[i];return!1},WebMidi.prototype.getOutputById=function(id){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.outputs.length;i++)if(this.outputs[i].id===id)return this.outputs[i];return!1},WebMidi.prototype.getInputByName=function(name){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.inputs.length;i++)if(~this.inputs[i].name.indexOf(name))return this.inputs[i];return!1},WebMidi.prototype.getOutputByName=function(name){if(!this.enabled)throw new Error(\"WebMidi is not enabled.\");for(var i=0;i<this.outputs.length;i++)if(~this.outputs[i].name.indexOf(name))return this.outputs[i];return!1},WebMidi.prototype.guessNoteNumber=function(input){var output=!1;if(input&&input.toFixed&&input>=0&&127>=input?output=Math.round(input):parseInt(input)>=0&&parseInt(input)<=127?output=parseInt(input):(\"string\"==typeof input||input instanceof String)&&(output=this.noteNameToNumber(input)),output===!1)throw new Error(\"Invalid note number (\"+input+\").\");return output},WebMidi.prototype.noteNameToNumber=function(name){\"string\"!=typeof name&&(name=\"\");var matches=name.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)/i);if(!matches)throw new RangeError(\"Invalid note name.\");var semitones=wm._semitones[matches[1].toUpperCase()],octave=parseInt(matches[3]),result=12*(octave+2)+semitones;if(matches[2].toLowerCase().indexOf(\"b\")>-1?result-=matches[2].length:matches[2].toLowerCase().indexOf(\"#\")>-1&&(result+=matches[2].length),0>semitones||-2>octave||octave>8||0>result||result>127)throw new RangeError(\"Invalid note name or note outside valid range.\");return result},WebMidi.prototype._updateInputsAndOutputs=function(){this._updateInputs(),this._updateOutputs()},WebMidi.prototype._updateInputs=function(){for(var i=0;i<this._inputs.length;i++){for(var remove=!0,updated=this[\"interface\"].inputs.values(),input=updated.next();input&&!input.done;input=updated.next())if(this._inputs[i]._midiInput===input.value){remove=!1;break}remove&&this._inputs.splice(i,1)}this[\"interface\"].inputs.forEach(function(nInput){for(var add=!0,j=0;j<this._inputs.length;j++)this._inputs[j]._midiInput===nInput&&(add=!1);add&&this._inputs.push(this._createInput(nInput))}.bind(this))},WebMidi.prototype._updateOutputs=function(){for(var i=0;i<this._outputs.length;i++){for(var remove=!0,updated=this[\"interface\"].outputs.values(),output=updated.next();output&&!output.done;output=updated.next())if(this._outputs[i]._midiOutput===output.value){remove=!1;break}remove&&this._outputs.splice(i,1)}this[\"interface\"].outputs.forEach(function(nOutput){for(var add=!0,j=0;j<this._outputs.length;j++)this._outputs[j]._midiOutput===nOutput&&(add=!1);add&&this._outputs.push(this._createOutput(nOutput))}.bind(this))},WebMidi.prototype._createInput=function(midiInput){var input=new Input(midiInput);return input._midiInput.onmidimessage=input._onMidiMessage.bind(input),input},WebMidi.prototype._createOutput=function(midiOutput){var output=new Output(midiOutput);return output._midiOutput.onmidimessage=output._onMidiMessage.bind(output),output},WebMidi.prototype._onInterfaceStateChange=function(e){if(this._stateChangeQueue.push(e),!this._processingStateChange){for(this._processingStateChange=!0;this._stateChangeQueue.length>0;)this._processStateChange(this._stateChangeQueue.shift());this._processingStateChange=!1}},WebMidi.prototype._processStateChange=function(e){if(this._updateInputsAndOutputs(),null!==e){var event={timestamp:e.timeStamp,type:e.port.state,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name};\"connected\"===e.port.state&&(\"output\"===e.port.type?event.output=this.getOutputById(e.port.id):\"input\"===e.port.type&&(event.input=this.getInputById(e.port.id))),this._userHandlers[e.port.state].forEach(function(handler){handler(event)})}},WebMidi.prototype._resetInterfaceUserHandlers=function(){for(var i=0;i<this._midiInterfaceEvents.length;i++)this._userHandlers[this._midiInterfaceEvents[i]]=[]},Input.prototype.addListener=function(type,channel,listener){var that=this;if(void 0===channel&&(channel=\"all\"),Array.isArray(channel)||(channel=[channel]),channel.forEach(function(item){if(\"all\"!==item&&!(item>=1&&16>=item))throw new RangeError(\"The 'channel' parameter is invalid.\")}),\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(wm.MIDI_SYSTEM_MESSAGES[type])this._userHandlers.system[type]||(this._userHandlers.system[type]=[]),this._userHandlers.system[type].push(listener);else{if(!wm.MIDI_CHANNEL_MESSAGES[type])throw new TypeError(\"The specified event type is not supported.\");if(channel.indexOf(\"all\")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}this._userHandlers.channel[type]||(this._userHandlers.channel[type]=[]),channel.forEach(function(ch){that._userHandlers.channel[type][ch]||(that._userHandlers.channel[type][ch]=[]),that._userHandlers.channel[type][ch].push(listener)})}return this},Input.prototype.on=Input.prototype.addListener,Input.prototype.hasListener=function(type,channel,listener){var that=this;if(\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(void 0===channel&&(channel=\"all\"),channel.constructor!==Array&&(channel=[channel]),wm.MIDI_SYSTEM_MESSAGES[type]){for(var o=0;o<this._userHandlers.system[type].length;o++)if(this._userHandlers.system[type][o]===listener)return!0}else if(wm.MIDI_CHANNEL_MESSAGES[type]){if(channel.indexOf(\"all\")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}return this._userHandlers.channel[type]?channel.every(function(chNum){var listeners=that._userHandlers.channel[type][chNum];return listeners&&listeners.indexOf(listener)>-1}):!1}return!1},Input.prototype.removeListener=function(type,channel,listener){var that=this;if(void 0!==listener&&\"function\"!=typeof listener)throw new TypeError(\"The 'listener' parameter must be a function.\");if(void 0===channel&&(channel=\"all\"),channel.constructor!==Array&&(channel=[channel]),wm.MIDI_SYSTEM_MESSAGES[type])if(void 0===listener)this._userHandlers.system[type]=[];else for(var o=0;o<this._userHandlers.system[type].length;o++)this._userHandlers.system[type][o]===listener&&this._userHandlers.system[type].splice(o,1);else if(wm.MIDI_CHANNEL_MESSAGES[type]){if(channel.indexOf(\"all\")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}if(!this._userHandlers.channel[type])return this;channel.forEach(function(chNum){var listeners=that._userHandlers.channel[type][chNum];if(listeners)if(void 0===listener)that._userHandlers.channel[type][chNum]=[];else for(var l=0;l<listeners.length;l++)listeners[l]===listener&&listeners.splice(l,1)})}else{if(void 0!==type)throw new TypeError(\"The specified event type is not supported.\");this._initializeUserHandlers()}return this},Input.prototype._initializeUserHandlers=function(){for(var prop1 in wm.MIDI_CHANNEL_MESSAGES)wm.MIDI_CHANNEL_MESSAGES.hasOwnProperty(prop1)&&(this._userHandlers.channel[prop1]={});for(var prop2 in wm.MIDI_SYSTEM_MESSAGES)wm.MIDI_SYSTEM_MESSAGES.hasOwnProperty(prop2)&&(this._userHandlers.system[prop2]=[])},Input.prototype._onMidiMessage=function(e){e.data[0]<240?this._parseChannelEvent(e):e.data[0]<=255&&this._parseSystemEvent(e)},Input.prototype._parseChannelEvent=function(e){var data1,data2,command=e.data[0]>>4,channel=(15&e.data[0])+1;e.data.length>1&&(data1=e.data[1],data2=e.data.length>2?e.data[2]:void 0);var event={target:this,data:e.data,timestamp:e.timeStamp,channel:channel};command===wm.MIDI_CHANNEL_MESSAGES.noteoff||command===wm.MIDI_CHANNEL_MESSAGES.noteon&&0===data2?(event.type=\"noteoff\",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.velocity=data2/127,event.rawVelocity=data2):command===wm.MIDI_CHANNEL_MESSAGES.noteon?(event.type=\"noteon\",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.velocity=data2/127,event.rawVelocity=data2):command===wm.MIDI_CHANNEL_MESSAGES.keyaftertouch?(event.type=\"keyaftertouch\",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.value=data2/127):command===wm.MIDI_CHANNEL_MESSAGES.controlchange&&data1>=0&&119>=data1?(event.type=\"controlchange\",event.controller={number:data1,name:this.getCcNameByNumber(data1)},event.value=data2):command===wm.MIDI_CHANNEL_MESSAGES.channelmode&&data1>=120&&127>=data1?(event.type=\"channelmode\",event.controller={number:data1,name:this.getChannelModeByNumber(data1)},event.value=data2):command===wm.MIDI_CHANNEL_MESSAGES.programchange?(event.type=\"programchange\",event.value=data1):command===wm.MIDI_CHANNEL_MESSAGES.channelaftertouch?(event.type=\"channelaftertouch\",event.value=data1/127):command===wm.MIDI_CHANNEL_MESSAGES.pitchbend?(event.type=\"pitchbend\",event.value=((data2<<7)+data1-8192)/8192):event.type=\"unknownchannelmessage\",this._userHandlers.channel[event.type]&&this._userHandlers.channel[event.type][channel]&&this._userHandlers.channel[event.type][channel].forEach(function(callback){callback(event)})},Input.prototype.getCcNameByNumber=function(number){if(number=parseInt(number),!(number>=0&&119>=number))throw new RangeError(\"The control change number must be between 0 and 119.\");for(var cc in wm.MIDI_CONTROL_CHANGE_MESSAGES)if(number===wm.MIDI_CONTROL_CHANGE_MESSAGES[cc])return cc;return void 0},Input.prototype.getChannelModeByNumber=function(number){if(number=parseInt(number),!(number>=120&&status<=127))throw new RangeError(\"The control change number must be between 120 and 127.\");for(var cm in wm.MIDI_CHANNEL_MODE_MESSAGES)if(number===wm.MIDI_CHANNEL_MODE_MESSAGES[cm])return cm},Input.prototype._parseSystemEvent=function(e){var command=e.data[0],event={target:this,data:e.data,timestamp:e.timeStamp};command===wm.MIDI_SYSTEM_MESSAGES.sysex?event.type=\"sysex\":command===wm.MIDI_SYSTEM_MESSAGES.timecode?event.type=\"timecode\":command===wm.MIDI_SYSTEM_MESSAGES.songposition?event.type=\"songposition\":command===wm.MIDI_SYSTEM_MESSAGES.songselect?(event.type=\"songselect\",event.song=e.data[1]):command===wm.MIDI_SYSTEM_MESSAGES.tuningrequest?event.type=\"tuningrequest\":command===wm.MIDI_SYSTEM_MESSAGES.clock?event.type=\"clock\":command===wm.MIDI_SYSTEM_MESSAGES.start?event.type=\"start\":command===wm.MIDI_SYSTEM_MESSAGES[\"continue\"]?event.type=\"continue\":command===wm.MIDI_SYSTEM_MESSAGES.stop?event.type=\"stop\":command===wm.MIDI_SYSTEM_MESSAGES.activesensing?event.type=\"activesensing\":command===wm.MIDI_SYSTEM_MESSAGES.reset?event.type=\"reset\":event.type=\"unknownsystemmessage\",this._userHandlers.system[event.type]&&this._userHandlers.system[event.type].forEach(function(callback){callback(event)})},Output.prototype.send=function(status,data,timestamp){if(!(status>=128&&255>=status))throw new RangeError(\"The status byte must be an integer between 128 (0x80) and 255 (0xFF).\");Array.isArray(data)||(data=parseInt(data)>=0&&parseInt(data)<=127?[parseInt(data)]:[]);var message=[status];return data.forEach(function(item){if(!(item>=0&&255>=item))throw new RangeError(\"The data bytes must be integers between 0 (0x00) and 255 (0xFF).\");message.push(item)}),this._midiOutput.send(message,parseFloat(timestamp)||0),this},Output.prototype.sendSysex=function(manufacturer,data,options){if(!wm.sysexEnabled)throw new Error(\"SysEx message support must first be activated.\");return options=options||{},manufacturer=[].concat(manufacturer),data.forEach(function(item){if(0>item||item>127)throw new RangeError(\"The data bytes of a SysEx message must be integers between 0 (0x00) and 127 (0x7F).\")}),data=manufacturer.concat(data,wm.MIDI_SYSTEM_MESSAGES.sysexend),this.send(wm.MIDI_SYSTEM_MESSAGES.sysex,data,this._parseTimeParameter(options.time)),this},Output.prototype.sendTimecodeQuarterFrame=function(value,options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.timecode,value,this._parseTimeParameter(options.time)),this},Output.prototype.sendSongPosition=function(value,options){value=parseInt(value)||0,options=options||{};var msb=value>>7&127,lsb=127&value;return this.send(wm.MIDI_SYSTEM_MESSAGES.songposition,[msb,lsb],this._parseTimeParameter(options.time)),this},Output.prototype.sendSongSelect=function(value,options){if(value=parseInt(value),options=options||{},!(value>=0&&127>=value))throw new RangeError(\"The song number must be between 0 and 127.\");return this.send(wm.MIDI_SYSTEM_MESSAGES.songselect,[value],this._parseTimeParameter(options.time)),this},Output.prototype.sendTuningRequest=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.tuningrequest,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendClock=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.clock,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendStart=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.start,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendContinue=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES[\"continue\"],void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendStop=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.stop,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendActiveSensing=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.activesensing,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendReset=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.reset,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.stopNote=function(note,channel,options){if(\"all\"===note)return this.sendChannelMode(\"allnotesoff\",0,channel,options);var nVelocity=64;return options=options||{},options.velocity=parseFloat(options.velocity),options.rawVelocity?!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=127&&(nVelocity=options.velocity):!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=1&&(nVelocity=127*options.velocity),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(ch-1),[item,Math.round(nVelocity)],this._parseTimeParameter(options.time))}.bind(this))}.bind(this)),this},Output.prototype.playNote=function(note,channel,options){var nVelocity=64;if(options=options||{},options.velocity=parseFloat(options.velocity),options.rawVelocity?!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=127&&(nVelocity=options.velocity):!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=1&&(nVelocity=127*options.velocity),options.time=this._parseTimeParameter(options.time),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteon<<4)+(ch-1),[item,Math.round(nVelocity)],options.time)}.bind(this))}.bind(this)),options.duration=parseFloat(options.duration),options.duration){options.duration<=0&&(options.duration=0);var nRelease=64;options.release=parseFloat(options.release),options.rawVelocity?!isNaN(options.release)&&options.release>=0&&options.release<=127&&(nRelease=options.release):!isNaN(options.release)&&options.release>=0&&options.release<=1&&(nRelease=127*options.release),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(ch-1),[item,Math.round(nRelease)],(options.time||wm.time)+options.duration)}.bind(this))}.bind(this))}return this},Output.prototype.sendKeyAftertouch=function(note,channel,pressure,options){var that=this;if(options=options||{},1>channel||channel>16)throw new RangeError(\"The channel must be between 1 and 16.\");pressure=parseFloat(pressure),(isNaN(pressure)||0>pressure||pressure>1)&&(pressure=.5);var nPressure=Math.round(127*pressure);return this._convertNoteToArray(note).forEach(function(item){that._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(ch-1),[item,nPressure],that._parseTimeParameter(options.time))})}),this},Output.prototype.sendControlChange=function(controller,value,channel,options){if(options=options||{},\"string\"==typeof controller){if(controller=wm.MIDI_CONTROL_CHANGE_MESSAGES[controller],!controller)throw new TypeError(\"Invalid controller name.\")}else if(controller=parseInt(controller),!(controller>=0&&119>=controller))throw new RangeError(\"Controller numbers must be between 0 and 119.\");if(value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError(\"Controller value must be between 0 and 127.\");return this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(ch-1),[controller,value],this._parseTimeParameter(options.time))}.bind(this)),this},Output.prototype._selectRegisteredParameter=function(parameter,channel,time){var that=this;if(parameter[0]=parseInt(parameter[0]),!(parameter[0]>=0&&parameter[0]<=127))throw new RangeError(\"The control65 value must be between 0 and 127\");if(parameter[1]=parseInt(parameter[1]),!(parameter[1]>=0&&parameter[1]<=127))throw new RangeError(\"The control64 value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(101,parameter[0],channel,{time:time}),that.sendControlChange(100,parameter[1],channel,{time:time})}),this},Output.prototype._selectNonRegisteredParameter=function(parameter,channel,time){var that=this;if(parameter[0]=parseInt(parameter[0]),!(parameter[0]>=0&&parameter[0]<=127))throw new RangeError(\"The control63 value must be between 0 and 127\");if(parameter[1]=parseInt(parameter[1]),!(parameter[1]>=0&&parameter[1]<=127))throw new RangeError(\"The control62 value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(99,parameter[0],channel,{time:time}),that.sendControlChange(98,parameter[1],channel,{time:time})}),this},Output.prototype._setCurrentRegisteredParameter=function(data,channel,time){var that=this;if(data=[].concat(data),data[0]=parseInt(data[0]),!(data[0]>=0&&data[0]<=127))throw new RangeError(\"The msb value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(6,data[0],channel,{time:time})}),data[1]=parseInt(data[1]),data[1]>=0&&data[1]<=127&&this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(38,data[1],channel,{time:time})}),this},Output.prototype._deselectRegisteredParameter=function(channel,time){var that=this;return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(101,127,channel,{time:time}),that.sendControlChange(100,127,channel,{time:time})}),this},Output.prototype.setRegisteredParameter=function(parameter,data,channel,options){var that=this;if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new Error(\"The specified parameter is not available.\");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){that._selectRegisteredParameter(parameter,channel,options.time),that._setCurrentRegisteredParameter(data,channel,options.time),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.setNonRegisteredParameter=function(parameter,data,channel,options){var that=this;if(options=options||{},!(parameter[0]>=0&&parameter[0]<=127&&parameter[1]>=0&&parameter[1]<=127))throw new Error(\"Position 0 and 1 of the 2-position parameter array must both be between 0 and 127.\");return data=[].concat(data),this._convertChannelToArray(channel).forEach(function(ch){that._selectNonRegisteredParameter(parameter,channel,options.time),that._setCurrentRegisteredParameter(data,channel,options.time),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.incrementRegisteredParameter=function(parameter,channel,options){var that=this;if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new Error(\"The specified parameter is not available.\");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){that._selectRegisteredParameter(parameter,channel,options.time),that.sendControlChange(96,0,channel,{time:options.time}),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.decrementRegisteredParameter=function(parameter,channel,options){if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new TypeError(\"The specified parameter is not available.\");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){this._selectRegisteredParameter(parameter,channel,options.time),this.sendControlChange(97,0,channel,{time:options.time}),this._deselectRegisteredParameter(channel,options.time)}.bind(this)),this},Output.prototype.setPitchBendRange=function(semitones,cents,channel,options){var that=this;if(options=options||{},semitones=parseInt(semitones)||0,!(semitones>=0&&127>=semitones))throw new RangeError(\"The semitones value must be between 0 and 127\");if(cents=parseInt(cents)||0,!(cents>=0&&127>=cents))throw new RangeError(\"The cents value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"pitchbendrange\",[semitones,cents],channel,{time:options.time})}),this},Output.prototype.setModulationRange=function(semitones,cents,channel,options){var that=this;if(options=options||{},semitones=parseInt(semitones)||0,!(semitones>=0&&127>=semitones))throw new RangeError(\"The semitones value must be between 0 and 127\");if(cents=parseInt(cents)||0,!(cents>=0&&127>=cents))throw new RangeError(\"The cents value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"modulationrange\",[semitones,cents],channel,{time:options.time})}),this},Output.prototype.setMasterTuning=function(value,channel,options){var that=this;if(options=options||{},value=parseFloat(value)||0,-65>=value||value>=64)throw new RangeError(\"The value must be a decimal number larger than -65 and smaller than 64.\");var coarse=parseInt(value)+64,fine=value-parseInt(value);fine=Math.round((fine+1)/2*16383);var msb=fine>>7&127,lsb=127&fine;return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"channelcoarsetuning\",coarse,channel,{time:options.time}),that.setRegisteredParameter(\"channelfinetuning\",[msb,lsb],channel,{time:options.time})}),this},Output.prototype.setTuningProgram=function(value,channel,options){var that=this;if(options=options||{},value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError(\"The program value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"tuningprogram\",value,channel,{time:options.time})}),this},Output.prototype.setTuningBank=function(value,channel,options){var that=this;if(options=options||{},value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError(\"The bank value must be between 0 and 127\");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter(\"tuningbank\",value,channel,{time:options.time})}),this},Output.prototype.sendChannelMode=function(command,value,channel,options){var that=this;if(options=options||{},\"string\"==typeof command){if(command=wm.MIDI_CHANNEL_MODE_MESSAGES[command],!command)throw new TypeError(\"Invalid channel mode message name.\")}else if(command=parseInt(command),!(command>=120&&127>=command))throw new RangeError(\"Channel mode numerical identifiers must be between 120 and 127.\");if(value=parseInt(value),isNaN(value)||0>value||value>127)throw new RangeError(\"Value must be integers between 0 and 127.\");return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.channelmode<<4)+(ch-1),[command,value],that._parseTimeParameter(options.time))}),this},Output.prototype.sendProgramChange=function(program,channel,options){var that=this;if(options=options||{},program=parseInt(program),isNaN(program)||0>program||program>127)throw new RangeError(\"Program numbers must be between 0 and 127.\");return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.programchange<<4)+(ch-1),[program],that._parseTimeParameter(options.time))}),this},Output.prototype.sendChannelAftertouch=function(pressure,channel,options){var that=this;options=options||{},pressure=parseFloat(pressure),(isNaN(pressure)||0>pressure||pressure>1)&&(pressure=.5);var nPressure=Math.round(127*pressure);return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(ch-1),[nPressure],that._parseTimeParameter(options.time))}),this},Output.prototype.sendPitchBend=function(bend,channel,options){var that=this;if(options=options||{},bend=parseFloat(bend),isNaN(bend)||-1>bend||bend>1)throw new RangeError(\"Pitch bend value must be between -1 and 1.\");\nvar nLevel=Math.round((bend+1)/2*16383),msb=nLevel>>7&127,lsb=127&nLevel;return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(ch-1),[lsb,msb],that._parseTimeParameter(options.time))}),this},Output.prototype._parseTimeParameter=function(time){var parsed,value;return\"string\"==typeof time&&\"+\"===time.substring(0,1)?(parsed=parseFloat(time),parsed&&parsed>0&&(value=wm.time+parsed)):(parsed=parseFloat(time),parsed>wm.time&&(value=parsed)),value},Output.prototype._convertNoteToArray=function(note){var notes=[];return Array.isArray(note)||(note=[note]),note.forEach(function(item){notes.push(wm.guessNoteNumber(item))}),notes},Output.prototype._convertChannelToArray=function(channel){if((\"all\"===channel||void 0===channel)&&(channel=[\"all\"]),Array.isArray(channel)||(channel=[channel]),channel.indexOf(\"all\")>-1){channel=[];for(var i=1;16>=i;i++)channel.push(i)}return channel.forEach(function(ch){if(!(ch>=1&&16>=ch))throw new RangeError(\"MIDI channels must be between 1 and 16.\")}),channel},Output.prototype._onMidiMessage=function(e){},\"function\"==typeof define&&\"object\"==typeof define.amd?define([],function(){return wm}):\"undefined\"!=typeof module&&module.exports?module.exports=wm:scope.WebMidi||(scope.WebMidi=wm)}(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/webmidi/webmidi.min.js\n// module id = 376\n// module chunks = 0"],"sourceRoot":""}